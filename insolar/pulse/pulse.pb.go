// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: insolar/pulse/pulse.proto

package pulse

import (
	bytes "bytes"
	fmt "fmt"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	github_com_insolar_insolar_insolar "github.com/insolar/insolar/insolar"
	io "io"
	math "math"
	reflect "reflect"
	strings "strings"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion2 // please upgrade the proto package

type PulseProto struct {
	PulseNumber      uint32                                     `protobuf:"varint,1,opt,name=PulseNumber,proto3" json:"PulseNumber,omitempty"`
	PrevPulseNumber  uint32                                     `protobuf:"varint,2,opt,name=PrevPulseNumber,proto3" json:"PrevPulseNumber,omitempty"`
	NextPulseNumber  uint32                                     `protobuf:"varint,3,opt,name=NextPulseNumber,proto3" json:"NextPulseNumber,omitempty"`
	PulseTimestamp   int64                                      `protobuf:"varint,4,opt,name=PulseTimestamp,proto3" json:"PulseTimestamp,omitempty"`
	EpochPulseNumber int32                                      `protobuf:"varint,5,opt,name=EpochPulseNumber,proto3" json:"EpochPulseNumber,omitempty"`
	OriginID         []byte                                     `protobuf:"bytes,6,opt,name=OriginID,proto3" json:"OriginID,omitempty"`
	Entropy          github_com_insolar_insolar_insolar.Entropy `protobuf:"bytes,7,opt,name=Entropy,proto3,customtype=github.com/insolar/insolar/insolar.Entropy" json:"Entropy"`
	Signs            []*PulseSenderConfirmationProto            `protobuf:"bytes,8,rep,name=Signs,proto3" json:"Signs,omitempty"`
}

func (m *PulseProto) Reset()      { *m = PulseProto{} }
func (*PulseProto) ProtoMessage() {}
func (*PulseProto) Descriptor() ([]byte, []int) {
	return fileDescriptor_b4cb696fbf73183e, []int{0}
}
func (m *PulseProto) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PulseProto) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PulseProto.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PulseProto) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PulseProto.Merge(m, src)
}
func (m *PulseProto) XXX_Size() int {
	return m.Size()
}
func (m *PulseProto) XXX_DiscardUnknown() {
	xxx_messageInfo_PulseProto.DiscardUnknown(m)
}

var xxx_messageInfo_PulseProto proto.InternalMessageInfo

type PulseSenderConfirmationProto struct {
	PulseNumber     uint32                                     `protobuf:"varint,1,opt,name=PulseNumber,proto3" json:"PulseNumber,omitempty"`
	ChosenPublicKey []byte                                     `protobuf:"bytes,2,opt,name=ChosenPublicKey,proto3" json:"ChosenPublicKey,omitempty"`
	Entropy         github_com_insolar_insolar_insolar.Entropy `protobuf:"bytes,3,opt,name=Entropy,proto3,customtype=github.com/insolar/insolar/insolar.Entropy" json:"Entropy"`
	Signature       []byte                                     `protobuf:"bytes,4,opt,name=Signature,proto3" json:"Signature,omitempty"`
}

func (m *PulseSenderConfirmationProto) Reset()      { *m = PulseSenderConfirmationProto{} }
func (*PulseSenderConfirmationProto) ProtoMessage() {}
func (*PulseSenderConfirmationProto) Descriptor() ([]byte, []int) {
	return fileDescriptor_b4cb696fbf73183e, []int{1}
}
func (m *PulseSenderConfirmationProto) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PulseSenderConfirmationProto) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PulseSenderConfirmationProto.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PulseSenderConfirmationProto) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PulseSenderConfirmationProto.Merge(m, src)
}
func (m *PulseSenderConfirmationProto) XXX_Size() int {
	return m.Size()
}
func (m *PulseSenderConfirmationProto) XXX_DiscardUnknown() {
	xxx_messageInfo_PulseSenderConfirmationProto.DiscardUnknown(m)
}

var xxx_messageInfo_PulseSenderConfirmationProto proto.InternalMessageInfo

func init() {
	proto.RegisterType((*PulseProto)(nil), "pulse.PulseProto")
	proto.RegisterType((*PulseSenderConfirmationProto)(nil), "pulse.PulseSenderConfirmationProto")
}

func init() { proto.RegisterFile("insolar/pulse/pulse.proto", fileDescriptor_b4cb696fbf73183e) }

var fileDescriptor_b4cb696fbf73183e = []byte{
	// 406 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xa4, 0x52, 0xcd, 0xca, 0xd3, 0x40,
	0x14, 0x9d, 0x69, 0x4c, 0x5b, 0xa7, 0xf5, 0x87, 0xac, 0x62, 0x29, 0xd3, 0x50, 0x41, 0x42, 0xc1,
	0x14, 0xea, 0x4a, 0x70, 0xd5, 0xda, 0x85, 0x28, 0x35, 0x4c, 0x7d, 0x81, 0xa4, 0x4e, 0xd3, 0x81,
	0x66, 0x26, 0x4c, 0x12, 0xb1, 0x3b, 0x1f, 0xc1, 0xc7, 0xf0, 0x51, 0xba, 0xec, 0x4a, 0x8a, 0x8b,
	0x62, 0xd2, 0x8d, 0xcb, 0x2e, 0x05, 0x37, 0x92, 0x89, 0xd5, 0x10, 0x41, 0x84, 0x6f, 0x93, 0xcc,
	0x39, 0xf7, 0x9c, 0xcb, 0xdc, 0x7b, 0x06, 0x3d, 0x60, 0x3c, 0x16, 0x5b, 0x4f, 0x8e, 0xa3, 0x74,
	0x1b, 0xd3, 0xf2, 0xeb, 0x44, 0x52, 0x24, 0xc2, 0xd0, 0x15, 0xe8, 0x3d, 0x0e, 0x58, 0xb2, 0x49,
	0x7d, 0x67, 0x25, 0xc2, 0x71, 0x20, 0x02, 0x31, 0x56, 0x55, 0x3f, 0x5d, 0x2b, 0xa4, 0x80, 0x3a,
	0x95, 0xae, 0xe1, 0x8f, 0x06, 0x42, 0x6e, 0x61, 0x74, 0x55, 0x13, 0x0b, 0x75, 0x14, 0x5a, 0xa4,
	0xa1, 0x4f, 0xa5, 0x09, 0x2d, 0x68, 0xdf, 0x21, 0x55, 0xca, 0xb0, 0xd1, 0x3d, 0x57, 0xd2, 0x77,
	0x55, 0x55, 0x43, 0xa9, 0xea, 0x74, 0xa1, 0x5c, 0xd0, 0xf7, 0x49, 0x55, 0xa9, 0x95, 0xca, 0x1a,
	0x6d, 0x3c, 0x42, 0x77, 0x15, 0x7c, 0xc3, 0x42, 0x1a, 0x27, 0x5e, 0x18, 0x99, 0xb7, 0x2c, 0x68,
	0x6b, 0xa4, 0xc6, 0x1a, 0x23, 0x74, 0x7f, 0x1e, 0x89, 0xd5, 0xa6, 0xda, 0x52, 0xb7, 0xa0, 0xad,
	0x93, 0xbf, 0x78, 0xa3, 0x87, 0xda, 0xaf, 0x25, 0x0b, 0x18, 0x7f, 0xf1, 0xdc, 0x6c, 0x5a, 0xd0,
	0xee, 0x92, 0xdf, 0xd8, 0x78, 0x85, 0x5a, 0x73, 0x9e, 0x48, 0x11, 0xed, 0xcc, 0x56, 0x51, 0x9a,
	0x4e, 0xf6, 0xa7, 0x01, 0xf8, 0x72, 0x1a, 0x8c, 0x2a, 0xcb, 0xbb, 0x6e, 0xba, 0xf6, 0x77, 0x7e,
	0x39, 0xc9, 0xb5, 0x85, 0xf1, 0x14, 0xe9, 0x4b, 0x16, 0xf0, 0xd8, 0x6c, 0x5b, 0x9a, 0xdd, 0x99,
	0x3c, 0x74, 0xca, 0x54, 0xd4, 0x65, 0x96, 0x94, 0xbf, 0xa5, 0x72, 0x26, 0xf8, 0x9a, 0xc9, 0xd0,
	0x4b, 0x98, 0xe0, 0x6a, 0xcf, 0xa4, 0x74, 0x0c, 0x3f, 0x43, 0xd4, 0xff, 0x97, 0xee, 0xff, 0xf2,
	0x98, 0x6d, 0x44, 0x4c, 0xb9, 0x9b, 0xfa, 0x5b, 0xb6, 0x7a, 0x49, 0x77, 0x2a, 0x8f, 0x2e, 0xa9,
	0xd3, 0xd5, 0xa9, 0xb5, 0x9b, 0x4f, 0xdd, 0x47, 0xb7, 0x8b, 0x19, 0xbc, 0x24, 0x95, 0x54, 0xc5,
	0xd5, 0x25, 0x7f, 0x88, 0xe9, 0xb3, 0x7d, 0x86, 0xc1, 0x21, 0xc3, 0xe0, 0x98, 0x61, 0x70, 0xc9,
	0x30, 0xfc, 0x9e, 0x61, 0xf0, 0x21, 0xc7, 0xf0, 0x53, 0x8e, 0xe1, 0x3e, 0xc7, 0xf0, 0x90, 0x63,
	0xf8, 0x35, 0xc7, 0xf0, 0x5b, 0x8e, 0xc1, 0x25, 0xc7, 0xf0, 0xe3, 0x19, 0x83, 0xc3, 0x19, 0x83,
	0xe3, 0x19, 0x03, 0xbf, 0xa9, 0xde, 0xe6, 0x93, 0x9f, 0x01, 0x00, 0x00, 0xff, 0xff, 0xdb, 0x6c,
	0x95, 0xa0, 0xee, 0x02, 0x00, 0x00,
}

func (this *PulseProto) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*PulseProto)
	if !ok {
		that2, ok := that.(PulseProto)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.PulseNumber != that1.PulseNumber {
		return false
	}
	if this.PrevPulseNumber != that1.PrevPulseNumber {
		return false
	}
	if this.NextPulseNumber != that1.NextPulseNumber {
		return false
	}
	if this.PulseTimestamp != that1.PulseTimestamp {
		return false
	}
	if this.EpochPulseNumber != that1.EpochPulseNumber {
		return false
	}
	if !bytes.Equal(this.OriginID, that1.OriginID) {
		return false
	}
	if !this.Entropy.Equal(that1.Entropy) {
		return false
	}
	if len(this.Signs) != len(that1.Signs) {
		return false
	}
	for i := range this.Signs {
		if !this.Signs[i].Equal(that1.Signs[i]) {
			return false
		}
	}
	return true
}
func (this *PulseSenderConfirmationProto) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*PulseSenderConfirmationProto)
	if !ok {
		that2, ok := that.(PulseSenderConfirmationProto)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.PulseNumber != that1.PulseNumber {
		return false
	}
	if !bytes.Equal(this.ChosenPublicKey, that1.ChosenPublicKey) {
		return false
	}
	if !this.Entropy.Equal(that1.Entropy) {
		return false
	}
	if !bytes.Equal(this.Signature, that1.Signature) {
		return false
	}
	return true
}
func (this *PulseProto) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 12)
	s = append(s, "&pulse.PulseProto{")
	s = append(s, "PulseNumber: "+fmt.Sprintf("%#v", this.PulseNumber)+",\n")
	s = append(s, "PrevPulseNumber: "+fmt.Sprintf("%#v", this.PrevPulseNumber)+",\n")
	s = append(s, "NextPulseNumber: "+fmt.Sprintf("%#v", this.NextPulseNumber)+",\n")
	s = append(s, "PulseTimestamp: "+fmt.Sprintf("%#v", this.PulseTimestamp)+",\n")
	s = append(s, "EpochPulseNumber: "+fmt.Sprintf("%#v", this.EpochPulseNumber)+",\n")
	s = append(s, "OriginID: "+fmt.Sprintf("%#v", this.OriginID)+",\n")
	s = append(s, "Entropy: "+fmt.Sprintf("%#v", this.Entropy)+",\n")
	if this.Signs != nil {
		s = append(s, "Signs: "+fmt.Sprintf("%#v", this.Signs)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *PulseSenderConfirmationProto) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 8)
	s = append(s, "&pulse.PulseSenderConfirmationProto{")
	s = append(s, "PulseNumber: "+fmt.Sprintf("%#v", this.PulseNumber)+",\n")
	s = append(s, "ChosenPublicKey: "+fmt.Sprintf("%#v", this.ChosenPublicKey)+",\n")
	s = append(s, "Entropy: "+fmt.Sprintf("%#v", this.Entropy)+",\n")
	s = append(s, "Signature: "+fmt.Sprintf("%#v", this.Signature)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func valueToGoStringPulse(v interface{}, typ string) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("func(v %v) *%v { return &v } ( %#v )", typ, typ, pv)
}
func (m *PulseProto) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PulseProto) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.PulseNumber != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintPulse(dAtA, i, uint64(m.PulseNumber))
	}
	if m.PrevPulseNumber != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintPulse(dAtA, i, uint64(m.PrevPulseNumber))
	}
	if m.NextPulseNumber != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintPulse(dAtA, i, uint64(m.NextPulseNumber))
	}
	if m.PulseTimestamp != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintPulse(dAtA, i, uint64(m.PulseTimestamp))
	}
	if m.EpochPulseNumber != 0 {
		dAtA[i] = 0x28
		i++
		i = encodeVarintPulse(dAtA, i, uint64(m.EpochPulseNumber))
	}
	if len(m.OriginID) > 0 {
		dAtA[i] = 0x32
		i++
		i = encodeVarintPulse(dAtA, i, uint64(len(m.OriginID)))
		i += copy(dAtA[i:], m.OriginID)
	}
	dAtA[i] = 0x3a
	i++
	i = encodeVarintPulse(dAtA, i, uint64(m.Entropy.Size()))
	n1, err := m.Entropy.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n1
	if len(m.Signs) > 0 {
		for _, msg := range m.Signs {
			dAtA[i] = 0x42
			i++
			i = encodeVarintPulse(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *PulseSenderConfirmationProto) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PulseSenderConfirmationProto) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.PulseNumber != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintPulse(dAtA, i, uint64(m.PulseNumber))
	}
	if len(m.ChosenPublicKey) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintPulse(dAtA, i, uint64(len(m.ChosenPublicKey)))
		i += copy(dAtA[i:], m.ChosenPublicKey)
	}
	dAtA[i] = 0x1a
	i++
	i = encodeVarintPulse(dAtA, i, uint64(m.Entropy.Size()))
	n2, err := m.Entropy.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n2
	if len(m.Signature) > 0 {
		dAtA[i] = 0x22
		i++
		i = encodeVarintPulse(dAtA, i, uint64(len(m.Signature)))
		i += copy(dAtA[i:], m.Signature)
	}
	return i, nil
}

func encodeVarintPulse(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *PulseProto) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.PulseNumber != 0 {
		n += 1 + sovPulse(uint64(m.PulseNumber))
	}
	if m.PrevPulseNumber != 0 {
		n += 1 + sovPulse(uint64(m.PrevPulseNumber))
	}
	if m.NextPulseNumber != 0 {
		n += 1 + sovPulse(uint64(m.NextPulseNumber))
	}
	if m.PulseTimestamp != 0 {
		n += 1 + sovPulse(uint64(m.PulseTimestamp))
	}
	if m.EpochPulseNumber != 0 {
		n += 1 + sovPulse(uint64(m.EpochPulseNumber))
	}
	l = len(m.OriginID)
	if l > 0 {
		n += 1 + l + sovPulse(uint64(l))
	}
	l = m.Entropy.Size()
	n += 1 + l + sovPulse(uint64(l))
	if len(m.Signs) > 0 {
		for _, e := range m.Signs {
			l = e.Size()
			n += 1 + l + sovPulse(uint64(l))
		}
	}
	return n
}

func (m *PulseSenderConfirmationProto) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.PulseNumber != 0 {
		n += 1 + sovPulse(uint64(m.PulseNumber))
	}
	l = len(m.ChosenPublicKey)
	if l > 0 {
		n += 1 + l + sovPulse(uint64(l))
	}
	l = m.Entropy.Size()
	n += 1 + l + sovPulse(uint64(l))
	l = len(m.Signature)
	if l > 0 {
		n += 1 + l + sovPulse(uint64(l))
	}
	return n
}

func sovPulse(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozPulse(x uint64) (n int) {
	return sovPulse(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (this *PulseProto) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&PulseProto{`,
		`PulseNumber:` + fmt.Sprintf("%v", this.PulseNumber) + `,`,
		`PrevPulseNumber:` + fmt.Sprintf("%v", this.PrevPulseNumber) + `,`,
		`NextPulseNumber:` + fmt.Sprintf("%v", this.NextPulseNumber) + `,`,
		`PulseTimestamp:` + fmt.Sprintf("%v", this.PulseTimestamp) + `,`,
		`EpochPulseNumber:` + fmt.Sprintf("%v", this.EpochPulseNumber) + `,`,
		`OriginID:` + fmt.Sprintf("%v", this.OriginID) + `,`,
		`Entropy:` + fmt.Sprintf("%v", this.Entropy) + `,`,
		`Signs:` + strings.Replace(fmt.Sprintf("%v", this.Signs), "PulseSenderConfirmationProto", "PulseSenderConfirmationProto", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *PulseSenderConfirmationProto) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&PulseSenderConfirmationProto{`,
		`PulseNumber:` + fmt.Sprintf("%v", this.PulseNumber) + `,`,
		`ChosenPublicKey:` + fmt.Sprintf("%v", this.ChosenPublicKey) + `,`,
		`Entropy:` + fmt.Sprintf("%v", this.Entropy) + `,`,
		`Signature:` + fmt.Sprintf("%v", this.Signature) + `,`,
		`}`,
	}, "")
	return s
}
func valueToStringPulse(v interface{}) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("*%v", pv)
}
func (m *PulseProto) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPulse
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PulseProto: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PulseProto: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PulseNumber", wireType)
			}
			m.PulseNumber = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPulse
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PulseNumber |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PrevPulseNumber", wireType)
			}
			m.PrevPulseNumber = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPulse
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PrevPulseNumber |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NextPulseNumber", wireType)
			}
			m.NextPulseNumber = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPulse
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.NextPulseNumber |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PulseTimestamp", wireType)
			}
			m.PulseTimestamp = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPulse
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PulseTimestamp |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EpochPulseNumber", wireType)
			}
			m.EpochPulseNumber = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPulse
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.EpochPulseNumber |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OriginID", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPulse
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthPulse
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthPulse
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OriginID = append(m.OriginID[:0], dAtA[iNdEx:postIndex]...)
			if m.OriginID == nil {
				m.OriginID = []byte{}
			}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Entropy", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPulse
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthPulse
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthPulse
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Entropy.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Signs", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPulse
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPulse
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPulse
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Signs = append(m.Signs, &PulseSenderConfirmationProto{})
			if err := m.Signs[len(m.Signs)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPulse(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPulse
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthPulse
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PulseSenderConfirmationProto) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPulse
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PulseSenderConfirmationProto: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PulseSenderConfirmationProto: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PulseNumber", wireType)
			}
			m.PulseNumber = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPulse
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PulseNumber |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChosenPublicKey", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPulse
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthPulse
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthPulse
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ChosenPublicKey = append(m.ChosenPublicKey[:0], dAtA[iNdEx:postIndex]...)
			if m.ChosenPublicKey == nil {
				m.ChosenPublicKey = []byte{}
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Entropy", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPulse
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthPulse
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthPulse
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Entropy.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Signature", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPulse
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthPulse
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthPulse
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Signature = append(m.Signature[:0], dAtA[iNdEx:postIndex]...)
			if m.Signature == nil {
				m.Signature = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPulse(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPulse
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthPulse
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipPulse(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowPulse
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowPulse
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowPulse
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthPulse
			}
			iNdEx += length
			if iNdEx < 0 {
				return 0, ErrInvalidLengthPulse
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowPulse
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipPulse(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
				if iNdEx < 0 {
					return 0, ErrInvalidLengthPulse
				}
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthPulse = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowPulse   = fmt.Errorf("proto: integer overflow")
)
