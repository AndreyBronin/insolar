package cryptkit

// Code generated by http://github.com/gojuno/minimock (3.0.0). DO NOT EDIT.

import (
	"sync"
	mm_atomic "sync/atomic"
	mm_time "time"

	"github.com/gojuno/minimock/v3"
)

// KeyStoreFactoryMock implements KeyStoreFactory
type KeyStoreFactoryMock struct {
	t minimock.Tester

	funcGetPublicKeyStore          func(skh SignatureKeyHolder) (p1 PublicKeyStore)
	inspectFuncGetPublicKeyStore   func(skh SignatureKeyHolder)
	afterGetPublicKeyStoreCounter  uint64
	beforeGetPublicKeyStoreCounter uint64
	GetPublicKeyStoreMock          mKeyStoreFactoryMockGetPublicKeyStore
}

// NewKeyStoreFactoryMock returns a mock for KeyStoreFactory
func NewKeyStoreFactoryMock(t minimock.Tester) *KeyStoreFactoryMock {
	m := &KeyStoreFactoryMock{t: t}
	if controller, ok := t.(minimock.MockController); ok {
		controller.RegisterMocker(m)
	}

	m.GetPublicKeyStoreMock = mKeyStoreFactoryMockGetPublicKeyStore{mock: m}
	m.GetPublicKeyStoreMock.callArgs = []*KeyStoreFactoryMockGetPublicKeyStoreParams{}

	return m
}

type mKeyStoreFactoryMockGetPublicKeyStore struct {
	mock               *KeyStoreFactoryMock
	defaultExpectation *KeyStoreFactoryMockGetPublicKeyStoreExpectation
	expectations       []*KeyStoreFactoryMockGetPublicKeyStoreExpectation

	callArgs []*KeyStoreFactoryMockGetPublicKeyStoreParams
	mutex    sync.RWMutex
}

// KeyStoreFactoryMockGetPublicKeyStoreExpectation specifies expectation struct of the KeyStoreFactory.GetPublicKeyStore
type KeyStoreFactoryMockGetPublicKeyStoreExpectation struct {
	mock    *KeyStoreFactoryMock
	params  *KeyStoreFactoryMockGetPublicKeyStoreParams
	results *KeyStoreFactoryMockGetPublicKeyStoreResults
	Counter uint64
}

// KeyStoreFactoryMockGetPublicKeyStoreParams contains parameters of the KeyStoreFactory.GetPublicKeyStore
type KeyStoreFactoryMockGetPublicKeyStoreParams struct {
	skh SignatureKeyHolder
}

// KeyStoreFactoryMockGetPublicKeyStoreResults contains results of the KeyStoreFactory.GetPublicKeyStore
type KeyStoreFactoryMockGetPublicKeyStoreResults struct {
	p1 PublicKeyStore
}

// Expect sets up expected params for KeyStoreFactory.GetPublicKeyStore
func (mmGetPublicKeyStore *mKeyStoreFactoryMockGetPublicKeyStore) Expect(skh SignatureKeyHolder) *mKeyStoreFactoryMockGetPublicKeyStore {
	if mmGetPublicKeyStore.mock.funcGetPublicKeyStore != nil {
		mmGetPublicKeyStore.mock.t.Fatalf("KeyStoreFactoryMock.GetPublicKeyStore mock is already set by Set")
	}

	if mmGetPublicKeyStore.defaultExpectation == nil {
		mmGetPublicKeyStore.defaultExpectation = &KeyStoreFactoryMockGetPublicKeyStoreExpectation{}
	}

	mmGetPublicKeyStore.defaultExpectation.params = &KeyStoreFactoryMockGetPublicKeyStoreParams{skh}
	for _, e := range mmGetPublicKeyStore.expectations {
		if minimock.Equal(e.params, mmGetPublicKeyStore.defaultExpectation.params) {
			mmGetPublicKeyStore.mock.t.Fatalf("Expectation set by When has same params: %#v", *mmGetPublicKeyStore.defaultExpectation.params)
		}
	}

	return mmGetPublicKeyStore
}

// Inspect accepts an inspector function that has same arguments as the KeyStoreFactory.GetPublicKeyStore
func (mmGetPublicKeyStore *mKeyStoreFactoryMockGetPublicKeyStore) Inspect(f func(skh SignatureKeyHolder)) *mKeyStoreFactoryMockGetPublicKeyStore {
	if mmGetPublicKeyStore.mock.inspectFuncGetPublicKeyStore != nil {
		mmGetPublicKeyStore.mock.t.Fatalf("Inspect function is already set for KeyStoreFactoryMock.GetPublicKeyStore")
	}

	mmGetPublicKeyStore.mock.inspectFuncGetPublicKeyStore = f

	return mmGetPublicKeyStore
}

// Return sets up results that will be returned by KeyStoreFactory.GetPublicKeyStore
func (mmGetPublicKeyStore *mKeyStoreFactoryMockGetPublicKeyStore) Return(p1 PublicKeyStore) *KeyStoreFactoryMock {
	if mmGetPublicKeyStore.mock.funcGetPublicKeyStore != nil {
		mmGetPublicKeyStore.mock.t.Fatalf("KeyStoreFactoryMock.GetPublicKeyStore mock is already set by Set")
	}

	if mmGetPublicKeyStore.defaultExpectation == nil {
		mmGetPublicKeyStore.defaultExpectation = &KeyStoreFactoryMockGetPublicKeyStoreExpectation{mock: mmGetPublicKeyStore.mock}
	}
	mmGetPublicKeyStore.defaultExpectation.results = &KeyStoreFactoryMockGetPublicKeyStoreResults{p1}
	return mmGetPublicKeyStore.mock
}

//Set uses given function f to mock the KeyStoreFactory.GetPublicKeyStore method
func (mmGetPublicKeyStore *mKeyStoreFactoryMockGetPublicKeyStore) Set(f func(skh SignatureKeyHolder) (p1 PublicKeyStore)) *KeyStoreFactoryMock {
	if mmGetPublicKeyStore.defaultExpectation != nil {
		mmGetPublicKeyStore.mock.t.Fatalf("Default expectation is already set for the KeyStoreFactory.GetPublicKeyStore method")
	}

	if len(mmGetPublicKeyStore.expectations) > 0 {
		mmGetPublicKeyStore.mock.t.Fatalf("Some expectations are already set for the KeyStoreFactory.GetPublicKeyStore method")
	}

	mmGetPublicKeyStore.mock.funcGetPublicKeyStore = f
	return mmGetPublicKeyStore.mock
}

// When sets expectation for the KeyStoreFactory.GetPublicKeyStore which will trigger the result defined by the following
// Then helper
func (mmGetPublicKeyStore *mKeyStoreFactoryMockGetPublicKeyStore) When(skh SignatureKeyHolder) *KeyStoreFactoryMockGetPublicKeyStoreExpectation {
	if mmGetPublicKeyStore.mock.funcGetPublicKeyStore != nil {
		mmGetPublicKeyStore.mock.t.Fatalf("KeyStoreFactoryMock.GetPublicKeyStore mock is already set by Set")
	}

	expectation := &KeyStoreFactoryMockGetPublicKeyStoreExpectation{
		mock:   mmGetPublicKeyStore.mock,
		params: &KeyStoreFactoryMockGetPublicKeyStoreParams{skh},
	}
	mmGetPublicKeyStore.expectations = append(mmGetPublicKeyStore.expectations, expectation)
	return expectation
}

// Then sets up KeyStoreFactory.GetPublicKeyStore return parameters for the expectation previously defined by the When method
func (e *KeyStoreFactoryMockGetPublicKeyStoreExpectation) Then(p1 PublicKeyStore) *KeyStoreFactoryMock {
	e.results = &KeyStoreFactoryMockGetPublicKeyStoreResults{p1}
	return e.mock
}

// GetPublicKeyStore implements KeyStoreFactory
func (mmGetPublicKeyStore *KeyStoreFactoryMock) GetPublicKeyStore(skh SignatureKeyHolder) (p1 PublicKeyStore) {
	mm_atomic.AddUint64(&mmGetPublicKeyStore.beforeGetPublicKeyStoreCounter, 1)
	defer mm_atomic.AddUint64(&mmGetPublicKeyStore.afterGetPublicKeyStoreCounter, 1)

	if mmGetPublicKeyStore.inspectFuncGetPublicKeyStore != nil {
		mmGetPublicKeyStore.inspectFuncGetPublicKeyStore(skh)
	}

	params := &KeyStoreFactoryMockGetPublicKeyStoreParams{skh}

	// Record call args
	mmGetPublicKeyStore.GetPublicKeyStoreMock.mutex.Lock()
	mmGetPublicKeyStore.GetPublicKeyStoreMock.callArgs = append(mmGetPublicKeyStore.GetPublicKeyStoreMock.callArgs, params)
	mmGetPublicKeyStore.GetPublicKeyStoreMock.mutex.Unlock()

	for _, e := range mmGetPublicKeyStore.GetPublicKeyStoreMock.expectations {
		if minimock.Equal(e.params, params) {
			mm_atomic.AddUint64(&e.Counter, 1)
			return e.results.p1
		}
	}

	if mmGetPublicKeyStore.GetPublicKeyStoreMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&mmGetPublicKeyStore.GetPublicKeyStoreMock.defaultExpectation.Counter, 1)
		want := mmGetPublicKeyStore.GetPublicKeyStoreMock.defaultExpectation.params
		got := KeyStoreFactoryMockGetPublicKeyStoreParams{skh}
		if want != nil && !minimock.Equal(*want, got) {
			mmGetPublicKeyStore.t.Errorf("KeyStoreFactoryMock.GetPublicKeyStore got unexpected parameters, want: %#v, got: %#v%s\n", *want, got, minimock.Diff(*want, got))
		}

		results := mmGetPublicKeyStore.GetPublicKeyStoreMock.defaultExpectation.results
		if results == nil {
			mmGetPublicKeyStore.t.Fatal("No results are set for the KeyStoreFactoryMock.GetPublicKeyStore")
		}
		return (*results).p1
	}
	if mmGetPublicKeyStore.funcGetPublicKeyStore != nil {
		return mmGetPublicKeyStore.funcGetPublicKeyStore(skh)
	}
	mmGetPublicKeyStore.t.Fatalf("Unexpected call to KeyStoreFactoryMock.GetPublicKeyStore. %v", skh)
	return
}

// GetPublicKeyStoreAfterCounter returns a count of finished KeyStoreFactoryMock.GetPublicKeyStore invocations
func (mmGetPublicKeyStore *KeyStoreFactoryMock) GetPublicKeyStoreAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&mmGetPublicKeyStore.afterGetPublicKeyStoreCounter)
}

// GetPublicKeyStoreBeforeCounter returns a count of KeyStoreFactoryMock.GetPublicKeyStore invocations
func (mmGetPublicKeyStore *KeyStoreFactoryMock) GetPublicKeyStoreBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&mmGetPublicKeyStore.beforeGetPublicKeyStoreCounter)
}

// Calls returns a list of arguments used in each call to KeyStoreFactoryMock.GetPublicKeyStore.
// The list is in the same order as the calls were made (i.e. recent calls have a higher index)
func (mmGetPublicKeyStore *mKeyStoreFactoryMockGetPublicKeyStore) Calls() []*KeyStoreFactoryMockGetPublicKeyStoreParams {
	mmGetPublicKeyStore.mutex.RLock()

	argCopy := make([]*KeyStoreFactoryMockGetPublicKeyStoreParams, len(mmGetPublicKeyStore.callArgs))
	copy(argCopy, mmGetPublicKeyStore.callArgs)

	mmGetPublicKeyStore.mutex.RUnlock()

	return argCopy
}

// MinimockGetPublicKeyStoreDone returns true if the count of the GetPublicKeyStore invocations corresponds
// the number of defined expectations
func (m *KeyStoreFactoryMock) MinimockGetPublicKeyStoreDone() bool {
	for _, e := range m.GetPublicKeyStoreMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.GetPublicKeyStoreMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterGetPublicKeyStoreCounter) < 1 {
		return false
	}
	// if func was set then invocations count should be greater than zero
	if m.funcGetPublicKeyStore != nil && mm_atomic.LoadUint64(&m.afterGetPublicKeyStoreCounter) < 1 {
		return false
	}
	return true
}

// MinimockGetPublicKeyStoreInspect logs each unmet expectation
func (m *KeyStoreFactoryMock) MinimockGetPublicKeyStoreInspect() {
	for _, e := range m.GetPublicKeyStoreMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Errorf("Expected call to KeyStoreFactoryMock.GetPublicKeyStore with params: %#v", *e.params)
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.GetPublicKeyStoreMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterGetPublicKeyStoreCounter) < 1 {
		if m.GetPublicKeyStoreMock.defaultExpectation.params == nil {
			m.t.Error("Expected call to KeyStoreFactoryMock.GetPublicKeyStore")
		} else {
			m.t.Errorf("Expected call to KeyStoreFactoryMock.GetPublicKeyStore with params: %#v", *m.GetPublicKeyStoreMock.defaultExpectation.params)
		}
	}
	// if func was set then invocations count should be greater than zero
	if m.funcGetPublicKeyStore != nil && mm_atomic.LoadUint64(&m.afterGetPublicKeyStoreCounter) < 1 {
		m.t.Error("Expected call to KeyStoreFactoryMock.GetPublicKeyStore")
	}
}

// MinimockFinish checks that all mocked methods have been called the expected number of times
func (m *KeyStoreFactoryMock) MinimockFinish() {
	if !m.minimockDone() {
		m.MinimockGetPublicKeyStoreInspect()
		m.t.FailNow()
	}
}

// MinimockWait waits for all mocked methods to be called the expected number of times
func (m *KeyStoreFactoryMock) MinimockWait(timeout mm_time.Duration) {
	timeoutCh := mm_time.After(timeout)
	for {
		if m.minimockDone() {
			return
		}
		select {
		case <-timeoutCh:
			m.MinimockFinish()
			return
		case <-mm_time.After(10 * mm_time.Millisecond):
		}
	}
}

func (m *KeyStoreFactoryMock) minimockDone() bool {
	done := true
	return done &&
		m.MinimockGetPublicKeyStoreDone()
}
