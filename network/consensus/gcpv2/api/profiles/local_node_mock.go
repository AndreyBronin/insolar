package profiles

// Code generated by http://github.com/gojuno/minimock (dev). DO NOT EDIT.

import (
	mm_atomic "sync/atomic"
	mm_time "time"

	"github.com/gojuno/minimock"
	"github.com/insolar/insolar/insolar"
	"github.com/insolar/insolar/network/consensus/common/cryptkit"
	"github.com/insolar/insolar/network/consensus/gcpv2/api/member"
)

// LocalNodeMock implements LocalNode
type LocalNodeMock struct {
	t minimock.Tester

	funcGetDeclaredPower          func() (p1 member.Power)
	inspectFuncGetDeclaredPower   func()
	afterGetDeclaredPowerCounter  uint64
	beforeGetDeclaredPowerCounter uint64
	GetDeclaredPowerMock          mLocalNodeMockGetDeclaredPower

	funcGetIndex          func() (i1 member.Index)
	inspectFuncGetIndex   func()
	afterGetIndexCounter  uint64
	beforeGetIndexCounter uint64
	GetIndexMock          mLocalNodeMockGetIndex

	funcGetNodeID          func() (s1 insolar.ShortNodeID)
	inspectFuncGetNodeID   func()
	afterGetNodeIDCounter  uint64
	beforeGetNodeIDCounter uint64
	GetNodeIDMock          mLocalNodeMockGetNodeID

	funcGetOpMode          func() (o1 member.OpMode)
	inspectFuncGetOpMode   func()
	afterGetOpModeCounter  uint64
	beforeGetOpModeCounter uint64
	GetOpModeMock          mLocalNodeMockGetOpMode

	funcGetSignatureVerifier          func() (s1 cryptkit.SignatureVerifier)
	inspectFuncGetSignatureVerifier   func()
	afterGetSignatureVerifierCounter  uint64
	beforeGetSignatureVerifierCounter uint64
	GetSignatureVerifierMock          mLocalNodeMockGetSignatureVerifier

	funcGetStatic          func() (s1 StaticProfile)
	inspectFuncGetStatic   func()
	afterGetStaticCounter  uint64
	beforeGetStaticCounter uint64
	GetStaticMock          mLocalNodeMockGetStatic

	funcIsJoiner          func() (b1 bool)
	inspectFuncIsJoiner   func()
	afterIsJoinerCounter  uint64
	beforeIsJoinerCounter uint64
	IsJoinerMock          mLocalNodeMockIsJoiner

	funcLocalNodeProfile          func()
	inspectFuncLocalNodeProfile   func()
	afterLocalNodeProfileCounter  uint64
	beforeLocalNodeProfileCounter uint64
	LocalNodeProfileMock          mLocalNodeMockLocalNodeProfile
}

// NewLocalNodeMock returns a mock for LocalNode
func NewLocalNodeMock(t minimock.Tester) *LocalNodeMock {
	m := &LocalNodeMock{t: t}
	if controller, ok := t.(minimock.MockController); ok {
		controller.RegisterMocker(m)
	}

	m.GetDeclaredPowerMock = mLocalNodeMockGetDeclaredPower{mock: m}

	m.GetIndexMock = mLocalNodeMockGetIndex{mock: m}

	m.GetNodeIDMock = mLocalNodeMockGetNodeID{mock: m}

	m.GetOpModeMock = mLocalNodeMockGetOpMode{mock: m}

	m.GetSignatureVerifierMock = mLocalNodeMockGetSignatureVerifier{mock: m}

	m.GetStaticMock = mLocalNodeMockGetStatic{mock: m}

	m.IsJoinerMock = mLocalNodeMockIsJoiner{mock: m}

	m.LocalNodeProfileMock = mLocalNodeMockLocalNodeProfile{mock: m}

	return m
}

type mLocalNodeMockGetDeclaredPower struct {
	mock               *LocalNodeMock
	defaultExpectation *LocalNodeMockGetDeclaredPowerExpectation
	expectations       []*LocalNodeMockGetDeclaredPowerExpectation
}

// LocalNodeMockGetDeclaredPowerExpectation specifies expectation struct of the LocalNode.GetDeclaredPower
type LocalNodeMockGetDeclaredPowerExpectation struct {
	mock *LocalNodeMock

	results *LocalNodeMockGetDeclaredPowerResults
	Counter uint64
}

// LocalNodeMockGetDeclaredPowerResults contains results of the LocalNode.GetDeclaredPower
type LocalNodeMockGetDeclaredPowerResults struct {
	p1 member.Power
}

// Expect sets up expected params for LocalNode.GetDeclaredPower
func (mmGetDeclaredPower *mLocalNodeMockGetDeclaredPower) Expect() *mLocalNodeMockGetDeclaredPower {
	if mmGetDeclaredPower.mock.funcGetDeclaredPower != nil {
		mmGetDeclaredPower.mock.t.Fatalf("LocalNodeMock.GetDeclaredPower mock is already set by Set")
	}

	if mmGetDeclaredPower.defaultExpectation == nil {
		mmGetDeclaredPower.defaultExpectation = &LocalNodeMockGetDeclaredPowerExpectation{}
	}

	return mmGetDeclaredPower
}

// Inspect accepts an inspector function that has same arguments as the LocalNode.GetDeclaredPower
func (mmGetDeclaredPower *mLocalNodeMockGetDeclaredPower) Inspect(f func()) *mLocalNodeMockGetDeclaredPower {
	if mmGetDeclaredPower.mock.inspectFuncGetDeclaredPower != nil {
		mmGetDeclaredPower.mock.t.Fatalf("Inspect function is already set for LocalNodeMock.GetDeclaredPower")
	}

	mmGetDeclaredPower.mock.inspectFuncGetDeclaredPower = f

	return mmGetDeclaredPower
}

// Return sets up results that will be returned by LocalNode.GetDeclaredPower
func (mmGetDeclaredPower *mLocalNodeMockGetDeclaredPower) Return(p1 member.Power) *LocalNodeMock {
	if mmGetDeclaredPower.mock.funcGetDeclaredPower != nil {
		mmGetDeclaredPower.mock.t.Fatalf("LocalNodeMock.GetDeclaredPower mock is already set by Set")
	}

	if mmGetDeclaredPower.defaultExpectation == nil {
		mmGetDeclaredPower.defaultExpectation = &LocalNodeMockGetDeclaredPowerExpectation{mock: mmGetDeclaredPower.mock}
	}
	mmGetDeclaredPower.defaultExpectation.results = &LocalNodeMockGetDeclaredPowerResults{p1}
	return mmGetDeclaredPower.mock
}

//Set uses given function f to mock the LocalNode.GetDeclaredPower method
func (mmGetDeclaredPower *mLocalNodeMockGetDeclaredPower) Set(f func() (p1 member.Power)) *LocalNodeMock {
	if mmGetDeclaredPower.defaultExpectation != nil {
		mmGetDeclaredPower.mock.t.Fatalf("Default expectation is already set for the LocalNode.GetDeclaredPower method")
	}

	if len(mmGetDeclaredPower.expectations) > 0 {
		mmGetDeclaredPower.mock.t.Fatalf("Some expectations are already set for the LocalNode.GetDeclaredPower method")
	}

	mmGetDeclaredPower.mock.funcGetDeclaredPower = f
	return mmGetDeclaredPower.mock
}

// GetDeclaredPower implements LocalNode
func (mmGetDeclaredPower *LocalNodeMock) GetDeclaredPower() (p1 member.Power) {
	mm_atomic.AddUint64(&mmGetDeclaredPower.beforeGetDeclaredPowerCounter, 1)
	defer mm_atomic.AddUint64(&mmGetDeclaredPower.afterGetDeclaredPowerCounter, 1)

	if mmGetDeclaredPower.inspectFuncGetDeclaredPower != nil {
		mmGetDeclaredPower.inspectFuncGetDeclaredPower()
	}

	if mmGetDeclaredPower.GetDeclaredPowerMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&mmGetDeclaredPower.GetDeclaredPowerMock.defaultExpectation.Counter, 1)

		results := mmGetDeclaredPower.GetDeclaredPowerMock.defaultExpectation.results
		if results == nil {
			mmGetDeclaredPower.t.Fatal("No results are set for the LocalNodeMock.GetDeclaredPower")
		}
		return (*results).p1
	}
	if mmGetDeclaredPower.funcGetDeclaredPower != nil {
		return mmGetDeclaredPower.funcGetDeclaredPower()
	}
	mmGetDeclaredPower.t.Fatalf("Unexpected call to LocalNodeMock.GetDeclaredPower.")
	return
}

// GetDeclaredPowerAfterCounter returns a count of finished LocalNodeMock.GetDeclaredPower invocations
func (mmGetDeclaredPower *LocalNodeMock) GetDeclaredPowerAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&mmGetDeclaredPower.afterGetDeclaredPowerCounter)
}

// GetDeclaredPowerBeforeCounter returns a count of LocalNodeMock.GetDeclaredPower invocations
func (mmGetDeclaredPower *LocalNodeMock) GetDeclaredPowerBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&mmGetDeclaredPower.beforeGetDeclaredPowerCounter)
}

// MinimockGetDeclaredPowerDone returns true if the count of the GetDeclaredPower invocations corresponds
// the number of defined expectations
func (m *LocalNodeMock) MinimockGetDeclaredPowerDone() bool {
	for _, e := range m.GetDeclaredPowerMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.GetDeclaredPowerMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterGetDeclaredPowerCounter) < 1 {
		return false
	}
	// if func was set then invocations count should be greater than zero
	if m.funcGetDeclaredPower != nil && mm_atomic.LoadUint64(&m.afterGetDeclaredPowerCounter) < 1 {
		return false
	}
	return true
}

// MinimockGetDeclaredPowerInspect logs each unmet expectation
func (m *LocalNodeMock) MinimockGetDeclaredPowerInspect() {
	for _, e := range m.GetDeclaredPowerMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Error("Expected call to LocalNodeMock.GetDeclaredPower")
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.GetDeclaredPowerMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterGetDeclaredPowerCounter) < 1 {
		m.t.Error("Expected call to LocalNodeMock.GetDeclaredPower")
	}
	// if func was set then invocations count should be greater than zero
	if m.funcGetDeclaredPower != nil && mm_atomic.LoadUint64(&m.afterGetDeclaredPowerCounter) < 1 {
		m.t.Error("Expected call to LocalNodeMock.GetDeclaredPower")
	}
}

type mLocalNodeMockGetIndex struct {
	mock               *LocalNodeMock
	defaultExpectation *LocalNodeMockGetIndexExpectation
	expectations       []*LocalNodeMockGetIndexExpectation
}

// LocalNodeMockGetIndexExpectation specifies expectation struct of the LocalNode.GetIndex
type LocalNodeMockGetIndexExpectation struct {
	mock *LocalNodeMock

	results *LocalNodeMockGetIndexResults
	Counter uint64
}

// LocalNodeMockGetIndexResults contains results of the LocalNode.GetIndex
type LocalNodeMockGetIndexResults struct {
	i1 member.Index
}

// Expect sets up expected params for LocalNode.GetIndex
func (mmGetIndex *mLocalNodeMockGetIndex) Expect() *mLocalNodeMockGetIndex {
	if mmGetIndex.mock.funcGetIndex != nil {
		mmGetIndex.mock.t.Fatalf("LocalNodeMock.GetIndex mock is already set by Set")
	}

	if mmGetIndex.defaultExpectation == nil {
		mmGetIndex.defaultExpectation = &LocalNodeMockGetIndexExpectation{}
	}

	return mmGetIndex
}

// Inspect accepts an inspector function that has same arguments as the LocalNode.GetIndex
func (mmGetIndex *mLocalNodeMockGetIndex) Inspect(f func()) *mLocalNodeMockGetIndex {
	if mmGetIndex.mock.inspectFuncGetIndex != nil {
		mmGetIndex.mock.t.Fatalf("Inspect function is already set for LocalNodeMock.GetIndex")
	}

	mmGetIndex.mock.inspectFuncGetIndex = f

	return mmGetIndex
}

// Return sets up results that will be returned by LocalNode.GetIndex
func (mmGetIndex *mLocalNodeMockGetIndex) Return(i1 member.Index) *LocalNodeMock {
	if mmGetIndex.mock.funcGetIndex != nil {
		mmGetIndex.mock.t.Fatalf("LocalNodeMock.GetIndex mock is already set by Set")
	}

	if mmGetIndex.defaultExpectation == nil {
		mmGetIndex.defaultExpectation = &LocalNodeMockGetIndexExpectation{mock: mmGetIndex.mock}
	}
	mmGetIndex.defaultExpectation.results = &LocalNodeMockGetIndexResults{i1}
	return mmGetIndex.mock
}

//Set uses given function f to mock the LocalNode.GetIndex method
func (mmGetIndex *mLocalNodeMockGetIndex) Set(f func() (i1 member.Index)) *LocalNodeMock {
	if mmGetIndex.defaultExpectation != nil {
		mmGetIndex.mock.t.Fatalf("Default expectation is already set for the LocalNode.GetIndex method")
	}

	if len(mmGetIndex.expectations) > 0 {
		mmGetIndex.mock.t.Fatalf("Some expectations are already set for the LocalNode.GetIndex method")
	}

	mmGetIndex.mock.funcGetIndex = f
	return mmGetIndex.mock
}

// GetIndex implements LocalNode
func (mmGetIndex *LocalNodeMock) GetIndex() (i1 member.Index) {
	mm_atomic.AddUint64(&mmGetIndex.beforeGetIndexCounter, 1)
	defer mm_atomic.AddUint64(&mmGetIndex.afterGetIndexCounter, 1)

	if mmGetIndex.inspectFuncGetIndex != nil {
		mmGetIndex.inspectFuncGetIndex()
	}

	if mmGetIndex.GetIndexMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&mmGetIndex.GetIndexMock.defaultExpectation.Counter, 1)

		results := mmGetIndex.GetIndexMock.defaultExpectation.results
		if results == nil {
			mmGetIndex.t.Fatal("No results are set for the LocalNodeMock.GetIndex")
		}
		return (*results).i1
	}
	if mmGetIndex.funcGetIndex != nil {
		return mmGetIndex.funcGetIndex()
	}
	mmGetIndex.t.Fatalf("Unexpected call to LocalNodeMock.GetIndex.")
	return
}

// GetIndexAfterCounter returns a count of finished LocalNodeMock.GetIndex invocations
func (mmGetIndex *LocalNodeMock) GetIndexAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&mmGetIndex.afterGetIndexCounter)
}

// GetIndexBeforeCounter returns a count of LocalNodeMock.GetIndex invocations
func (mmGetIndex *LocalNodeMock) GetIndexBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&mmGetIndex.beforeGetIndexCounter)
}

// MinimockGetIndexDone returns true if the count of the GetIndex invocations corresponds
// the number of defined expectations
func (m *LocalNodeMock) MinimockGetIndexDone() bool {
	for _, e := range m.GetIndexMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.GetIndexMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterGetIndexCounter) < 1 {
		return false
	}
	// if func was set then invocations count should be greater than zero
	if m.funcGetIndex != nil && mm_atomic.LoadUint64(&m.afterGetIndexCounter) < 1 {
		return false
	}
	return true
}

// MinimockGetIndexInspect logs each unmet expectation
func (m *LocalNodeMock) MinimockGetIndexInspect() {
	for _, e := range m.GetIndexMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Error("Expected call to LocalNodeMock.GetIndex")
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.GetIndexMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterGetIndexCounter) < 1 {
		m.t.Error("Expected call to LocalNodeMock.GetIndex")
	}
	// if func was set then invocations count should be greater than zero
	if m.funcGetIndex != nil && mm_atomic.LoadUint64(&m.afterGetIndexCounter) < 1 {
		m.t.Error("Expected call to LocalNodeMock.GetIndex")
	}
}

type mLocalNodeMockGetNodeID struct {
	mock               *LocalNodeMock
	defaultExpectation *LocalNodeMockGetNodeIDExpectation
	expectations       []*LocalNodeMockGetNodeIDExpectation
}

// LocalNodeMockGetNodeIDExpectation specifies expectation struct of the LocalNode.GetNodeID
type LocalNodeMockGetNodeIDExpectation struct {
	mock *LocalNodeMock

	results *LocalNodeMockGetNodeIDResults
	Counter uint64
}

// LocalNodeMockGetNodeIDResults contains results of the LocalNode.GetNodeID
type LocalNodeMockGetNodeIDResults struct {
	s1 insolar.ShortNodeID
}

// Expect sets up expected params for LocalNode.GetNodeID
func (mmGetNodeID *mLocalNodeMockGetNodeID) Expect() *mLocalNodeMockGetNodeID {
	if mmGetNodeID.mock.funcGetNodeID != nil {
		mmGetNodeID.mock.t.Fatalf("LocalNodeMock.GetNodeID mock is already set by Set")
	}

	if mmGetNodeID.defaultExpectation == nil {
		mmGetNodeID.defaultExpectation = &LocalNodeMockGetNodeIDExpectation{}
	}

	return mmGetNodeID
}

// Inspect accepts an inspector function that has same arguments as the LocalNode.GetNodeID
func (mmGetNodeID *mLocalNodeMockGetNodeID) Inspect(f func()) *mLocalNodeMockGetNodeID {
	if mmGetNodeID.mock.inspectFuncGetNodeID != nil {
		mmGetNodeID.mock.t.Fatalf("Inspect function is already set for LocalNodeMock.GetNodeID")
	}

	mmGetNodeID.mock.inspectFuncGetNodeID = f

	return mmGetNodeID
}

// Return sets up results that will be returned by LocalNode.GetNodeID
func (mmGetNodeID *mLocalNodeMockGetNodeID) Return(s1 insolar.ShortNodeID) *LocalNodeMock {
	if mmGetNodeID.mock.funcGetNodeID != nil {
		mmGetNodeID.mock.t.Fatalf("LocalNodeMock.GetNodeID mock is already set by Set")
	}

	if mmGetNodeID.defaultExpectation == nil {
		mmGetNodeID.defaultExpectation = &LocalNodeMockGetNodeIDExpectation{mock: mmGetNodeID.mock}
	}
	mmGetNodeID.defaultExpectation.results = &LocalNodeMockGetNodeIDResults{s1}
	return mmGetNodeID.mock
}

//Set uses given function f to mock the LocalNode.GetNodeID method
func (mmGetNodeID *mLocalNodeMockGetNodeID) Set(f func() (s1 insolar.ShortNodeID)) *LocalNodeMock {
	if mmGetNodeID.defaultExpectation != nil {
		mmGetNodeID.mock.t.Fatalf("Default expectation is already set for the LocalNode.GetNodeID method")
	}

	if len(mmGetNodeID.expectations) > 0 {
		mmGetNodeID.mock.t.Fatalf("Some expectations are already set for the LocalNode.GetNodeID method")
	}

	mmGetNodeID.mock.funcGetNodeID = f
	return mmGetNodeID.mock
}

// GetNodeID implements LocalNode
func (mmGetNodeID *LocalNodeMock) GetNodeID() (s1 insolar.ShortNodeID) {
	mm_atomic.AddUint64(&mmGetNodeID.beforeGetNodeIDCounter, 1)
	defer mm_atomic.AddUint64(&mmGetNodeID.afterGetNodeIDCounter, 1)

	if mmGetNodeID.inspectFuncGetNodeID != nil {
		mmGetNodeID.inspectFuncGetNodeID()
	}

	if mmGetNodeID.GetNodeIDMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&mmGetNodeID.GetNodeIDMock.defaultExpectation.Counter, 1)

		results := mmGetNodeID.GetNodeIDMock.defaultExpectation.results
		if results == nil {
			mmGetNodeID.t.Fatal("No results are set for the LocalNodeMock.GetNodeID")
		}
		return (*results).s1
	}
	if mmGetNodeID.funcGetNodeID != nil {
		return mmGetNodeID.funcGetNodeID()
	}
	mmGetNodeID.t.Fatalf("Unexpected call to LocalNodeMock.GetNodeID.")
	return
}

// GetNodeIDAfterCounter returns a count of finished LocalNodeMock.GetNodeID invocations
func (mmGetNodeID *LocalNodeMock) GetNodeIDAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&mmGetNodeID.afterGetNodeIDCounter)
}

// GetNodeIDBeforeCounter returns a count of LocalNodeMock.GetNodeID invocations
func (mmGetNodeID *LocalNodeMock) GetNodeIDBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&mmGetNodeID.beforeGetNodeIDCounter)
}

// MinimockGetNodeIDDone returns true if the count of the GetNodeID invocations corresponds
// the number of defined expectations
func (m *LocalNodeMock) MinimockGetNodeIDDone() bool {
	for _, e := range m.GetNodeIDMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.GetNodeIDMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterGetNodeIDCounter) < 1 {
		return false
	}
	// if func was set then invocations count should be greater than zero
	if m.funcGetNodeID != nil && mm_atomic.LoadUint64(&m.afterGetNodeIDCounter) < 1 {
		return false
	}
	return true
}

// MinimockGetNodeIDInspect logs each unmet expectation
func (m *LocalNodeMock) MinimockGetNodeIDInspect() {
	for _, e := range m.GetNodeIDMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Error("Expected call to LocalNodeMock.GetNodeID")
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.GetNodeIDMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterGetNodeIDCounter) < 1 {
		m.t.Error("Expected call to LocalNodeMock.GetNodeID")
	}
	// if func was set then invocations count should be greater than zero
	if m.funcGetNodeID != nil && mm_atomic.LoadUint64(&m.afterGetNodeIDCounter) < 1 {
		m.t.Error("Expected call to LocalNodeMock.GetNodeID")
	}
}

type mLocalNodeMockGetOpMode struct {
	mock               *LocalNodeMock
	defaultExpectation *LocalNodeMockGetOpModeExpectation
	expectations       []*LocalNodeMockGetOpModeExpectation
}

// LocalNodeMockGetOpModeExpectation specifies expectation struct of the LocalNode.GetOpMode
type LocalNodeMockGetOpModeExpectation struct {
	mock *LocalNodeMock

	results *LocalNodeMockGetOpModeResults
	Counter uint64
}

// LocalNodeMockGetOpModeResults contains results of the LocalNode.GetOpMode
type LocalNodeMockGetOpModeResults struct {
	o1 member.OpMode
}

// Expect sets up expected params for LocalNode.GetOpMode
func (mmGetOpMode *mLocalNodeMockGetOpMode) Expect() *mLocalNodeMockGetOpMode {
	if mmGetOpMode.mock.funcGetOpMode != nil {
		mmGetOpMode.mock.t.Fatalf("LocalNodeMock.GetOpMode mock is already set by Set")
	}

	if mmGetOpMode.defaultExpectation == nil {
		mmGetOpMode.defaultExpectation = &LocalNodeMockGetOpModeExpectation{}
	}

	return mmGetOpMode
}

// Inspect accepts an inspector function that has same arguments as the LocalNode.GetOpMode
func (mmGetOpMode *mLocalNodeMockGetOpMode) Inspect(f func()) *mLocalNodeMockGetOpMode {
	if mmGetOpMode.mock.inspectFuncGetOpMode != nil {
		mmGetOpMode.mock.t.Fatalf("Inspect function is already set for LocalNodeMock.GetOpMode")
	}

	mmGetOpMode.mock.inspectFuncGetOpMode = f

	return mmGetOpMode
}

// Return sets up results that will be returned by LocalNode.GetOpMode
func (mmGetOpMode *mLocalNodeMockGetOpMode) Return(o1 member.OpMode) *LocalNodeMock {
	if mmGetOpMode.mock.funcGetOpMode != nil {
		mmGetOpMode.mock.t.Fatalf("LocalNodeMock.GetOpMode mock is already set by Set")
	}

	if mmGetOpMode.defaultExpectation == nil {
		mmGetOpMode.defaultExpectation = &LocalNodeMockGetOpModeExpectation{mock: mmGetOpMode.mock}
	}
	mmGetOpMode.defaultExpectation.results = &LocalNodeMockGetOpModeResults{o1}
	return mmGetOpMode.mock
}

//Set uses given function f to mock the LocalNode.GetOpMode method
func (mmGetOpMode *mLocalNodeMockGetOpMode) Set(f func() (o1 member.OpMode)) *LocalNodeMock {
	if mmGetOpMode.defaultExpectation != nil {
		mmGetOpMode.mock.t.Fatalf("Default expectation is already set for the LocalNode.GetOpMode method")
	}

	if len(mmGetOpMode.expectations) > 0 {
		mmGetOpMode.mock.t.Fatalf("Some expectations are already set for the LocalNode.GetOpMode method")
	}

	mmGetOpMode.mock.funcGetOpMode = f
	return mmGetOpMode.mock
}

// GetOpMode implements LocalNode
func (mmGetOpMode *LocalNodeMock) GetOpMode() (o1 member.OpMode) {
	mm_atomic.AddUint64(&mmGetOpMode.beforeGetOpModeCounter, 1)
	defer mm_atomic.AddUint64(&mmGetOpMode.afterGetOpModeCounter, 1)

	if mmGetOpMode.inspectFuncGetOpMode != nil {
		mmGetOpMode.inspectFuncGetOpMode()
	}

	if mmGetOpMode.GetOpModeMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&mmGetOpMode.GetOpModeMock.defaultExpectation.Counter, 1)

		results := mmGetOpMode.GetOpModeMock.defaultExpectation.results
		if results == nil {
			mmGetOpMode.t.Fatal("No results are set for the LocalNodeMock.GetOpMode")
		}
		return (*results).o1
	}
	if mmGetOpMode.funcGetOpMode != nil {
		return mmGetOpMode.funcGetOpMode()
	}
	mmGetOpMode.t.Fatalf("Unexpected call to LocalNodeMock.GetOpMode.")
	return
}

// GetOpModeAfterCounter returns a count of finished LocalNodeMock.GetOpMode invocations
func (mmGetOpMode *LocalNodeMock) GetOpModeAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&mmGetOpMode.afterGetOpModeCounter)
}

// GetOpModeBeforeCounter returns a count of LocalNodeMock.GetOpMode invocations
func (mmGetOpMode *LocalNodeMock) GetOpModeBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&mmGetOpMode.beforeGetOpModeCounter)
}

// MinimockGetOpModeDone returns true if the count of the GetOpMode invocations corresponds
// the number of defined expectations
func (m *LocalNodeMock) MinimockGetOpModeDone() bool {
	for _, e := range m.GetOpModeMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.GetOpModeMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterGetOpModeCounter) < 1 {
		return false
	}
	// if func was set then invocations count should be greater than zero
	if m.funcGetOpMode != nil && mm_atomic.LoadUint64(&m.afterGetOpModeCounter) < 1 {
		return false
	}
	return true
}

// MinimockGetOpModeInspect logs each unmet expectation
func (m *LocalNodeMock) MinimockGetOpModeInspect() {
	for _, e := range m.GetOpModeMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Error("Expected call to LocalNodeMock.GetOpMode")
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.GetOpModeMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterGetOpModeCounter) < 1 {
		m.t.Error("Expected call to LocalNodeMock.GetOpMode")
	}
	// if func was set then invocations count should be greater than zero
	if m.funcGetOpMode != nil && mm_atomic.LoadUint64(&m.afterGetOpModeCounter) < 1 {
		m.t.Error("Expected call to LocalNodeMock.GetOpMode")
	}
}

type mLocalNodeMockGetSignatureVerifier struct {
	mock               *LocalNodeMock
	defaultExpectation *LocalNodeMockGetSignatureVerifierExpectation
	expectations       []*LocalNodeMockGetSignatureVerifierExpectation
}

// LocalNodeMockGetSignatureVerifierExpectation specifies expectation struct of the LocalNode.GetSignatureVerifier
type LocalNodeMockGetSignatureVerifierExpectation struct {
	mock *LocalNodeMock

	results *LocalNodeMockGetSignatureVerifierResults
	Counter uint64
}

// LocalNodeMockGetSignatureVerifierResults contains results of the LocalNode.GetSignatureVerifier
type LocalNodeMockGetSignatureVerifierResults struct {
	s1 cryptkit.SignatureVerifier
}

// Expect sets up expected params for LocalNode.GetSignatureVerifier
func (mmGetSignatureVerifier *mLocalNodeMockGetSignatureVerifier) Expect() *mLocalNodeMockGetSignatureVerifier {
	if mmGetSignatureVerifier.mock.funcGetSignatureVerifier != nil {
		mmGetSignatureVerifier.mock.t.Fatalf("LocalNodeMock.GetSignatureVerifier mock is already set by Set")
	}

	if mmGetSignatureVerifier.defaultExpectation == nil {
		mmGetSignatureVerifier.defaultExpectation = &LocalNodeMockGetSignatureVerifierExpectation{}
	}

	return mmGetSignatureVerifier
}

// Inspect accepts an inspector function that has same arguments as the LocalNode.GetSignatureVerifier
func (mmGetSignatureVerifier *mLocalNodeMockGetSignatureVerifier) Inspect(f func()) *mLocalNodeMockGetSignatureVerifier {
	if mmGetSignatureVerifier.mock.inspectFuncGetSignatureVerifier != nil {
		mmGetSignatureVerifier.mock.t.Fatalf("Inspect function is already set for LocalNodeMock.GetSignatureVerifier")
	}

	mmGetSignatureVerifier.mock.inspectFuncGetSignatureVerifier = f

	return mmGetSignatureVerifier
}

// Return sets up results that will be returned by LocalNode.GetSignatureVerifier
func (mmGetSignatureVerifier *mLocalNodeMockGetSignatureVerifier) Return(s1 cryptkit.SignatureVerifier) *LocalNodeMock {
	if mmGetSignatureVerifier.mock.funcGetSignatureVerifier != nil {
		mmGetSignatureVerifier.mock.t.Fatalf("LocalNodeMock.GetSignatureVerifier mock is already set by Set")
	}

	if mmGetSignatureVerifier.defaultExpectation == nil {
		mmGetSignatureVerifier.defaultExpectation = &LocalNodeMockGetSignatureVerifierExpectation{mock: mmGetSignatureVerifier.mock}
	}
	mmGetSignatureVerifier.defaultExpectation.results = &LocalNodeMockGetSignatureVerifierResults{s1}
	return mmGetSignatureVerifier.mock
}

//Set uses given function f to mock the LocalNode.GetSignatureVerifier method
func (mmGetSignatureVerifier *mLocalNodeMockGetSignatureVerifier) Set(f func() (s1 cryptkit.SignatureVerifier)) *LocalNodeMock {
	if mmGetSignatureVerifier.defaultExpectation != nil {
		mmGetSignatureVerifier.mock.t.Fatalf("Default expectation is already set for the LocalNode.GetSignatureVerifier method")
	}

	if len(mmGetSignatureVerifier.expectations) > 0 {
		mmGetSignatureVerifier.mock.t.Fatalf("Some expectations are already set for the LocalNode.GetSignatureVerifier method")
	}

	mmGetSignatureVerifier.mock.funcGetSignatureVerifier = f
	return mmGetSignatureVerifier.mock
}

// GetSignatureVerifier implements LocalNode
func (mmGetSignatureVerifier *LocalNodeMock) GetSignatureVerifier() (s1 cryptkit.SignatureVerifier) {
	mm_atomic.AddUint64(&mmGetSignatureVerifier.beforeGetSignatureVerifierCounter, 1)
	defer mm_atomic.AddUint64(&mmGetSignatureVerifier.afterGetSignatureVerifierCounter, 1)

	if mmGetSignatureVerifier.inspectFuncGetSignatureVerifier != nil {
		mmGetSignatureVerifier.inspectFuncGetSignatureVerifier()
	}

	if mmGetSignatureVerifier.GetSignatureVerifierMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&mmGetSignatureVerifier.GetSignatureVerifierMock.defaultExpectation.Counter, 1)

		results := mmGetSignatureVerifier.GetSignatureVerifierMock.defaultExpectation.results
		if results == nil {
			mmGetSignatureVerifier.t.Fatal("No results are set for the LocalNodeMock.GetSignatureVerifier")
		}
		return (*results).s1
	}
	if mmGetSignatureVerifier.funcGetSignatureVerifier != nil {
		return mmGetSignatureVerifier.funcGetSignatureVerifier()
	}
	mmGetSignatureVerifier.t.Fatalf("Unexpected call to LocalNodeMock.GetSignatureVerifier.")
	return
}

// GetSignatureVerifierAfterCounter returns a count of finished LocalNodeMock.GetSignatureVerifier invocations
func (mmGetSignatureVerifier *LocalNodeMock) GetSignatureVerifierAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&mmGetSignatureVerifier.afterGetSignatureVerifierCounter)
}

// GetSignatureVerifierBeforeCounter returns a count of LocalNodeMock.GetSignatureVerifier invocations
func (mmGetSignatureVerifier *LocalNodeMock) GetSignatureVerifierBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&mmGetSignatureVerifier.beforeGetSignatureVerifierCounter)
}

// MinimockGetSignatureVerifierDone returns true if the count of the GetSignatureVerifier invocations corresponds
// the number of defined expectations
func (m *LocalNodeMock) MinimockGetSignatureVerifierDone() bool {
	for _, e := range m.GetSignatureVerifierMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.GetSignatureVerifierMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterGetSignatureVerifierCounter) < 1 {
		return false
	}
	// if func was set then invocations count should be greater than zero
	if m.funcGetSignatureVerifier != nil && mm_atomic.LoadUint64(&m.afterGetSignatureVerifierCounter) < 1 {
		return false
	}
	return true
}

// MinimockGetSignatureVerifierInspect logs each unmet expectation
func (m *LocalNodeMock) MinimockGetSignatureVerifierInspect() {
	for _, e := range m.GetSignatureVerifierMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Error("Expected call to LocalNodeMock.GetSignatureVerifier")
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.GetSignatureVerifierMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterGetSignatureVerifierCounter) < 1 {
		m.t.Error("Expected call to LocalNodeMock.GetSignatureVerifier")
	}
	// if func was set then invocations count should be greater than zero
	if m.funcGetSignatureVerifier != nil && mm_atomic.LoadUint64(&m.afterGetSignatureVerifierCounter) < 1 {
		m.t.Error("Expected call to LocalNodeMock.GetSignatureVerifier")
	}
}

type mLocalNodeMockGetStatic struct {
	mock               *LocalNodeMock
	defaultExpectation *LocalNodeMockGetStaticExpectation
	expectations       []*LocalNodeMockGetStaticExpectation
}

// LocalNodeMockGetStaticExpectation specifies expectation struct of the LocalNode.GetStatic
type LocalNodeMockGetStaticExpectation struct {
	mock *LocalNodeMock

	results *LocalNodeMockGetStaticResults
	Counter uint64
}

// LocalNodeMockGetStaticResults contains results of the LocalNode.GetStatic
type LocalNodeMockGetStaticResults struct {
	s1 StaticProfile
}

// Expect sets up expected params for LocalNode.GetStatic
func (mmGetStatic *mLocalNodeMockGetStatic) Expect() *mLocalNodeMockGetStatic {
	if mmGetStatic.mock.funcGetStatic != nil {
		mmGetStatic.mock.t.Fatalf("LocalNodeMock.GetStatic mock is already set by Set")
	}

	if mmGetStatic.defaultExpectation == nil {
		mmGetStatic.defaultExpectation = &LocalNodeMockGetStaticExpectation{}
	}

	return mmGetStatic
}

// Inspect accepts an inspector function that has same arguments as the LocalNode.GetStatic
func (mmGetStatic *mLocalNodeMockGetStatic) Inspect(f func()) *mLocalNodeMockGetStatic {
	if mmGetStatic.mock.inspectFuncGetStatic != nil {
		mmGetStatic.mock.t.Fatalf("Inspect function is already set for LocalNodeMock.GetStatic")
	}

	mmGetStatic.mock.inspectFuncGetStatic = f

	return mmGetStatic
}

// Return sets up results that will be returned by LocalNode.GetStatic
func (mmGetStatic *mLocalNodeMockGetStatic) Return(s1 StaticProfile) *LocalNodeMock {
	if mmGetStatic.mock.funcGetStatic != nil {
		mmGetStatic.mock.t.Fatalf("LocalNodeMock.GetStatic mock is already set by Set")
	}

	if mmGetStatic.defaultExpectation == nil {
		mmGetStatic.defaultExpectation = &LocalNodeMockGetStaticExpectation{mock: mmGetStatic.mock}
	}
	mmGetStatic.defaultExpectation.results = &LocalNodeMockGetStaticResults{s1}
	return mmGetStatic.mock
}

//Set uses given function f to mock the LocalNode.GetStatic method
func (mmGetStatic *mLocalNodeMockGetStatic) Set(f func() (s1 StaticProfile)) *LocalNodeMock {
	if mmGetStatic.defaultExpectation != nil {
		mmGetStatic.mock.t.Fatalf("Default expectation is already set for the LocalNode.GetStatic method")
	}

	if len(mmGetStatic.expectations) > 0 {
		mmGetStatic.mock.t.Fatalf("Some expectations are already set for the LocalNode.GetStatic method")
	}

	mmGetStatic.mock.funcGetStatic = f
	return mmGetStatic.mock
}

// GetStatic implements LocalNode
func (mmGetStatic *LocalNodeMock) GetStatic() (s1 StaticProfile) {
	mm_atomic.AddUint64(&mmGetStatic.beforeGetStaticCounter, 1)
	defer mm_atomic.AddUint64(&mmGetStatic.afterGetStaticCounter, 1)

	if mmGetStatic.inspectFuncGetStatic != nil {
		mmGetStatic.inspectFuncGetStatic()
	}

	if mmGetStatic.GetStaticMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&mmGetStatic.GetStaticMock.defaultExpectation.Counter, 1)

		results := mmGetStatic.GetStaticMock.defaultExpectation.results
		if results == nil {
			mmGetStatic.t.Fatal("No results are set for the LocalNodeMock.GetStatic")
		}
		return (*results).s1
	}
	if mmGetStatic.funcGetStatic != nil {
		return mmGetStatic.funcGetStatic()
	}
	mmGetStatic.t.Fatalf("Unexpected call to LocalNodeMock.GetStatic.")
	return
}

// GetStaticAfterCounter returns a count of finished LocalNodeMock.GetStatic invocations
func (mmGetStatic *LocalNodeMock) GetStaticAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&mmGetStatic.afterGetStaticCounter)
}

// GetStaticBeforeCounter returns a count of LocalNodeMock.GetStatic invocations
func (mmGetStatic *LocalNodeMock) GetStaticBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&mmGetStatic.beforeGetStaticCounter)
}

// MinimockGetStaticDone returns true if the count of the GetStatic invocations corresponds
// the number of defined expectations
func (m *LocalNodeMock) MinimockGetStaticDone() bool {
	for _, e := range m.GetStaticMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.GetStaticMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterGetStaticCounter) < 1 {
		return false
	}
	// if func was set then invocations count should be greater than zero
	if m.funcGetStatic != nil && mm_atomic.LoadUint64(&m.afterGetStaticCounter) < 1 {
		return false
	}
	return true
}

// MinimockGetStaticInspect logs each unmet expectation
func (m *LocalNodeMock) MinimockGetStaticInspect() {
	for _, e := range m.GetStaticMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Error("Expected call to LocalNodeMock.GetStatic")
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.GetStaticMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterGetStaticCounter) < 1 {
		m.t.Error("Expected call to LocalNodeMock.GetStatic")
	}
	// if func was set then invocations count should be greater than zero
	if m.funcGetStatic != nil && mm_atomic.LoadUint64(&m.afterGetStaticCounter) < 1 {
		m.t.Error("Expected call to LocalNodeMock.GetStatic")
	}
}

type mLocalNodeMockIsJoiner struct {
	mock               *LocalNodeMock
	defaultExpectation *LocalNodeMockIsJoinerExpectation
	expectations       []*LocalNodeMockIsJoinerExpectation
}

// LocalNodeMockIsJoinerExpectation specifies expectation struct of the LocalNode.IsJoiner
type LocalNodeMockIsJoinerExpectation struct {
	mock *LocalNodeMock

	results *LocalNodeMockIsJoinerResults
	Counter uint64
}

// LocalNodeMockIsJoinerResults contains results of the LocalNode.IsJoiner
type LocalNodeMockIsJoinerResults struct {
	b1 bool
}

// Expect sets up expected params for LocalNode.IsJoiner
func (mmIsJoiner *mLocalNodeMockIsJoiner) Expect() *mLocalNodeMockIsJoiner {
	if mmIsJoiner.mock.funcIsJoiner != nil {
		mmIsJoiner.mock.t.Fatalf("LocalNodeMock.IsJoiner mock is already set by Set")
	}

	if mmIsJoiner.defaultExpectation == nil {
		mmIsJoiner.defaultExpectation = &LocalNodeMockIsJoinerExpectation{}
	}

	return mmIsJoiner
}

// Inspect accepts an inspector function that has same arguments as the LocalNode.IsJoiner
func (mmIsJoiner *mLocalNodeMockIsJoiner) Inspect(f func()) *mLocalNodeMockIsJoiner {
	if mmIsJoiner.mock.inspectFuncIsJoiner != nil {
		mmIsJoiner.mock.t.Fatalf("Inspect function is already set for LocalNodeMock.IsJoiner")
	}

	mmIsJoiner.mock.inspectFuncIsJoiner = f

	return mmIsJoiner
}

// Return sets up results that will be returned by LocalNode.IsJoiner
func (mmIsJoiner *mLocalNodeMockIsJoiner) Return(b1 bool) *LocalNodeMock {
	if mmIsJoiner.mock.funcIsJoiner != nil {
		mmIsJoiner.mock.t.Fatalf("LocalNodeMock.IsJoiner mock is already set by Set")
	}

	if mmIsJoiner.defaultExpectation == nil {
		mmIsJoiner.defaultExpectation = &LocalNodeMockIsJoinerExpectation{mock: mmIsJoiner.mock}
	}
	mmIsJoiner.defaultExpectation.results = &LocalNodeMockIsJoinerResults{b1}
	return mmIsJoiner.mock
}

//Set uses given function f to mock the LocalNode.IsJoiner method
func (mmIsJoiner *mLocalNodeMockIsJoiner) Set(f func() (b1 bool)) *LocalNodeMock {
	if mmIsJoiner.defaultExpectation != nil {
		mmIsJoiner.mock.t.Fatalf("Default expectation is already set for the LocalNode.IsJoiner method")
	}

	if len(mmIsJoiner.expectations) > 0 {
		mmIsJoiner.mock.t.Fatalf("Some expectations are already set for the LocalNode.IsJoiner method")
	}

	mmIsJoiner.mock.funcIsJoiner = f
	return mmIsJoiner.mock
}

// IsJoiner implements LocalNode
func (mmIsJoiner *LocalNodeMock) IsJoiner() (b1 bool) {
	mm_atomic.AddUint64(&mmIsJoiner.beforeIsJoinerCounter, 1)
	defer mm_atomic.AddUint64(&mmIsJoiner.afterIsJoinerCounter, 1)

	if mmIsJoiner.inspectFuncIsJoiner != nil {
		mmIsJoiner.inspectFuncIsJoiner()
	}

	if mmIsJoiner.IsJoinerMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&mmIsJoiner.IsJoinerMock.defaultExpectation.Counter, 1)

		results := mmIsJoiner.IsJoinerMock.defaultExpectation.results
		if results == nil {
			mmIsJoiner.t.Fatal("No results are set for the LocalNodeMock.IsJoiner")
		}
		return (*results).b1
	}
	if mmIsJoiner.funcIsJoiner != nil {
		return mmIsJoiner.funcIsJoiner()
	}
	mmIsJoiner.t.Fatalf("Unexpected call to LocalNodeMock.IsJoiner.")
	return
}

// IsJoinerAfterCounter returns a count of finished LocalNodeMock.IsJoiner invocations
func (mmIsJoiner *LocalNodeMock) IsJoinerAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&mmIsJoiner.afterIsJoinerCounter)
}

// IsJoinerBeforeCounter returns a count of LocalNodeMock.IsJoiner invocations
func (mmIsJoiner *LocalNodeMock) IsJoinerBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&mmIsJoiner.beforeIsJoinerCounter)
}

// MinimockIsJoinerDone returns true if the count of the IsJoiner invocations corresponds
// the number of defined expectations
func (m *LocalNodeMock) MinimockIsJoinerDone() bool {
	for _, e := range m.IsJoinerMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.IsJoinerMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterIsJoinerCounter) < 1 {
		return false
	}
	// if func was set then invocations count should be greater than zero
	if m.funcIsJoiner != nil && mm_atomic.LoadUint64(&m.afterIsJoinerCounter) < 1 {
		return false
	}
	return true
}

// MinimockIsJoinerInspect logs each unmet expectation
func (m *LocalNodeMock) MinimockIsJoinerInspect() {
	for _, e := range m.IsJoinerMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Error("Expected call to LocalNodeMock.IsJoiner")
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.IsJoinerMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterIsJoinerCounter) < 1 {
		m.t.Error("Expected call to LocalNodeMock.IsJoiner")
	}
	// if func was set then invocations count should be greater than zero
	if m.funcIsJoiner != nil && mm_atomic.LoadUint64(&m.afterIsJoinerCounter) < 1 {
		m.t.Error("Expected call to LocalNodeMock.IsJoiner")
	}
}

type mLocalNodeMockLocalNodeProfile struct {
	mock               *LocalNodeMock
	defaultExpectation *LocalNodeMockLocalNodeProfileExpectation
	expectations       []*LocalNodeMockLocalNodeProfileExpectation
}

// LocalNodeMockLocalNodeProfileExpectation specifies expectation struct of the LocalNode.LocalNodeProfile
type LocalNodeMockLocalNodeProfileExpectation struct {
	mock *LocalNodeMock

	Counter uint64
}

// Expect sets up expected params for LocalNode.LocalNodeProfile
func (mmLocalNodeProfile *mLocalNodeMockLocalNodeProfile) Expect() *mLocalNodeMockLocalNodeProfile {
	if mmLocalNodeProfile.mock.funcLocalNodeProfile != nil {
		mmLocalNodeProfile.mock.t.Fatalf("LocalNodeMock.LocalNodeProfile mock is already set by Set")
	}

	if mmLocalNodeProfile.defaultExpectation == nil {
		mmLocalNodeProfile.defaultExpectation = &LocalNodeMockLocalNodeProfileExpectation{}
	}

	return mmLocalNodeProfile
}

// Inspect accepts an inspector function that has same arguments as the LocalNode.LocalNodeProfile
func (mmLocalNodeProfile *mLocalNodeMockLocalNodeProfile) Inspect(f func()) *mLocalNodeMockLocalNodeProfile {
	if mmLocalNodeProfile.mock.inspectFuncLocalNodeProfile != nil {
		mmLocalNodeProfile.mock.t.Fatalf("Inspect function is already set for LocalNodeMock.LocalNodeProfile")
	}

	mmLocalNodeProfile.mock.inspectFuncLocalNodeProfile = f

	return mmLocalNodeProfile
}

// Return sets up results that will be returned by LocalNode.LocalNodeProfile
func (mmLocalNodeProfile *mLocalNodeMockLocalNodeProfile) Return() *LocalNodeMock {
	if mmLocalNodeProfile.mock.funcLocalNodeProfile != nil {
		mmLocalNodeProfile.mock.t.Fatalf("LocalNodeMock.LocalNodeProfile mock is already set by Set")
	}

	if mmLocalNodeProfile.defaultExpectation == nil {
		mmLocalNodeProfile.defaultExpectation = &LocalNodeMockLocalNodeProfileExpectation{mock: mmLocalNodeProfile.mock}
	}

	return mmLocalNodeProfile.mock
}

//Set uses given function f to mock the LocalNode.LocalNodeProfile method
func (mmLocalNodeProfile *mLocalNodeMockLocalNodeProfile) Set(f func()) *LocalNodeMock {
	if mmLocalNodeProfile.defaultExpectation != nil {
		mmLocalNodeProfile.mock.t.Fatalf("Default expectation is already set for the LocalNode.LocalNodeProfile method")
	}

	if len(mmLocalNodeProfile.expectations) > 0 {
		mmLocalNodeProfile.mock.t.Fatalf("Some expectations are already set for the LocalNode.LocalNodeProfile method")
	}

	mmLocalNodeProfile.mock.funcLocalNodeProfile = f
	return mmLocalNodeProfile.mock
}

// LocalNodeProfile implements LocalNode
func (mmLocalNodeProfile *LocalNodeMock) LocalNodeProfile() {
	mm_atomic.AddUint64(&mmLocalNodeProfile.beforeLocalNodeProfileCounter, 1)
	defer mm_atomic.AddUint64(&mmLocalNodeProfile.afterLocalNodeProfileCounter, 1)

	if mmLocalNodeProfile.inspectFuncLocalNodeProfile != nil {
		mmLocalNodeProfile.inspectFuncLocalNodeProfile()
	}

	if mmLocalNodeProfile.LocalNodeProfileMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&mmLocalNodeProfile.LocalNodeProfileMock.defaultExpectation.Counter, 1)

		return

	}
	if mmLocalNodeProfile.funcLocalNodeProfile != nil {
		mmLocalNodeProfile.funcLocalNodeProfile()
		return
	}
	mmLocalNodeProfile.t.Fatalf("Unexpected call to LocalNodeMock.LocalNodeProfile.")

}

// LocalNodeProfileAfterCounter returns a count of finished LocalNodeMock.LocalNodeProfile invocations
func (mmLocalNodeProfile *LocalNodeMock) LocalNodeProfileAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&mmLocalNodeProfile.afterLocalNodeProfileCounter)
}

// LocalNodeProfileBeforeCounter returns a count of LocalNodeMock.LocalNodeProfile invocations
func (mmLocalNodeProfile *LocalNodeMock) LocalNodeProfileBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&mmLocalNodeProfile.beforeLocalNodeProfileCounter)
}

// MinimockLocalNodeProfileDone returns true if the count of the LocalNodeProfile invocations corresponds
// the number of defined expectations
func (m *LocalNodeMock) MinimockLocalNodeProfileDone() bool {
	for _, e := range m.LocalNodeProfileMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.LocalNodeProfileMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterLocalNodeProfileCounter) < 1 {
		return false
	}
	// if func was set then invocations count should be greater than zero
	if m.funcLocalNodeProfile != nil && mm_atomic.LoadUint64(&m.afterLocalNodeProfileCounter) < 1 {
		return false
	}
	return true
}

// MinimockLocalNodeProfileInspect logs each unmet expectation
func (m *LocalNodeMock) MinimockLocalNodeProfileInspect() {
	for _, e := range m.LocalNodeProfileMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Error("Expected call to LocalNodeMock.LocalNodeProfile")
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.LocalNodeProfileMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterLocalNodeProfileCounter) < 1 {
		m.t.Error("Expected call to LocalNodeMock.LocalNodeProfile")
	}
	// if func was set then invocations count should be greater than zero
	if m.funcLocalNodeProfile != nil && mm_atomic.LoadUint64(&m.afterLocalNodeProfileCounter) < 1 {
		m.t.Error("Expected call to LocalNodeMock.LocalNodeProfile")
	}
}

// MinimockFinish checks that all mocked methods have been called the expected number of times
func (m *LocalNodeMock) MinimockFinish() {
	if !m.minimockDone() {
		m.MinimockGetDeclaredPowerInspect()

		m.MinimockGetIndexInspect()

		m.MinimockGetNodeIDInspect()

		m.MinimockGetOpModeInspect()

		m.MinimockGetSignatureVerifierInspect()

		m.MinimockGetStaticInspect()

		m.MinimockIsJoinerInspect()

		m.MinimockLocalNodeProfileInspect()
		m.t.FailNow()
	}
}

// MinimockWait waits for all mocked methods to be called the expected number of times
func (m *LocalNodeMock) MinimockWait(timeout mm_time.Duration) {
	timeoutCh := mm_time.After(timeout)
	for {
		if m.minimockDone() {
			return
		}
		select {
		case <-timeoutCh:
			m.MinimockFinish()
			return
		case <-mm_time.After(10 * mm_time.Millisecond):
		}
	}
}

func (m *LocalNodeMock) minimockDone() bool {
	done := true
	return done &&
		m.MinimockGetDeclaredPowerDone() &&
		m.MinimockGetIndexDone() &&
		m.MinimockGetNodeIDDone() &&
		m.MinimockGetOpModeDone() &&
		m.MinimockGetSignatureVerifierDone() &&
		m.MinimockGetStaticDone() &&
		m.MinimockIsJoinerDone() &&
		m.MinimockLocalNodeProfileDone()
}
