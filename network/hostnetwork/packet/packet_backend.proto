syntax = "proto3";

package packet;

import "github.com/gogo/protobuf/gogoproto/gogo.proto";
import "github.com/insolar/insolar/insolar/pulse/pulse.proto";

option (gogoproto.goproto_getters_all) = false;
option (gogoproto.populate_all)        = false;

message Address {
    bytes IP = 1;
    uint32 port = 2;
    bytes Zone = 3;
}

message Host {
    bytes NodeID = 1;
    uint32 ShortID = 2;
    Address Address = 3;
}

message PacketBackend {
    Host Sender = 1;
    Host Receiver = 2;
    uint32 RequestID = 3;
    bytes TraceID = 4;

    oneof payload {
        Request Request = 5;
        Response Response = 6;
    }
}

message Request {
    oneof request {
        Ping Ping = 1;
        RPCRequest RPC = 2;
        CascadeRequest Cascade = 3;
        PulseRequest Pulse = 4;
        BootstrapRequest Bootstrap = 5;
        AuthorizeRequest Authorize = 6;
        RegisterRequest Register = 7;
        GenesisRequest Genesis = 8;
    }
}

message Response {
    oneof response {
        Ping Ping = 1;
        RPCResponse RPC = 2;
        BasicResponse Basic = 3; // response for Cascade, Pulse
        BootstrapResponse Bootstrap = 4;
        AuthorizeResponse Authorize = 5;
        RegisterResponse Register = 6;
        GenesisResponse Genesis = 7;
    }
}

message Ping {
    // nuff said
}

message RPCRequest {
    bytes Method = 1;
    bytes Data = 2;
}

message Cascade {
    repeated bytes NodeIds = 1;
    bytes Entropy = 2;
    uint32 ReplicationFactor = 3;
}

message CascadeRequest {
    bytes TraceID = 1;
    RPCRequest RPC = 2;
    Cascade Cascade = 3;
}

message PulseRequest {
    pulse.PulseProto Pulse = 1;
}

message BootstrapRequest {
    bytes JoinClaim = 1 [(gogoproto.customtype) = "github.com/insolar/insolar/network/consensus/packets.NodeJoinClaim"];
    uint32 LastNodePulse = 2;
}

message AuthorizeRequest {

}

message RegisterRequest {

}

message GenesisRequest {

}

message RPCResponse {
    oneof response {
        bytes Result = 1;
        bytes Error = 2;
    }
}

message BasicResponse {
    oneof response {
        bool Success = 1;
        bytes Error = 2;
    }
}

message BootstrapResponse {
    enum ResponseCode {
        Accepted = 0;
        Rejected = 1;
        Redirected = 2;
        ReconnectRequired = 3;
    }
    ResponseCode Code = 1;
    bytes RejectReason = 2;
    uint32 ETA = 3;
    uint32 AssignShortID = 4;
    uint32 UpdateSincePulse = 5;
    bytes RedirectHost = 6;
    uint32 NetworkSize = 7;
}

message AuthorizeResponse {

}

message RegisterResponse {

}

message GenesisResponse {

}
