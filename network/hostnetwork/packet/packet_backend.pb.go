// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: network/hostnetwork/packet/packet_backend.proto

package types

import (
	bytes "bytes"
	fmt "fmt"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	pulse "insolar/pulse"
	io "io"
	math "math"
	reflect "reflect"
	strings "strings"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion2 // please upgrade the proto package

type Address struct {
	IP   []byte `protobuf:"bytes,1,opt,name=IP,proto3" json:"IP,omitempty"`
	Port uint32 `protobuf:"varint,2,opt,name=port,proto3" json:"port,omitempty"`
	Zone []byte `protobuf:"bytes,3,opt,name=Zone,proto3" json:"Zone,omitempty"`
}

func (m *Address) Reset()      { *m = Address{} }
func (*Address) ProtoMessage() {}
func (*Address) Descriptor() ([]byte, []int) {
	return fileDescriptor_c34e17d86647303e, []int{0}
}
func (m *Address) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Address) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Address.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Address) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Address.Merge(m, src)
}
func (m *Address) XXX_Size() int {
	return m.Size()
}
func (m *Address) XXX_DiscardUnknown() {
	xxx_messageInfo_Address.DiscardUnknown(m)
}

var xxx_messageInfo_Address proto.InternalMessageInfo

type Host struct {
	NodeID  []byte   `protobuf:"bytes,1,opt,name=NodeID,proto3" json:"NodeID,omitempty"`
	ShortID uint32   `protobuf:"varint,2,opt,name=ShortID,proto3" json:"ShortID,omitempty"`
	Address *Address `protobuf:"bytes,3,opt,name=Address,proto3" json:"Address,omitempty"`
}

func (m *Host) Reset()      { *m = Host{} }
func (*Host) ProtoMessage() {}
func (*Host) Descriptor() ([]byte, []int) {
	return fileDescriptor_c34e17d86647303e, []int{1}
}
func (m *Host) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Host) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Host.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Host) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Host.Merge(m, src)
}
func (m *Host) XXX_Size() int {
	return m.Size()
}
func (m *Host) XXX_DiscardUnknown() {
	xxx_messageInfo_Host.DiscardUnknown(m)
}

var xxx_messageInfo_Host proto.InternalMessageInfo

type PacketBackend struct {
	Sender    *Host  `protobuf:"bytes,1,opt,name=Sender,proto3" json:"Sender,omitempty"`
	Receiver  *Host  `protobuf:"bytes,2,opt,name=Receiver,proto3" json:"Receiver,omitempty"`
	RequestID uint32 `protobuf:"varint,3,opt,name=RequestID,proto3" json:"RequestID,omitempty"`
	TraceID   []byte `protobuf:"bytes,4,opt,name=TraceID,proto3" json:"TraceID,omitempty"`
	// Types that are valid to be assigned to Payload:
	//	*PacketBackend_Request
	//	*PacketBackend_Response
	Payload isPacketBackend_Payload `protobuf_oneof:"payload"`
}

func (m *PacketBackend) Reset()      { *m = PacketBackend{} }
func (*PacketBackend) ProtoMessage() {}
func (*PacketBackend) Descriptor() ([]byte, []int) {
	return fileDescriptor_c34e17d86647303e, []int{2}
}
func (m *PacketBackend) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PacketBackend) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PacketBackend.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PacketBackend) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PacketBackend.Merge(m, src)
}
func (m *PacketBackend) XXX_Size() int {
	return m.Size()
}
func (m *PacketBackend) XXX_DiscardUnknown() {
	xxx_messageInfo_PacketBackend.DiscardUnknown(m)
}

var xxx_messageInfo_PacketBackend proto.InternalMessageInfo

type isPacketBackend_Payload interface {
	isPacketBackend_Payload()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}

type PacketBackend_Request struct {
	Request *Request `protobuf:"bytes,5,opt,name=Request,proto3,oneof"`
}
type PacketBackend_Response struct {
	Response *Response `protobuf:"bytes,6,opt,name=Response,proto3,oneof"`
}

func (*PacketBackend_Request) isPacketBackend_Payload()  {}
func (*PacketBackend_Response) isPacketBackend_Payload() {}

func (m *PacketBackend) GetPayload() isPacketBackend_Payload {
	if m != nil {
		return m.Payload
	}
	return nil
}

func (m *PacketBackend) GetRequest() *Request {
	if x, ok := m.GetPayload().(*PacketBackend_Request); ok {
		return x.Request
	}
	return nil
}

func (m *PacketBackend) GetResponse() *Response {
	if x, ok := m.GetPayload().(*PacketBackend_Response); ok {
		return x.Response
	}
	return nil
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*PacketBackend) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _PacketBackend_OneofMarshaler, _PacketBackend_OneofUnmarshaler, _PacketBackend_OneofSizer, []interface{}{
		(*PacketBackend_Request)(nil),
		(*PacketBackend_Response)(nil),
	}
}

func _PacketBackend_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*PacketBackend)
	// payload
	switch x := m.Payload.(type) {
	case *PacketBackend_Request:
		_ = b.EncodeVarint(5<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Request); err != nil {
			return err
		}
	case *PacketBackend_Response:
		_ = b.EncodeVarint(6<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Response); err != nil {
			return err
		}
	case nil:
	default:
		return fmt.Errorf("PacketBackend.Payload has unexpected type %T", x)
	}
	return nil
}

func _PacketBackend_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*PacketBackend)
	switch tag {
	case 5: // payload.Request
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(Request)
		err := b.DecodeMessage(msg)
		m.Payload = &PacketBackend_Request{msg}
		return true, err
	case 6: // payload.Response
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(Response)
		err := b.DecodeMessage(msg)
		m.Payload = &PacketBackend_Response{msg}
		return true, err
	default:
		return false, nil
	}
}

func _PacketBackend_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*PacketBackend)
	// payload
	switch x := m.Payload.(type) {
	case *PacketBackend_Request:
		s := proto.Size(x.Request)
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *PacketBackend_Response:
		s := proto.Size(x.Response)
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

type Request struct {
	// Types that are valid to be assigned to Request:
	//	*Request_Ping
	//	*Request_RPC
	//	*Request_Cascade
	//	*Request_Pulse
	//	*Request_Bootstrap
	//	*Request_Authorize
	//	*Request_Register
	//	*Request_Genesis
	//	*Request_Challenge1
	//	*Request_Challenge2
	//	*Request_Disconnect
	Request isRequest_Request `protobuf_oneof:"request"`
}

func (m *Request) Reset()      { *m = Request{} }
func (*Request) ProtoMessage() {}
func (*Request) Descriptor() ([]byte, []int) {
	return fileDescriptor_c34e17d86647303e, []int{3}
}
func (m *Request) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Request) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Request.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Request) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Request.Merge(m, src)
}
func (m *Request) XXX_Size() int {
	return m.Size()
}
func (m *Request) XXX_DiscardUnknown() {
	xxx_messageInfo_Request.DiscardUnknown(m)
}

var xxx_messageInfo_Request proto.InternalMessageInfo

type isRequest_Request interface {
	isRequest_Request()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}

type Request_Ping struct {
	Ping *Ping `protobuf:"bytes,1,opt,name=Ping,proto3,oneof"`
}
type Request_RPC struct {
	RPC *RPCRequest `protobuf:"bytes,2,opt,name=RPC,proto3,oneof"`
}
type Request_Cascade struct {
	Cascade *CascadeRequest `protobuf:"bytes,3,opt,name=Cascade,proto3,oneof"`
}
type Request_Pulse struct {
	Pulse *PulseRequest `protobuf:"bytes,4,opt,name=Pulse,proto3,oneof"`
}
type Request_Bootstrap struct {
	Bootstrap *BootstrapRequest `protobuf:"bytes,5,opt,name=Bootstrap,proto3,oneof"`
}
type Request_Authorize struct {
	Authorize *AuthorizeRequest `protobuf:"bytes,6,opt,name=Authorize,proto3,oneof"`
}
type Request_Register struct {
	Register *RegisterRequest `protobuf:"bytes,7,opt,name=Register,proto3,oneof"`
}
type Request_Genesis struct {
	Genesis *GenesisRequest `protobuf:"bytes,8,opt,name=Genesis,proto3,oneof"`
}
type Request_Challenge1 struct {
	Challenge1 *Challenge1Request `protobuf:"bytes,9,opt,name=Challenge1,proto3,oneof"`
}
type Request_Challenge2 struct {
	Challenge2 *Challenge2Request `protobuf:"bytes,10,opt,name=Challenge2,proto3,oneof"`
}
type Request_Disconnect struct {
	Disconnect *DisconnectRequest `protobuf:"bytes,11,opt,name=Disconnect,proto3,oneof"`
}

func (*Request_Ping) isRequest_Request()       {}
func (*Request_RPC) isRequest_Request()        {}
func (*Request_Cascade) isRequest_Request()    {}
func (*Request_Pulse) isRequest_Request()      {}
func (*Request_Bootstrap) isRequest_Request()  {}
func (*Request_Authorize) isRequest_Request()  {}
func (*Request_Register) isRequest_Request()   {}
func (*Request_Genesis) isRequest_Request()    {}
func (*Request_Challenge1) isRequest_Request() {}
func (*Request_Challenge2) isRequest_Request() {}
func (*Request_Disconnect) isRequest_Request() {}

func (m *Request) GetRequest() isRequest_Request {
	if m != nil {
		return m.Request
	}
	return nil
}

func (m *Request) GetPing() *Ping {
	if x, ok := m.GetRequest().(*Request_Ping); ok {
		return x.Ping
	}
	return nil
}

func (m *Request) GetRPC() *RPCRequest {
	if x, ok := m.GetRequest().(*Request_RPC); ok {
		return x.RPC
	}
	return nil
}

func (m *Request) GetCascade() *CascadeRequest {
	if x, ok := m.GetRequest().(*Request_Cascade); ok {
		return x.Cascade
	}
	return nil
}

func (m *Request) GetPulse() *PulseRequest {
	if x, ok := m.GetRequest().(*Request_Pulse); ok {
		return x.Pulse
	}
	return nil
}

func (m *Request) GetBootstrap() *BootstrapRequest {
	if x, ok := m.GetRequest().(*Request_Bootstrap); ok {
		return x.Bootstrap
	}
	return nil
}

func (m *Request) GetAuthorize() *AuthorizeRequest {
	if x, ok := m.GetRequest().(*Request_Authorize); ok {
		return x.Authorize
	}
	return nil
}

func (m *Request) GetRegister() *RegisterRequest {
	if x, ok := m.GetRequest().(*Request_Register); ok {
		return x.Register
	}
	return nil
}

func (m *Request) GetGenesis() *GenesisRequest {
	if x, ok := m.GetRequest().(*Request_Genesis); ok {
		return x.Genesis
	}
	return nil
}

func (m *Request) GetChallenge1() *Challenge1Request {
	if x, ok := m.GetRequest().(*Request_Challenge1); ok {
		return x.Challenge1
	}
	return nil
}

func (m *Request) GetChallenge2() *Challenge2Request {
	if x, ok := m.GetRequest().(*Request_Challenge2); ok {
		return x.Challenge2
	}
	return nil
}

func (m *Request) GetDisconnect() *DisconnectRequest {
	if x, ok := m.GetRequest().(*Request_Disconnect); ok {
		return x.Disconnect
	}
	return nil
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*Request) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _Request_OneofMarshaler, _Request_OneofUnmarshaler, _Request_OneofSizer, []interface{}{
		(*Request_Ping)(nil),
		(*Request_RPC)(nil),
		(*Request_Cascade)(nil),
		(*Request_Pulse)(nil),
		(*Request_Bootstrap)(nil),
		(*Request_Authorize)(nil),
		(*Request_Register)(nil),
		(*Request_Genesis)(nil),
		(*Request_Challenge1)(nil),
		(*Request_Challenge2)(nil),
		(*Request_Disconnect)(nil),
	}
}

func _Request_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*Request)
	// request
	switch x := m.Request.(type) {
	case *Request_Ping:
		_ = b.EncodeVarint(1<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Ping); err != nil {
			return err
		}
	case *Request_RPC:
		_ = b.EncodeVarint(2<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.RPC); err != nil {
			return err
		}
	case *Request_Cascade:
		_ = b.EncodeVarint(3<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Cascade); err != nil {
			return err
		}
	case *Request_Pulse:
		_ = b.EncodeVarint(4<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Pulse); err != nil {
			return err
		}
	case *Request_Bootstrap:
		_ = b.EncodeVarint(5<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Bootstrap); err != nil {
			return err
		}
	case *Request_Authorize:
		_ = b.EncodeVarint(6<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Authorize); err != nil {
			return err
		}
	case *Request_Register:
		_ = b.EncodeVarint(7<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Register); err != nil {
			return err
		}
	case *Request_Genesis:
		_ = b.EncodeVarint(8<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Genesis); err != nil {
			return err
		}
	case *Request_Challenge1:
		_ = b.EncodeVarint(9<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Challenge1); err != nil {
			return err
		}
	case *Request_Challenge2:
		_ = b.EncodeVarint(10<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Challenge2); err != nil {
			return err
		}
	case *Request_Disconnect:
		_ = b.EncodeVarint(11<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Disconnect); err != nil {
			return err
		}
	case nil:
	default:
		return fmt.Errorf("Request.Request has unexpected type %T", x)
	}
	return nil
}

func _Request_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*Request)
	switch tag {
	case 1: // request.Ping
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(Ping)
		err := b.DecodeMessage(msg)
		m.Request = &Request_Ping{msg}
		return true, err
	case 2: // request.RPC
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(RPCRequest)
		err := b.DecodeMessage(msg)
		m.Request = &Request_RPC{msg}
		return true, err
	case 3: // request.Cascade
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(CascadeRequest)
		err := b.DecodeMessage(msg)
		m.Request = &Request_Cascade{msg}
		return true, err
	case 4: // request.Pulse
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(PulseRequest)
		err := b.DecodeMessage(msg)
		m.Request = &Request_Pulse{msg}
		return true, err
	case 5: // request.Bootstrap
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(BootstrapRequest)
		err := b.DecodeMessage(msg)
		m.Request = &Request_Bootstrap{msg}
		return true, err
	case 6: // request.Authorize
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(AuthorizeRequest)
		err := b.DecodeMessage(msg)
		m.Request = &Request_Authorize{msg}
		return true, err
	case 7: // request.Register
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(RegisterRequest)
		err := b.DecodeMessage(msg)
		m.Request = &Request_Register{msg}
		return true, err
	case 8: // request.Genesis
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(GenesisRequest)
		err := b.DecodeMessage(msg)
		m.Request = &Request_Genesis{msg}
		return true, err
	case 9: // request.Challenge1
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(Challenge1Request)
		err := b.DecodeMessage(msg)
		m.Request = &Request_Challenge1{msg}
		return true, err
	case 10: // request.Challenge2
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(Challenge2Request)
		err := b.DecodeMessage(msg)
		m.Request = &Request_Challenge2{msg}
		return true, err
	case 11: // request.Disconnect
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(DisconnectRequest)
		err := b.DecodeMessage(msg)
		m.Request = &Request_Disconnect{msg}
		return true, err
	default:
		return false, nil
	}
}

func _Request_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*Request)
	// request
	switch x := m.Request.(type) {
	case *Request_Ping:
		s := proto.Size(x.Ping)
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *Request_RPC:
		s := proto.Size(x.RPC)
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *Request_Cascade:
		s := proto.Size(x.Cascade)
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *Request_Pulse:
		s := proto.Size(x.Pulse)
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *Request_Bootstrap:
		s := proto.Size(x.Bootstrap)
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *Request_Authorize:
		s := proto.Size(x.Authorize)
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *Request_Register:
		s := proto.Size(x.Register)
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *Request_Genesis:
		s := proto.Size(x.Genesis)
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *Request_Challenge1:
		s := proto.Size(x.Challenge1)
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *Request_Challenge2:
		s := proto.Size(x.Challenge2)
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *Request_Disconnect:
		s := proto.Size(x.Disconnect)
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

type Response struct {
	// Types that are valid to be assigned to Response:
	//	*Response_Ping
	//	*Response_RPC
	//	*Response_Cascade
	//	*Response_Pulse
	//	*Response_Bootstrap
	//	*Response_Authorize
	//	*Response_Register
	//	*Response_Genesis
	//	*Response_Challenge1
	//	*Response_Challenge2
	//	*Response_Disconnect
	Response isResponse_Response `protobuf_oneof:"response"`
}

func (m *Response) Reset()      { *m = Response{} }
func (*Response) ProtoMessage() {}
func (*Response) Descriptor() ([]byte, []int) {
	return fileDescriptor_c34e17d86647303e, []int{4}
}
func (m *Response) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Response) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Response.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Response) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Response.Merge(m, src)
}
func (m *Response) XXX_Size() int {
	return m.Size()
}
func (m *Response) XXX_DiscardUnknown() {
	xxx_messageInfo_Response.DiscardUnknown(m)
}

var xxx_messageInfo_Response proto.InternalMessageInfo

type isResponse_Response interface {
	isResponse_Response()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}

type Response_Ping struct {
	Ping *Ping `protobuf:"bytes,1,opt,name=Ping,proto3,oneof"`
}
type Response_RPC struct {
	RPC *RPCResponse `protobuf:"bytes,2,opt,name=RPC,proto3,oneof"`
}
type Response_Cascade struct {
	Cascade *CascadeResponse `protobuf:"bytes,3,opt,name=Cascade,proto3,oneof"`
}
type Response_Pulse struct {
	Pulse *PulseResponse `protobuf:"bytes,4,opt,name=Pulse,proto3,oneof"`
}
type Response_Bootstrap struct {
	Bootstrap *BootstrapResponse `protobuf:"bytes,5,opt,name=Bootstrap,proto3,oneof"`
}
type Response_Authorize struct {
	Authorize *AuthorizeResponse `protobuf:"bytes,6,opt,name=Authorize,proto3,oneof"`
}
type Response_Register struct {
	Register *RegisterResponse `protobuf:"bytes,7,opt,name=Register,proto3,oneof"`
}
type Response_Genesis struct {
	Genesis *GenesisResponse `protobuf:"bytes,8,opt,name=Genesis,proto3,oneof"`
}
type Response_Challenge1 struct {
	Challenge1 *Challenge1Response `protobuf:"bytes,9,opt,name=Challenge1,proto3,oneof"`
}
type Response_Challenge2 struct {
	Challenge2 *Challenge2Response `protobuf:"bytes,10,opt,name=Challenge2,proto3,oneof"`
}
type Response_Disconnect struct {
	Disconnect *DisconnectResponse `protobuf:"bytes,11,opt,name=Disconnect,proto3,oneof"`
}

func (*Response_Ping) isResponse_Response()       {}
func (*Response_RPC) isResponse_Response()        {}
func (*Response_Cascade) isResponse_Response()    {}
func (*Response_Pulse) isResponse_Response()      {}
func (*Response_Bootstrap) isResponse_Response()  {}
func (*Response_Authorize) isResponse_Response()  {}
func (*Response_Register) isResponse_Response()   {}
func (*Response_Genesis) isResponse_Response()    {}
func (*Response_Challenge1) isResponse_Response() {}
func (*Response_Challenge2) isResponse_Response() {}
func (*Response_Disconnect) isResponse_Response() {}

func (m *Response) GetResponse() isResponse_Response {
	if m != nil {
		return m.Response
	}
	return nil
}

func (m *Response) GetPing() *Ping {
	if x, ok := m.GetResponse().(*Response_Ping); ok {
		return x.Ping
	}
	return nil
}

func (m *Response) GetRPC() *RPCResponse {
	if x, ok := m.GetResponse().(*Response_RPC); ok {
		return x.RPC
	}
	return nil
}

func (m *Response) GetCascade() *CascadeResponse {
	if x, ok := m.GetResponse().(*Response_Cascade); ok {
		return x.Cascade
	}
	return nil
}

func (m *Response) GetPulse() *PulseResponse {
	if x, ok := m.GetResponse().(*Response_Pulse); ok {
		return x.Pulse
	}
	return nil
}

func (m *Response) GetBootstrap() *BootstrapResponse {
	if x, ok := m.GetResponse().(*Response_Bootstrap); ok {
		return x.Bootstrap
	}
	return nil
}

func (m *Response) GetAuthorize() *AuthorizeResponse {
	if x, ok := m.GetResponse().(*Response_Authorize); ok {
		return x.Authorize
	}
	return nil
}

func (m *Response) GetRegister() *RegisterResponse {
	if x, ok := m.GetResponse().(*Response_Register); ok {
		return x.Register
	}
	return nil
}

func (m *Response) GetGenesis() *GenesisResponse {
	if x, ok := m.GetResponse().(*Response_Genesis); ok {
		return x.Genesis
	}
	return nil
}

func (m *Response) GetChallenge1() *Challenge1Response {
	if x, ok := m.GetResponse().(*Response_Challenge1); ok {
		return x.Challenge1
	}
	return nil
}

func (m *Response) GetChallenge2() *Challenge2Response {
	if x, ok := m.GetResponse().(*Response_Challenge2); ok {
		return x.Challenge2
	}
	return nil
}

func (m *Response) GetDisconnect() *DisconnectResponse {
	if x, ok := m.GetResponse().(*Response_Disconnect); ok {
		return x.Disconnect
	}
	return nil
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*Response) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _Response_OneofMarshaler, _Response_OneofUnmarshaler, _Response_OneofSizer, []interface{}{
		(*Response_Ping)(nil),
		(*Response_RPC)(nil),
		(*Response_Cascade)(nil),
		(*Response_Pulse)(nil),
		(*Response_Bootstrap)(nil),
		(*Response_Authorize)(nil),
		(*Response_Register)(nil),
		(*Response_Genesis)(nil),
		(*Response_Challenge1)(nil),
		(*Response_Challenge2)(nil),
		(*Response_Disconnect)(nil),
	}
}

func _Response_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*Response)
	// response
	switch x := m.Response.(type) {
	case *Response_Ping:
		_ = b.EncodeVarint(1<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Ping); err != nil {
			return err
		}
	case *Response_RPC:
		_ = b.EncodeVarint(2<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.RPC); err != nil {
			return err
		}
	case *Response_Cascade:
		_ = b.EncodeVarint(3<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Cascade); err != nil {
			return err
		}
	case *Response_Pulse:
		_ = b.EncodeVarint(4<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Pulse); err != nil {
			return err
		}
	case *Response_Bootstrap:
		_ = b.EncodeVarint(5<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Bootstrap); err != nil {
			return err
		}
	case *Response_Authorize:
		_ = b.EncodeVarint(6<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Authorize); err != nil {
			return err
		}
	case *Response_Register:
		_ = b.EncodeVarint(7<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Register); err != nil {
			return err
		}
	case *Response_Genesis:
		_ = b.EncodeVarint(8<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Genesis); err != nil {
			return err
		}
	case *Response_Challenge1:
		_ = b.EncodeVarint(9<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Challenge1); err != nil {
			return err
		}
	case *Response_Challenge2:
		_ = b.EncodeVarint(10<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Challenge2); err != nil {
			return err
		}
	case *Response_Disconnect:
		_ = b.EncodeVarint(11<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Disconnect); err != nil {
			return err
		}
	case nil:
	default:
		return fmt.Errorf("Response.Response has unexpected type %T", x)
	}
	return nil
}

func _Response_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*Response)
	switch tag {
	case 1: // response.Ping
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(Ping)
		err := b.DecodeMessage(msg)
		m.Response = &Response_Ping{msg}
		return true, err
	case 2: // response.RPC
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(RPCResponse)
		err := b.DecodeMessage(msg)
		m.Response = &Response_RPC{msg}
		return true, err
	case 3: // response.Cascade
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(CascadeResponse)
		err := b.DecodeMessage(msg)
		m.Response = &Response_Cascade{msg}
		return true, err
	case 4: // response.Pulse
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(PulseResponse)
		err := b.DecodeMessage(msg)
		m.Response = &Response_Pulse{msg}
		return true, err
	case 5: // response.Bootstrap
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(BootstrapResponse)
		err := b.DecodeMessage(msg)
		m.Response = &Response_Bootstrap{msg}
		return true, err
	case 6: // response.Authorize
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(AuthorizeResponse)
		err := b.DecodeMessage(msg)
		m.Response = &Response_Authorize{msg}
		return true, err
	case 7: // response.Register
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(RegisterResponse)
		err := b.DecodeMessage(msg)
		m.Response = &Response_Register{msg}
		return true, err
	case 8: // response.Genesis
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(GenesisResponse)
		err := b.DecodeMessage(msg)
		m.Response = &Response_Genesis{msg}
		return true, err
	case 9: // response.Challenge1
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(Challenge1Response)
		err := b.DecodeMessage(msg)
		m.Response = &Response_Challenge1{msg}
		return true, err
	case 10: // response.Challenge2
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(Challenge2Response)
		err := b.DecodeMessage(msg)
		m.Response = &Response_Challenge2{msg}
		return true, err
	case 11: // response.Disconnect
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(DisconnectResponse)
		err := b.DecodeMessage(msg)
		m.Response = &Response_Disconnect{msg}
		return true, err
	default:
		return false, nil
	}
}

func _Response_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*Response)
	// response
	switch x := m.Response.(type) {
	case *Response_Ping:
		s := proto.Size(x.Ping)
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *Response_RPC:
		s := proto.Size(x.RPC)
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *Response_Cascade:
		s := proto.Size(x.Cascade)
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *Response_Pulse:
		s := proto.Size(x.Pulse)
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *Response_Bootstrap:
		s := proto.Size(x.Bootstrap)
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *Response_Authorize:
		s := proto.Size(x.Authorize)
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *Response_Register:
		s := proto.Size(x.Register)
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *Response_Genesis:
		s := proto.Size(x.Genesis)
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *Response_Challenge1:
		s := proto.Size(x.Challenge1)
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *Response_Challenge2:
		s := proto.Size(x.Challenge2)
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *Response_Disconnect:
		s := proto.Size(x.Disconnect)
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

type Ping struct {
}

func (m *Ping) Reset()      { *m = Ping{} }
func (*Ping) ProtoMessage() {}
func (*Ping) Descriptor() ([]byte, []int) {
	return fileDescriptor_c34e17d86647303e, []int{5}
}
func (m *Ping) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Ping) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Ping.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Ping) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Ping.Merge(m, src)
}
func (m *Ping) XXX_Size() int {
	return m.Size()
}
func (m *Ping) XXX_DiscardUnknown() {
	xxx_messageInfo_Ping.DiscardUnknown(m)
}

var xxx_messageInfo_Ping proto.InternalMessageInfo

type RPCRequest struct {
	Method []byte `protobuf:"bytes,1,opt,name=Method,proto3" json:"Method,omitempty"`
	Data   []byte `protobuf:"bytes,2,opt,name=Data,proto3" json:"Data,omitempty"`
}

func (m *RPCRequest) Reset()      { *m = RPCRequest{} }
func (*RPCRequest) ProtoMessage() {}
func (*RPCRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_c34e17d86647303e, []int{6}
}
func (m *RPCRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RPCRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RPCRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RPCRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RPCRequest.Merge(m, src)
}
func (m *RPCRequest) XXX_Size() int {
	return m.Size()
}
func (m *RPCRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_RPCRequest.DiscardUnknown(m)
}

var xxx_messageInfo_RPCRequest proto.InternalMessageInfo

type Cascade struct {
	NodeIds           [][]byte `protobuf:"bytes,1,rep,name=NodeIds,proto3" json:"NodeIds,omitempty"`
	Entropy           []byte   `protobuf:"bytes,2,opt,name=Entropy,proto3" json:"Entropy,omitempty"`
	ReplicationFactor uint32   `protobuf:"varint,3,opt,name=ReplicationFactor,proto3" json:"ReplicationFactor,omitempty"`
}

func (m *Cascade) Reset()      { *m = Cascade{} }
func (*Cascade) ProtoMessage() {}
func (*Cascade) Descriptor() ([]byte, []int) {
	return fileDescriptor_c34e17d86647303e, []int{7}
}
func (m *Cascade) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Cascade) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Cascade.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Cascade) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Cascade.Merge(m, src)
}
func (m *Cascade) XXX_Size() int {
	return m.Size()
}
func (m *Cascade) XXX_DiscardUnknown() {
	xxx_messageInfo_Cascade.DiscardUnknown(m)
}

var xxx_messageInfo_Cascade proto.InternalMessageInfo

type CascadeRequest struct {
	TraceID []byte      `protobuf:"bytes,1,opt,name=TraceID,proto3" json:"TraceID,omitempty"`
	RPC     *RPCRequest `protobuf:"bytes,2,opt,name=RPC,proto3" json:"RPC,omitempty"`
	Cascade *Cascade    `protobuf:"bytes,3,opt,name=Cascade,proto3" json:"Cascade,omitempty"`
}

func (m *CascadeRequest) Reset()      { *m = CascadeRequest{} }
func (*CascadeRequest) ProtoMessage() {}
func (*CascadeRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_c34e17d86647303e, []int{8}
}
func (m *CascadeRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CascadeRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CascadeRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CascadeRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CascadeRequest.Merge(m, src)
}
func (m *CascadeRequest) XXX_Size() int {
	return m.Size()
}
func (m *CascadeRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_CascadeRequest.DiscardUnknown(m)
}

var xxx_messageInfo_CascadeRequest proto.InternalMessageInfo

type PulseRequest struct {
	Pulse *pulse.PulseProto `protobuf:"bytes,1,opt,name=Pulse,proto3" json:"Pulse,omitempty"`
}

func (m *PulseRequest) Reset()      { *m = PulseRequest{} }
func (*PulseRequest) ProtoMessage() {}
func (*PulseRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_c34e17d86647303e, []int{9}
}
func (m *PulseRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PulseRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PulseRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PulseRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PulseRequest.Merge(m, src)
}
func (m *PulseRequest) XXX_Size() int {
	return m.Size()
}
func (m *PulseRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_PulseRequest.DiscardUnknown(m)
}

var xxx_messageInfo_PulseRequest proto.InternalMessageInfo

type BootstrapRequest struct {
}

func (m *BootstrapRequest) Reset()      { *m = BootstrapRequest{} }
func (*BootstrapRequest) ProtoMessage() {}
func (*BootstrapRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_c34e17d86647303e, []int{10}
}
func (m *BootstrapRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *BootstrapRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_BootstrapRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *BootstrapRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BootstrapRequest.Merge(m, src)
}
func (m *BootstrapRequest) XXX_Size() int {
	return m.Size()
}
func (m *BootstrapRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_BootstrapRequest.DiscardUnknown(m)
}

var xxx_messageInfo_BootstrapRequest proto.InternalMessageInfo

type AuthorizeRequest struct {
}

func (m *AuthorizeRequest) Reset()      { *m = AuthorizeRequest{} }
func (*AuthorizeRequest) ProtoMessage() {}
func (*AuthorizeRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_c34e17d86647303e, []int{11}
}
func (m *AuthorizeRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AuthorizeRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AuthorizeRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *AuthorizeRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AuthorizeRequest.Merge(m, src)
}
func (m *AuthorizeRequest) XXX_Size() int {
	return m.Size()
}
func (m *AuthorizeRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_AuthorizeRequest.DiscardUnknown(m)
}

var xxx_messageInfo_AuthorizeRequest proto.InternalMessageInfo

type RegisterRequest struct {
}

func (m *RegisterRequest) Reset()      { *m = RegisterRequest{} }
func (*RegisterRequest) ProtoMessage() {}
func (*RegisterRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_c34e17d86647303e, []int{12}
}
func (m *RegisterRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RegisterRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RegisterRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RegisterRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RegisterRequest.Merge(m, src)
}
func (m *RegisterRequest) XXX_Size() int {
	return m.Size()
}
func (m *RegisterRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_RegisterRequest.DiscardUnknown(m)
}

var xxx_messageInfo_RegisterRequest proto.InternalMessageInfo

type GenesisRequest struct {
}

func (m *GenesisRequest) Reset()      { *m = GenesisRequest{} }
func (*GenesisRequest) ProtoMessage() {}
func (*GenesisRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_c34e17d86647303e, []int{13}
}
func (m *GenesisRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GenesisRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GenesisRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GenesisRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GenesisRequest.Merge(m, src)
}
func (m *GenesisRequest) XXX_Size() int {
	return m.Size()
}
func (m *GenesisRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GenesisRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GenesisRequest proto.InternalMessageInfo

type Challenge1Request struct {
}

func (m *Challenge1Request) Reset()      { *m = Challenge1Request{} }
func (*Challenge1Request) ProtoMessage() {}
func (*Challenge1Request) Descriptor() ([]byte, []int) {
	return fileDescriptor_c34e17d86647303e, []int{14}
}
func (m *Challenge1Request) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Challenge1Request) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Challenge1Request.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Challenge1Request) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Challenge1Request.Merge(m, src)
}
func (m *Challenge1Request) XXX_Size() int {
	return m.Size()
}
func (m *Challenge1Request) XXX_DiscardUnknown() {
	xxx_messageInfo_Challenge1Request.DiscardUnknown(m)
}

var xxx_messageInfo_Challenge1Request proto.InternalMessageInfo

type Challenge2Request struct {
}

func (m *Challenge2Request) Reset()      { *m = Challenge2Request{} }
func (*Challenge2Request) ProtoMessage() {}
func (*Challenge2Request) Descriptor() ([]byte, []int) {
	return fileDescriptor_c34e17d86647303e, []int{15}
}
func (m *Challenge2Request) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Challenge2Request) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Challenge2Request.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Challenge2Request) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Challenge2Request.Merge(m, src)
}
func (m *Challenge2Request) XXX_Size() int {
	return m.Size()
}
func (m *Challenge2Request) XXX_DiscardUnknown() {
	xxx_messageInfo_Challenge2Request.DiscardUnknown(m)
}

var xxx_messageInfo_Challenge2Request proto.InternalMessageInfo

type DisconnectRequest struct {
}

func (m *DisconnectRequest) Reset()      { *m = DisconnectRequest{} }
func (*DisconnectRequest) ProtoMessage() {}
func (*DisconnectRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_c34e17d86647303e, []int{16}
}
func (m *DisconnectRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DisconnectRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DisconnectRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DisconnectRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DisconnectRequest.Merge(m, src)
}
func (m *DisconnectRequest) XXX_Size() int {
	return m.Size()
}
func (m *DisconnectRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_DisconnectRequest.DiscardUnknown(m)
}

var xxx_messageInfo_DisconnectRequest proto.InternalMessageInfo

type RPCResponse struct {
	// Types that are valid to be assigned to Response:
	//	*RPCResponse_Result
	//	*RPCResponse_Error
	Response isRPCResponse_Response `protobuf_oneof:"response"`
}

func (m *RPCResponse) Reset()      { *m = RPCResponse{} }
func (*RPCResponse) ProtoMessage() {}
func (*RPCResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_c34e17d86647303e, []int{17}
}
func (m *RPCResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RPCResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RPCResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RPCResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RPCResponse.Merge(m, src)
}
func (m *RPCResponse) XXX_Size() int {
	return m.Size()
}
func (m *RPCResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_RPCResponse.DiscardUnknown(m)
}

var xxx_messageInfo_RPCResponse proto.InternalMessageInfo

type isRPCResponse_Response interface {
	isRPCResponse_Response()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}

type RPCResponse_Result struct {
	Result []byte `protobuf:"bytes,1,opt,name=Result,proto3,oneof"`
}
type RPCResponse_Error struct {
	Error []byte `protobuf:"bytes,2,opt,name=Error,proto3,oneof"`
}

func (*RPCResponse_Result) isRPCResponse_Response() {}
func (*RPCResponse_Error) isRPCResponse_Response()  {}

func (m *RPCResponse) GetResponse() isRPCResponse_Response {
	if m != nil {
		return m.Response
	}
	return nil
}

func (m *RPCResponse) GetResult() []byte {
	if x, ok := m.GetResponse().(*RPCResponse_Result); ok {
		return x.Result
	}
	return nil
}

func (m *RPCResponse) GetError() []byte {
	if x, ok := m.GetResponse().(*RPCResponse_Error); ok {
		return x.Error
	}
	return nil
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*RPCResponse) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _RPCResponse_OneofMarshaler, _RPCResponse_OneofUnmarshaler, _RPCResponse_OneofSizer, []interface{}{
		(*RPCResponse_Result)(nil),
		(*RPCResponse_Error)(nil),
	}
}

func _RPCResponse_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*RPCResponse)
	// response
	switch x := m.Response.(type) {
	case *RPCResponse_Result:
		_ = b.EncodeVarint(1<<3 | proto.WireBytes)
		_ = b.EncodeRawBytes(x.Result)
	case *RPCResponse_Error:
		_ = b.EncodeVarint(2<<3 | proto.WireBytes)
		_ = b.EncodeRawBytes(x.Error)
	case nil:
	default:
		return fmt.Errorf("RPCResponse.Response has unexpected type %T", x)
	}
	return nil
}

func _RPCResponse_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*RPCResponse)
	switch tag {
	case 1: // response.Result
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		x, err := b.DecodeRawBytes(true)
		m.Response = &RPCResponse_Result{x}
		return true, err
	case 2: // response.Error
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		x, err := b.DecodeRawBytes(true)
		m.Response = &RPCResponse_Error{x}
		return true, err
	default:
		return false, nil
	}
}

func _RPCResponse_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*RPCResponse)
	// response
	switch x := m.Response.(type) {
	case *RPCResponse_Result:
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(len(x.Result)))
		n += len(x.Result)
	case *RPCResponse_Error:
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(len(x.Error)))
		n += len(x.Error)
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

type CascadeResponse struct {
	// Types that are valid to be assigned to Response:
	//	*CascadeResponse_Success
	//	*CascadeResponse_Error
	Response isCascadeResponse_Response `protobuf_oneof:"response"`
}

func (m *CascadeResponse) Reset()      { *m = CascadeResponse{} }
func (*CascadeResponse) ProtoMessage() {}
func (*CascadeResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_c34e17d86647303e, []int{18}
}
func (m *CascadeResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CascadeResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CascadeResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CascadeResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CascadeResponse.Merge(m, src)
}
func (m *CascadeResponse) XXX_Size() int {
	return m.Size()
}
func (m *CascadeResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_CascadeResponse.DiscardUnknown(m)
}

var xxx_messageInfo_CascadeResponse proto.InternalMessageInfo

type isCascadeResponse_Response interface {
	isCascadeResponse_Response()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}

type CascadeResponse_Success struct {
	Success bool `protobuf:"varint,1,opt,name=Success,proto3,oneof"`
}
type CascadeResponse_Error struct {
	Error []byte `protobuf:"bytes,2,opt,name=Error,proto3,oneof"`
}

func (*CascadeResponse_Success) isCascadeResponse_Response() {}
func (*CascadeResponse_Error) isCascadeResponse_Response()   {}

func (m *CascadeResponse) GetResponse() isCascadeResponse_Response {
	if m != nil {
		return m.Response
	}
	return nil
}

func (m *CascadeResponse) GetSuccess() bool {
	if x, ok := m.GetResponse().(*CascadeResponse_Success); ok {
		return x.Success
	}
	return false
}

func (m *CascadeResponse) GetError() []byte {
	if x, ok := m.GetResponse().(*CascadeResponse_Error); ok {
		return x.Error
	}
	return nil
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*CascadeResponse) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _CascadeResponse_OneofMarshaler, _CascadeResponse_OneofUnmarshaler, _CascadeResponse_OneofSizer, []interface{}{
		(*CascadeResponse_Success)(nil),
		(*CascadeResponse_Error)(nil),
	}
}

func _CascadeResponse_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*CascadeResponse)
	// response
	switch x := m.Response.(type) {
	case *CascadeResponse_Success:
		t := uint64(0)
		if x.Success {
			t = 1
		}
		_ = b.EncodeVarint(1<<3 | proto.WireVarint)
		_ = b.EncodeVarint(t)
	case *CascadeResponse_Error:
		_ = b.EncodeVarint(2<<3 | proto.WireBytes)
		_ = b.EncodeRawBytes(x.Error)
	case nil:
	default:
		return fmt.Errorf("CascadeResponse.Response has unexpected type %T", x)
	}
	return nil
}

func _CascadeResponse_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*CascadeResponse)
	switch tag {
	case 1: // response.Success
		if wire != proto.WireVarint {
			return true, proto.ErrInternalBadWireType
		}
		x, err := b.DecodeVarint()
		m.Response = &CascadeResponse_Success{x != 0}
		return true, err
	case 2: // response.Error
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		x, err := b.DecodeRawBytes(true)
		m.Response = &CascadeResponse_Error{x}
		return true, err
	default:
		return false, nil
	}
}

func _CascadeResponse_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*CascadeResponse)
	// response
	switch x := m.Response.(type) {
	case *CascadeResponse_Success:
		n += 1 // tag and wire
		n += 1
	case *CascadeResponse_Error:
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(len(x.Error)))
		n += len(x.Error)
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

type PulseResponse struct {
}

func (m *PulseResponse) Reset()      { *m = PulseResponse{} }
func (*PulseResponse) ProtoMessage() {}
func (*PulseResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_c34e17d86647303e, []int{19}
}
func (m *PulseResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PulseResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PulseResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PulseResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PulseResponse.Merge(m, src)
}
func (m *PulseResponse) XXX_Size() int {
	return m.Size()
}
func (m *PulseResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_PulseResponse.DiscardUnknown(m)
}

var xxx_messageInfo_PulseResponse proto.InternalMessageInfo

type BootstrapResponse struct {
}

func (m *BootstrapResponse) Reset()      { *m = BootstrapResponse{} }
func (*BootstrapResponse) ProtoMessage() {}
func (*BootstrapResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_c34e17d86647303e, []int{20}
}
func (m *BootstrapResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *BootstrapResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_BootstrapResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *BootstrapResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BootstrapResponse.Merge(m, src)
}
func (m *BootstrapResponse) XXX_Size() int {
	return m.Size()
}
func (m *BootstrapResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_BootstrapResponse.DiscardUnknown(m)
}

var xxx_messageInfo_BootstrapResponse proto.InternalMessageInfo

type AuthorizeResponse struct {
}

func (m *AuthorizeResponse) Reset()      { *m = AuthorizeResponse{} }
func (*AuthorizeResponse) ProtoMessage() {}
func (*AuthorizeResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_c34e17d86647303e, []int{21}
}
func (m *AuthorizeResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AuthorizeResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AuthorizeResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *AuthorizeResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AuthorizeResponse.Merge(m, src)
}
func (m *AuthorizeResponse) XXX_Size() int {
	return m.Size()
}
func (m *AuthorizeResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_AuthorizeResponse.DiscardUnknown(m)
}

var xxx_messageInfo_AuthorizeResponse proto.InternalMessageInfo

type RegisterResponse struct {
}

func (m *RegisterResponse) Reset()      { *m = RegisterResponse{} }
func (*RegisterResponse) ProtoMessage() {}
func (*RegisterResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_c34e17d86647303e, []int{22}
}
func (m *RegisterResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RegisterResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RegisterResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RegisterResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RegisterResponse.Merge(m, src)
}
func (m *RegisterResponse) XXX_Size() int {
	return m.Size()
}
func (m *RegisterResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_RegisterResponse.DiscardUnknown(m)
}

var xxx_messageInfo_RegisterResponse proto.InternalMessageInfo

type GenesisResponse struct {
}

func (m *GenesisResponse) Reset()      { *m = GenesisResponse{} }
func (*GenesisResponse) ProtoMessage() {}
func (*GenesisResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_c34e17d86647303e, []int{23}
}
func (m *GenesisResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GenesisResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GenesisResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GenesisResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GenesisResponse.Merge(m, src)
}
func (m *GenesisResponse) XXX_Size() int {
	return m.Size()
}
func (m *GenesisResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_GenesisResponse.DiscardUnknown(m)
}

var xxx_messageInfo_GenesisResponse proto.InternalMessageInfo

type Challenge1Response struct {
}

func (m *Challenge1Response) Reset()      { *m = Challenge1Response{} }
func (*Challenge1Response) ProtoMessage() {}
func (*Challenge1Response) Descriptor() ([]byte, []int) {
	return fileDescriptor_c34e17d86647303e, []int{24}
}
func (m *Challenge1Response) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Challenge1Response) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Challenge1Response.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Challenge1Response) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Challenge1Response.Merge(m, src)
}
func (m *Challenge1Response) XXX_Size() int {
	return m.Size()
}
func (m *Challenge1Response) XXX_DiscardUnknown() {
	xxx_messageInfo_Challenge1Response.DiscardUnknown(m)
}

var xxx_messageInfo_Challenge1Response proto.InternalMessageInfo

type Challenge2Response struct {
}

func (m *Challenge2Response) Reset()      { *m = Challenge2Response{} }
func (*Challenge2Response) ProtoMessage() {}
func (*Challenge2Response) Descriptor() ([]byte, []int) {
	return fileDescriptor_c34e17d86647303e, []int{25}
}
func (m *Challenge2Response) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Challenge2Response) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Challenge2Response.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Challenge2Response) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Challenge2Response.Merge(m, src)
}
func (m *Challenge2Response) XXX_Size() int {
	return m.Size()
}
func (m *Challenge2Response) XXX_DiscardUnknown() {
	xxx_messageInfo_Challenge2Response.DiscardUnknown(m)
}

var xxx_messageInfo_Challenge2Response proto.InternalMessageInfo

type DisconnectResponse struct {
}

func (m *DisconnectResponse) Reset()      { *m = DisconnectResponse{} }
func (*DisconnectResponse) ProtoMessage() {}
func (*DisconnectResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_c34e17d86647303e, []int{26}
}
func (m *DisconnectResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DisconnectResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DisconnectResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DisconnectResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DisconnectResponse.Merge(m, src)
}
func (m *DisconnectResponse) XXX_Size() int {
	return m.Size()
}
func (m *DisconnectResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_DisconnectResponse.DiscardUnknown(m)
}

var xxx_messageInfo_DisconnectResponse proto.InternalMessageInfo

func init() {
	proto.RegisterType((*Address)(nil), "types.Address")
	proto.RegisterType((*Host)(nil), "types.Host")
	proto.RegisterType((*PacketBackend)(nil), "types.PacketBackend")
	proto.RegisterType((*Request)(nil), "types.Request")
	proto.RegisterType((*Response)(nil), "types.Response")
	proto.RegisterType((*Ping)(nil), "types.Ping")
	proto.RegisterType((*RPCRequest)(nil), "types.RPCRequest")
	proto.RegisterType((*Cascade)(nil), "types.Cascade")
	proto.RegisterType((*CascadeRequest)(nil), "types.CascadeRequest")
	proto.RegisterType((*PulseRequest)(nil), "types.PulseRequest")
	proto.RegisterType((*BootstrapRequest)(nil), "types.BootstrapRequest")
	proto.RegisterType((*AuthorizeRequest)(nil), "types.AuthorizeRequest")
	proto.RegisterType((*RegisterRequest)(nil), "types.RegisterRequest")
	proto.RegisterType((*GenesisRequest)(nil), "types.GenesisRequest")
	proto.RegisterType((*Challenge1Request)(nil), "types.Challenge1Request")
	proto.RegisterType((*Challenge2Request)(nil), "types.Challenge2Request")
	proto.RegisterType((*DisconnectRequest)(nil), "types.DisconnectRequest")
	proto.RegisterType((*RPCResponse)(nil), "types.RPCResponse")
	proto.RegisterType((*CascadeResponse)(nil), "types.CascadeResponse")
	proto.RegisterType((*PulseResponse)(nil), "types.PulseResponse")
	proto.RegisterType((*BootstrapResponse)(nil), "types.BootstrapResponse")
	proto.RegisterType((*AuthorizeResponse)(nil), "types.AuthorizeResponse")
	proto.RegisterType((*RegisterResponse)(nil), "types.RegisterResponse")
	proto.RegisterType((*GenesisResponse)(nil), "types.GenesisResponse")
	proto.RegisterType((*Challenge1Response)(nil), "types.Challenge1Response")
	proto.RegisterType((*Challenge2Response)(nil), "types.Challenge2Response")
	proto.RegisterType((*DisconnectResponse)(nil), "types.DisconnectResponse")
}

func init() {
	proto.RegisterFile("network/hostnetwork/packet/packet_backend.proto", fileDescriptor_c34e17d86647303e)
}

var fileDescriptor_c34e17d86647303e = []byte{
	// 1002 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x8c, 0x56, 0xcf, 0x6f, 0xe3, 0x44,
	0x14, 0xb6, 0xdb, 0x34, 0x69, 0x5f, 0xda, 0x74, 0x3b, 0xbb, 0x64, 0xdd, 0x0a, 0x59, 0xc5, 0x2b,
	0xd8, 0x0a, 0x76, 0x1b, 0xad, 0x01, 0x6d, 0xc5, 0x72, 0xe9, 0x8f, 0x85, 0x54, 0x08, 0x14, 0x5c,
	0x4e, 0x5c, 0x90, 0x63, 0x0f, 0x89, 0xd5, 0xe0, 0x31, 0x33, 0x13, 0x50, 0x38, 0xf1, 0x27, 0xf0,
	0x67, 0xf0, 0xa7, 0xec, 0x05, 0xa9, 0xc7, 0xe5, 0x46, 0xd2, 0x0b, 0xc7, 0x3d, 0x22, 0x71, 0x41,
	0x33, 0x1e, 0x8f, 0x7f, 0x0a, 0xf5, 0xd2, 0xfa, 0x7d, 0xef, 0x7d, 0xf3, 0xe3, 0xe9, 0x7b, 0xdf,
	0x04, 0x06, 0x31, 0xe6, 0x3f, 0x13, 0x7a, 0x3d, 0x98, 0x12, 0xc6, 0xb3, 0xef, 0xc4, 0x0f, 0xae,
	0x31, 0x57, 0xff, 0xbe, 0x1b, 0x8b, 0x7f, 0x71, 0x78, 0x9c, 0x50, 0xc2, 0x09, 0xda, 0xe0, 0x8b,
	0x04, 0xb3, 0x83, 0xa7, 0x93, 0x88, 0x4f, 0xe7, 0xe3, 0xe3, 0x80, 0xfc, 0x30, 0x98, 0x90, 0x09,
	0x19, 0xc8, 0xec, 0x78, 0xfe, 0xbd, 0x8c, 0x64, 0x20, 0xbf, 0x52, 0xd6, 0xc1, 0x7e, 0x14, 0x33,
	0x32, 0xf3, 0xe9, 0x20, 0x99, 0xcf, 0x18, 0x4e, 0xff, 0xa6, 0x29, 0xe7, 0x14, 0x3a, 0xa7, 0x61,
	0x48, 0x31, 0x63, 0xa8, 0x07, 0x6b, 0x97, 0x23, 0xcb, 0x3c, 0x34, 0x8f, 0xb6, 0xbd, 0xb5, 0xcb,
	0x11, 0x42, 0xd0, 0x4a, 0x08, 0xe5, 0xd6, 0xda, 0xa1, 0x79, 0xb4, 0xe3, 0xc9, 0x6f, 0x81, 0x7d,
	0x4b, 0x62, 0x6c, 0xad, 0xcb, 0x2a, 0xf9, 0xed, 0x8c, 0xa1, 0x35, 0x24, 0x8c, 0xa3, 0x3e, 0xb4,
	0xbf, 0x22, 0x21, 0xbe, 0xbc, 0x50, 0x6b, 0xa8, 0x08, 0x59, 0xd0, 0xb9, 0x9a, 0x12, 0xca, 0x2f,
	0x2f, 0xd4, 0x52, 0x59, 0x88, 0x8e, 0xf4, 0xe6, 0x72, 0xc1, 0xae, 0xdb, 0x3b, 0x96, 0xf7, 0x3b,
	0x56, 0xa8, 0x97, 0xa5, 0x9d, 0x7f, 0x4d, 0xd8, 0x19, 0xc9, 0x86, 0x9c, 0xa5, 0xfd, 0x40, 0x8f,
	0xa0, 0x7d, 0x85, 0xe3, 0x10, 0x53, 0xb9, 0x5b, 0xd7, 0xed, 0x2a, 0xaa, 0x38, 0x8a, 0xa7, 0x52,
	0xe8, 0x31, 0x6c, 0x7a, 0x38, 0xc0, 0xd1, 0x4f, 0x98, 0xca, 0xbd, 0x2b, 0x65, 0x3a, 0x89, 0xde,
	0x86, 0x2d, 0x0f, 0xff, 0x38, 0xc7, 0x4c, 0x9c, 0x72, 0x5d, 0x9e, 0x32, 0x07, 0xc4, 0x0d, 0xbe,
	0xa1, 0x7e, 0x20, 0xae, 0xd6, 0x92, 0x57, 0xcb, 0x42, 0xf4, 0x3e, 0x74, 0x54, 0x99, 0xb5, 0x51,
	0xba, 0x81, 0x42, 0x87, 0x86, 0x97, 0x15, 0xa0, 0xa7, 0xe2, 0x30, 0x2c, 0x21, 0x31, 0xc3, 0x56,
	0x5b, 0x16, 0xef, 0xea, 0xe2, 0x14, 0x1e, 0x1a, 0x9e, 0x2e, 0x39, 0xdb, 0x82, 0x4e, 0xe2, 0x2f,
	0x66, 0xc4, 0x0f, 0x9d, 0x3f, 0x5a, 0x7a, 0x1b, 0xf4, 0x0e, 0xb4, 0x46, 0x51, 0x3c, 0xa9, 0xdc,
	0x5a, 0x40, 0x43, 0xc3, 0x93, 0x29, 0xf4, 0x2e, 0xac, 0x7b, 0xa3, 0x73, 0x75, 0xe1, 0xbd, 0x6c,
	0x8f, 0xd1, 0x79, 0x7e, 0x26, 0x91, 0x47, 0xcf, 0xa0, 0x73, 0xee, 0xb3, 0xc0, 0x0f, 0xb1, 0xea,
	0xfe, 0x5b, 0xaa, 0x54, 0xa1, 0x85, 0x2b, 0x28, 0x04, 0x7d, 0x00, 0x1b, 0x23, 0x21, 0x1e, 0xd9,
	0x86, 0xae, 0x7b, 0x3f, 0xdb, 0x5d, 0x60, 0x79, 0x79, 0x5a, 0x83, 0x9e, 0xc3, 0xd6, 0x19, 0x21,
	0x9c, 0x71, 0xea, 0x27, 0xaa, 0x3b, 0x0f, 0x15, 0x41, 0xe3, 0x39, 0x29, 0xaf, 0x15, 0xc4, 0xd3,
	0x39, 0x9f, 0x12, 0x1a, 0xfd, 0x92, 0x75, 0x2a, 0x23, 0x6a, 0xbc, 0x40, 0xd4, 0x18, 0xfa, 0x48,
	0x74, 0x78, 0x12, 0x31, 0x8e, 0xa9, 0xd5, 0x91, 0xbc, 0xbe, 0xee, 0x70, 0x0a, 0xe7, 0x34, 0x5d,
	0x29, 0xfa, 0xf0, 0x39, 0x8e, 0x31, 0x8b, 0x98, 0xb5, 0x59, 0xea, 0x83, 0x42, 0x0b, 0x7d, 0x50,
	0x08, 0xfa, 0x04, 0xe0, 0x7c, 0xea, 0xcf, 0x66, 0x38, 0x9e, 0xe0, 0x67, 0xd6, 0x96, 0x64, 0x59,
	0x59, 0xf7, 0x74, 0x22, 0x27, 0x16, 0xaa, 0x4b, 0x5c, 0xd7, 0x82, 0x66, 0xae, 0xdb, 0xc4, 0x75,
	0x05, 0xf7, 0x22, 0x62, 0x01, 0x89, 0x63, 0x1c, 0x70, 0xab, 0x5b, 0xe2, 0xe6, 0x89, 0x02, 0x37,
	0x07, 0x85, 0x9e, 0x68, 0x9a, 0x70, 0xfe, 0x6c, 0xe5, 0x52, 0xbc, 0x8b, 0xa0, 0xde, 0x2b, 0x0a,
	0x0a, 0x15, 0x05, 0xa5, 0x75, 0x2b, 0x15, 0xe5, 0x56, 0x15, 0xd5, 0xaf, 0x2a, 0x4a, 0xd7, 0x6b,
	0x49, 0x3d, 0x29, 0x4b, 0xea, 0x41, 0x59, 0x52, 0xba, 0x5e, 0x69, 0xea, 0xa4, 0xae, 0x29, 0xab,
	0xae, 0x29, 0xcd, 0x2a, 0x88, 0xea, 0xa4, 0x2e, 0x2a, 0xab, 0x2e, 0xaa, 0x9c, 0x99, 0xab, 0xea,
	0xe3, 0x9a, 0xaa, 0x1e, 0xd6, 0x54, 0x55, 0x9c, 0x5f, 0x25, 0x2b, 0xb7, 0x2a, 0xab, 0x7e, 0x55,
	0x56, 0x79, 0x33, 0x32, 0x5d, 0xbd, 0x68, 0xd0, 0xd5, 0x7e, 0x83, 0xae, 0x34, 0xb3, 0x28, 0xac,
	0x17, 0x0d, 0xc2, 0xda, 0x6f, 0x10, 0x56, 0x03, 0xd9, 0x15, 0xe4, 0x9a, 0xb2, 0xf6, 0x1b, 0x94,
	0x95, 0x93, 0x0b, 0xd2, 0x02, 0xd8, 0xa4, 0x2a, 0xe3, 0xb4, 0x53, 0x39, 0x39, 0x27, 0x00, 0xb9,
	0xe5, 0x88, 0xb7, 0xe1, 0x4b, 0xcc, 0xa7, 0x24, 0xcc, 0xde, 0x86, 0x34, 0x12, 0xef, 0xc9, 0x85,
	0xcf, 0x7d, 0x29, 0xad, 0x6d, 0x4f, 0x7e, 0x3b, 0xd7, 0x5a, 0x45, 0xc2, 0x78, 0xe5, 0x23, 0x12,
	0x32, 0xcb, 0x3c, 0x5c, 0x17, 0xc6, 0xab, 0x42, 0x91, 0x79, 0x19, 0x73, 0x4a, 0x92, 0x85, 0xe2,
	0x66, 0x21, 0x7a, 0x02, 0x7b, 0x1e, 0x4e, 0x66, 0x51, 0xe0, 0xf3, 0x88, 0xc4, 0x9f, 0xf9, 0x01,
	0x27, 0x54, 0x59, 0x7a, 0x3d, 0xe1, 0x2c, 0xa0, 0x57, 0xb6, 0xbb, 0xa2, 0xd9, 0x9b, 0x65, 0xb3,
	0x7f, 0xf4, 0xff, 0xbe, 0x9a, 0xce, 0xc0, 0x51, 0x75, 0x06, 0x7a, 0x95, 0x19, 0xc8, 0xd2, 0xce,
	0x73, 0xd8, 0x2e, 0x1a, 0x27, 0x7a, 0x9c, 0x4d, 0x82, 0xa9, 0x36, 0x48, 0xdf, 0x69, 0x89, 0x8d,
	0xc4, 0x63, 0xad, 0x86, 0xc0, 0x41, 0x70, 0xaf, 0x6a, 0xa0, 0x02, 0xab, 0x7a, 0xa3, 0xb3, 0x07,
	0xbb, 0x15, 0xdf, 0x73, 0xee, 0x41, 0xaf, 0xec, 0x6a, 0xce, 0x7d, 0xd8, 0xab, 0x39, 0x56, 0x09,
	0x74, 0x0b, 0x60, 0xcd, 0x63, 0x9c, 0x2f, 0xa0, 0x5b, 0x30, 0x02, 0x64, 0x41, 0xdb, 0xc3, 0x6c,
	0x3e, 0xe3, 0x69, 0xef, 0x86, 0x86, 0xa7, 0x62, 0xd4, 0x87, 0x8d, 0x97, 0x94, 0x92, 0xf4, 0x1d,
	0x16, 0x89, 0x34, 0x2c, 0x69, 0xe7, 0x6b, 0xd8, 0xad, 0x38, 0x05, 0x3a, 0x80, 0xce, 0xd5, 0x3c,
	0x08, 0xc4, 0x4f, 0x04, 0xb1, 0xe2, 0xa6, 0x98, 0x16, 0x05, 0xdc, 0x69, 0xc9, 0x5d, 0xd8, 0x29,
	0x59, 0x89, 0xb8, 0x45, 0xcd, 0x29, 0x04, 0x58, 0x33, 0x01, 0xd1, 0xd2, 0xea, 0x80, 0x8b, 0x96,
	0x56, 0xc6, 0xd7, 0x79, 0x00, 0xa8, 0x3e, 0x9a, 0x25, 0xd4, 0x2d, 0xa2, 0xf5, 0x61, 0x3a, 0xfb,
	0xf4, 0xd5, 0xd2, 0x36, 0x6e, 0x96, 0xb6, 0xf1, 0x7a, 0x69, 0x1b, 0x6f, 0x96, 0xb6, 0xf9, 0xcf,
	0xd2, 0x36, 0x7e, 0x5d, 0xd9, 0xe6, 0xef, 0x2b, 0xdb, 0x7c, 0xb5, 0xb2, 0xcd, 0x9b, 0x95, 0x6d,
	0xfe, 0xb5, 0xb2, 0xcd, 0xbf, 0x57, 0xb6, 0xf1, 0x66, 0x65, 0x9b, 0xbf, 0xdd, 0xda, 0xc6, 0xcd,
	0xad, 0x6d, 0xbc, 0xbe, 0xb5, 0x8d, 0x71, 0x5b, 0xfe, 0x90, 0xfb, 0xf0, 0xbf, 0x00, 0x00, 0x00,
	0xff, 0xff, 0x29, 0xa3, 0x3d, 0x8e, 0x4c, 0x0a, 0x00, 0x00,
}

func (this *Address) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Address)
	if !ok {
		that2, ok := that.(Address)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !bytes.Equal(this.IP, that1.IP) {
		return false
	}
	if this.Port != that1.Port {
		return false
	}
	if !bytes.Equal(this.Zone, that1.Zone) {
		return false
	}
	return true
}
func (this *Host) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Host)
	if !ok {
		that2, ok := that.(Host)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !bytes.Equal(this.NodeID, that1.NodeID) {
		return false
	}
	if this.ShortID != that1.ShortID {
		return false
	}
	if !this.Address.Equal(that1.Address) {
		return false
	}
	return true
}
func (this *PacketBackend) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*PacketBackend)
	if !ok {
		that2, ok := that.(PacketBackend)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Sender.Equal(that1.Sender) {
		return false
	}
	if !this.Receiver.Equal(that1.Receiver) {
		return false
	}
	if this.RequestID != that1.RequestID {
		return false
	}
	if !bytes.Equal(this.TraceID, that1.TraceID) {
		return false
	}
	if that1.Payload == nil {
		if this.Payload != nil {
			return false
		}
	} else if this.Payload == nil {
		return false
	} else if !this.Payload.Equal(that1.Payload) {
		return false
	}
	return true
}
func (this *PacketBackend_Request) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*PacketBackend_Request)
	if !ok {
		that2, ok := that.(PacketBackend_Request)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Request.Equal(that1.Request) {
		return false
	}
	return true
}
func (this *PacketBackend_Response) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*PacketBackend_Response)
	if !ok {
		that2, ok := that.(PacketBackend_Response)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Response.Equal(that1.Response) {
		return false
	}
	return true
}
func (this *Request) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Request)
	if !ok {
		that2, ok := that.(Request)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if that1.Request == nil {
		if this.Request != nil {
			return false
		}
	} else if this.Request == nil {
		return false
	} else if !this.Request.Equal(that1.Request) {
		return false
	}
	return true
}
func (this *Request_Ping) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Request_Ping)
	if !ok {
		that2, ok := that.(Request_Ping)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Ping.Equal(that1.Ping) {
		return false
	}
	return true
}
func (this *Request_RPC) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Request_RPC)
	if !ok {
		that2, ok := that.(Request_RPC)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.RPC.Equal(that1.RPC) {
		return false
	}
	return true
}
func (this *Request_Cascade) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Request_Cascade)
	if !ok {
		that2, ok := that.(Request_Cascade)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Cascade.Equal(that1.Cascade) {
		return false
	}
	return true
}
func (this *Request_Pulse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Request_Pulse)
	if !ok {
		that2, ok := that.(Request_Pulse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Pulse.Equal(that1.Pulse) {
		return false
	}
	return true
}
func (this *Request_Bootstrap) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Request_Bootstrap)
	if !ok {
		that2, ok := that.(Request_Bootstrap)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Bootstrap.Equal(that1.Bootstrap) {
		return false
	}
	return true
}
func (this *Request_Authorize) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Request_Authorize)
	if !ok {
		that2, ok := that.(Request_Authorize)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Authorize.Equal(that1.Authorize) {
		return false
	}
	return true
}
func (this *Request_Register) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Request_Register)
	if !ok {
		that2, ok := that.(Request_Register)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Register.Equal(that1.Register) {
		return false
	}
	return true
}
func (this *Request_Genesis) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Request_Genesis)
	if !ok {
		that2, ok := that.(Request_Genesis)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Genesis.Equal(that1.Genesis) {
		return false
	}
	return true
}
func (this *Request_Challenge1) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Request_Challenge1)
	if !ok {
		that2, ok := that.(Request_Challenge1)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Challenge1.Equal(that1.Challenge1) {
		return false
	}
	return true
}
func (this *Request_Challenge2) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Request_Challenge2)
	if !ok {
		that2, ok := that.(Request_Challenge2)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Challenge2.Equal(that1.Challenge2) {
		return false
	}
	return true
}
func (this *Request_Disconnect) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Request_Disconnect)
	if !ok {
		that2, ok := that.(Request_Disconnect)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Disconnect.Equal(that1.Disconnect) {
		return false
	}
	return true
}
func (this *Response) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Response)
	if !ok {
		that2, ok := that.(Response)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if that1.Response == nil {
		if this.Response != nil {
			return false
		}
	} else if this.Response == nil {
		return false
	} else if !this.Response.Equal(that1.Response) {
		return false
	}
	return true
}
func (this *Response_Ping) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Response_Ping)
	if !ok {
		that2, ok := that.(Response_Ping)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Ping.Equal(that1.Ping) {
		return false
	}
	return true
}
func (this *Response_RPC) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Response_RPC)
	if !ok {
		that2, ok := that.(Response_RPC)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.RPC.Equal(that1.RPC) {
		return false
	}
	return true
}
func (this *Response_Cascade) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Response_Cascade)
	if !ok {
		that2, ok := that.(Response_Cascade)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Cascade.Equal(that1.Cascade) {
		return false
	}
	return true
}
func (this *Response_Pulse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Response_Pulse)
	if !ok {
		that2, ok := that.(Response_Pulse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Pulse.Equal(that1.Pulse) {
		return false
	}
	return true
}
func (this *Response_Bootstrap) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Response_Bootstrap)
	if !ok {
		that2, ok := that.(Response_Bootstrap)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Bootstrap.Equal(that1.Bootstrap) {
		return false
	}
	return true
}
func (this *Response_Authorize) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Response_Authorize)
	if !ok {
		that2, ok := that.(Response_Authorize)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Authorize.Equal(that1.Authorize) {
		return false
	}
	return true
}
func (this *Response_Register) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Response_Register)
	if !ok {
		that2, ok := that.(Response_Register)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Register.Equal(that1.Register) {
		return false
	}
	return true
}
func (this *Response_Genesis) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Response_Genesis)
	if !ok {
		that2, ok := that.(Response_Genesis)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Genesis.Equal(that1.Genesis) {
		return false
	}
	return true
}
func (this *Response_Challenge1) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Response_Challenge1)
	if !ok {
		that2, ok := that.(Response_Challenge1)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Challenge1.Equal(that1.Challenge1) {
		return false
	}
	return true
}
func (this *Response_Challenge2) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Response_Challenge2)
	if !ok {
		that2, ok := that.(Response_Challenge2)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Challenge2.Equal(that1.Challenge2) {
		return false
	}
	return true
}
func (this *Response_Disconnect) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Response_Disconnect)
	if !ok {
		that2, ok := that.(Response_Disconnect)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Disconnect.Equal(that1.Disconnect) {
		return false
	}
	return true
}
func (this *Ping) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Ping)
	if !ok {
		that2, ok := that.(Ping)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	return true
}
func (this *RPCRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*RPCRequest)
	if !ok {
		that2, ok := that.(RPCRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !bytes.Equal(this.Method, that1.Method) {
		return false
	}
	if !bytes.Equal(this.Data, that1.Data) {
		return false
	}
	return true
}
func (this *Cascade) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Cascade)
	if !ok {
		that2, ok := that.(Cascade)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.NodeIds) != len(that1.NodeIds) {
		return false
	}
	for i := range this.NodeIds {
		if !bytes.Equal(this.NodeIds[i], that1.NodeIds[i]) {
			return false
		}
	}
	if !bytes.Equal(this.Entropy, that1.Entropy) {
		return false
	}
	if this.ReplicationFactor != that1.ReplicationFactor {
		return false
	}
	return true
}
func (this *CascadeRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*CascadeRequest)
	if !ok {
		that2, ok := that.(CascadeRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !bytes.Equal(this.TraceID, that1.TraceID) {
		return false
	}
	if !this.RPC.Equal(that1.RPC) {
		return false
	}
	if !this.Cascade.Equal(that1.Cascade) {
		return false
	}
	return true
}
func (this *PulseRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*PulseRequest)
	if !ok {
		that2, ok := that.(PulseRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Pulse.Equal(that1.Pulse) {
		return false
	}
	return true
}
func (this *BootstrapRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*BootstrapRequest)
	if !ok {
		that2, ok := that.(BootstrapRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	return true
}
func (this *AuthorizeRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*AuthorizeRequest)
	if !ok {
		that2, ok := that.(AuthorizeRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	return true
}
func (this *RegisterRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*RegisterRequest)
	if !ok {
		that2, ok := that.(RegisterRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	return true
}
func (this *GenesisRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GenesisRequest)
	if !ok {
		that2, ok := that.(GenesisRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	return true
}
func (this *Challenge1Request) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Challenge1Request)
	if !ok {
		that2, ok := that.(Challenge1Request)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	return true
}
func (this *Challenge2Request) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Challenge2Request)
	if !ok {
		that2, ok := that.(Challenge2Request)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	return true
}
func (this *DisconnectRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*DisconnectRequest)
	if !ok {
		that2, ok := that.(DisconnectRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	return true
}
func (this *RPCResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*RPCResponse)
	if !ok {
		that2, ok := that.(RPCResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if that1.Response == nil {
		if this.Response != nil {
			return false
		}
	} else if this.Response == nil {
		return false
	} else if !this.Response.Equal(that1.Response) {
		return false
	}
	return true
}
func (this *RPCResponse_Result) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*RPCResponse_Result)
	if !ok {
		that2, ok := that.(RPCResponse_Result)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !bytes.Equal(this.Result, that1.Result) {
		return false
	}
	return true
}
func (this *RPCResponse_Error) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*RPCResponse_Error)
	if !ok {
		that2, ok := that.(RPCResponse_Error)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !bytes.Equal(this.Error, that1.Error) {
		return false
	}
	return true
}
func (this *CascadeResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*CascadeResponse)
	if !ok {
		that2, ok := that.(CascadeResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if that1.Response == nil {
		if this.Response != nil {
			return false
		}
	} else if this.Response == nil {
		return false
	} else if !this.Response.Equal(that1.Response) {
		return false
	}
	return true
}
func (this *CascadeResponse_Success) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*CascadeResponse_Success)
	if !ok {
		that2, ok := that.(CascadeResponse_Success)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Success != that1.Success {
		return false
	}
	return true
}
func (this *CascadeResponse_Error) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*CascadeResponse_Error)
	if !ok {
		that2, ok := that.(CascadeResponse_Error)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !bytes.Equal(this.Error, that1.Error) {
		return false
	}
	return true
}
func (this *PulseResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*PulseResponse)
	if !ok {
		that2, ok := that.(PulseResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	return true
}
func (this *BootstrapResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*BootstrapResponse)
	if !ok {
		that2, ok := that.(BootstrapResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	return true
}
func (this *AuthorizeResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*AuthorizeResponse)
	if !ok {
		that2, ok := that.(AuthorizeResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	return true
}
func (this *RegisterResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*RegisterResponse)
	if !ok {
		that2, ok := that.(RegisterResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	return true
}
func (this *GenesisResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GenesisResponse)
	if !ok {
		that2, ok := that.(GenesisResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	return true
}
func (this *Challenge1Response) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Challenge1Response)
	if !ok {
		that2, ok := that.(Challenge1Response)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	return true
}
func (this *Challenge2Response) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Challenge2Response)
	if !ok {
		that2, ok := that.(Challenge2Response)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	return true
}
func (this *DisconnectResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*DisconnectResponse)
	if !ok {
		that2, ok := that.(DisconnectResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	return true
}
func (this *Address) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&types.Address{")
	s = append(s, "IP: "+fmt.Sprintf("%#v", this.IP)+",\n")
	s = append(s, "Port: "+fmt.Sprintf("%#v", this.Port)+",\n")
	s = append(s, "Zone: "+fmt.Sprintf("%#v", this.Zone)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *Host) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&types.Host{")
	s = append(s, "NodeID: "+fmt.Sprintf("%#v", this.NodeID)+",\n")
	s = append(s, "ShortID: "+fmt.Sprintf("%#v", this.ShortID)+",\n")
	if this.Address != nil {
		s = append(s, "Address: "+fmt.Sprintf("%#v", this.Address)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *PacketBackend) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 10)
	s = append(s, "&types.PacketBackend{")
	if this.Sender != nil {
		s = append(s, "Sender: "+fmt.Sprintf("%#v", this.Sender)+",\n")
	}
	if this.Receiver != nil {
		s = append(s, "Receiver: "+fmt.Sprintf("%#v", this.Receiver)+",\n")
	}
	s = append(s, "RequestID: "+fmt.Sprintf("%#v", this.RequestID)+",\n")
	s = append(s, "TraceID: "+fmt.Sprintf("%#v", this.TraceID)+",\n")
	if this.Payload != nil {
		s = append(s, "Payload: "+fmt.Sprintf("%#v", this.Payload)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *PacketBackend_Request) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&types.PacketBackend_Request{` +
		`Request:` + fmt.Sprintf("%#v", this.Request) + `}`}, ", ")
	return s
}
func (this *PacketBackend_Response) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&types.PacketBackend_Response{` +
		`Response:` + fmt.Sprintf("%#v", this.Response) + `}`}, ", ")
	return s
}
func (this *Request) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 15)
	s = append(s, "&types.Request{")
	if this.Request != nil {
		s = append(s, "Request: "+fmt.Sprintf("%#v", this.Request)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *Request_Ping) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&types.Request_Ping{` +
		`Ping:` + fmt.Sprintf("%#v", this.Ping) + `}`}, ", ")
	return s
}
func (this *Request_RPC) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&types.Request_RPC{` +
		`RPC:` + fmt.Sprintf("%#v", this.RPC) + `}`}, ", ")
	return s
}
func (this *Request_Cascade) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&types.Request_Cascade{` +
		`Cascade:` + fmt.Sprintf("%#v", this.Cascade) + `}`}, ", ")
	return s
}
func (this *Request_Pulse) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&types.Request_Pulse{` +
		`Pulse:` + fmt.Sprintf("%#v", this.Pulse) + `}`}, ", ")
	return s
}
func (this *Request_Bootstrap) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&types.Request_Bootstrap{` +
		`Bootstrap:` + fmt.Sprintf("%#v", this.Bootstrap) + `}`}, ", ")
	return s
}
func (this *Request_Authorize) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&types.Request_Authorize{` +
		`Authorize:` + fmt.Sprintf("%#v", this.Authorize) + `}`}, ", ")
	return s
}
func (this *Request_Register) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&types.Request_Register{` +
		`Register:` + fmt.Sprintf("%#v", this.Register) + `}`}, ", ")
	return s
}
func (this *Request_Genesis) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&types.Request_Genesis{` +
		`Genesis:` + fmt.Sprintf("%#v", this.Genesis) + `}`}, ", ")
	return s
}
func (this *Request_Challenge1) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&types.Request_Challenge1{` +
		`Challenge1:` + fmt.Sprintf("%#v", this.Challenge1) + `}`}, ", ")
	return s
}
func (this *Request_Challenge2) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&types.Request_Challenge2{` +
		`Challenge2:` + fmt.Sprintf("%#v", this.Challenge2) + `}`}, ", ")
	return s
}
func (this *Request_Disconnect) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&types.Request_Disconnect{` +
		`Disconnect:` + fmt.Sprintf("%#v", this.Disconnect) + `}`}, ", ")
	return s
}
func (this *Response) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 15)
	s = append(s, "&types.Response{")
	if this.Response != nil {
		s = append(s, "Response: "+fmt.Sprintf("%#v", this.Response)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *Response_Ping) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&types.Response_Ping{` +
		`Ping:` + fmt.Sprintf("%#v", this.Ping) + `}`}, ", ")
	return s
}
func (this *Response_RPC) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&types.Response_RPC{` +
		`RPC:` + fmt.Sprintf("%#v", this.RPC) + `}`}, ", ")
	return s
}
func (this *Response_Cascade) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&types.Response_Cascade{` +
		`Cascade:` + fmt.Sprintf("%#v", this.Cascade) + `}`}, ", ")
	return s
}
func (this *Response_Pulse) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&types.Response_Pulse{` +
		`Pulse:` + fmt.Sprintf("%#v", this.Pulse) + `}`}, ", ")
	return s
}
func (this *Response_Bootstrap) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&types.Response_Bootstrap{` +
		`Bootstrap:` + fmt.Sprintf("%#v", this.Bootstrap) + `}`}, ", ")
	return s
}
func (this *Response_Authorize) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&types.Response_Authorize{` +
		`Authorize:` + fmt.Sprintf("%#v", this.Authorize) + `}`}, ", ")
	return s
}
func (this *Response_Register) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&types.Response_Register{` +
		`Register:` + fmt.Sprintf("%#v", this.Register) + `}`}, ", ")
	return s
}
func (this *Response_Genesis) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&types.Response_Genesis{` +
		`Genesis:` + fmt.Sprintf("%#v", this.Genesis) + `}`}, ", ")
	return s
}
func (this *Response_Challenge1) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&types.Response_Challenge1{` +
		`Challenge1:` + fmt.Sprintf("%#v", this.Challenge1) + `}`}, ", ")
	return s
}
func (this *Response_Challenge2) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&types.Response_Challenge2{` +
		`Challenge2:` + fmt.Sprintf("%#v", this.Challenge2) + `}`}, ", ")
	return s
}
func (this *Response_Disconnect) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&types.Response_Disconnect{` +
		`Disconnect:` + fmt.Sprintf("%#v", this.Disconnect) + `}`}, ", ")
	return s
}
func (this *Ping) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 4)
	s = append(s, "&types.Ping{")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *RPCRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&types.RPCRequest{")
	s = append(s, "Method: "+fmt.Sprintf("%#v", this.Method)+",\n")
	s = append(s, "Data: "+fmt.Sprintf("%#v", this.Data)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *Cascade) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&types.Cascade{")
	s = append(s, "NodeIds: "+fmt.Sprintf("%#v", this.NodeIds)+",\n")
	s = append(s, "Entropy: "+fmt.Sprintf("%#v", this.Entropy)+",\n")
	s = append(s, "ReplicationFactor: "+fmt.Sprintf("%#v", this.ReplicationFactor)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *CascadeRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&types.CascadeRequest{")
	s = append(s, "TraceID: "+fmt.Sprintf("%#v", this.TraceID)+",\n")
	if this.RPC != nil {
		s = append(s, "RPC: "+fmt.Sprintf("%#v", this.RPC)+",\n")
	}
	if this.Cascade != nil {
		s = append(s, "Cascade: "+fmt.Sprintf("%#v", this.Cascade)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *PulseRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&types.PulseRequest{")
	if this.Pulse != nil {
		s = append(s, "Pulse: "+fmt.Sprintf("%#v", this.Pulse)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *BootstrapRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 4)
	s = append(s, "&types.BootstrapRequest{")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *AuthorizeRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 4)
	s = append(s, "&types.AuthorizeRequest{")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *RegisterRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 4)
	s = append(s, "&types.RegisterRequest{")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *GenesisRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 4)
	s = append(s, "&types.GenesisRequest{")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *Challenge1Request) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 4)
	s = append(s, "&types.Challenge1Request{")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *Challenge2Request) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 4)
	s = append(s, "&types.Challenge2Request{")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *DisconnectRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 4)
	s = append(s, "&types.DisconnectRequest{")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *RPCResponse) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&types.RPCResponse{")
	if this.Response != nil {
		s = append(s, "Response: "+fmt.Sprintf("%#v", this.Response)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *RPCResponse_Result) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&types.RPCResponse_Result{` +
		`Result:` + fmt.Sprintf("%#v", this.Result) + `}`}, ", ")
	return s
}
func (this *RPCResponse_Error) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&types.RPCResponse_Error{` +
		`Error:` + fmt.Sprintf("%#v", this.Error) + `}`}, ", ")
	return s
}
func (this *CascadeResponse) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&types.CascadeResponse{")
	if this.Response != nil {
		s = append(s, "Response: "+fmt.Sprintf("%#v", this.Response)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *CascadeResponse_Success) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&types.CascadeResponse_Success{` +
		`Success:` + fmt.Sprintf("%#v", this.Success) + `}`}, ", ")
	return s
}
func (this *CascadeResponse_Error) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&types.CascadeResponse_Error{` +
		`Error:` + fmt.Sprintf("%#v", this.Error) + `}`}, ", ")
	return s
}
func (this *PulseResponse) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 4)
	s = append(s, "&types.PulseResponse{")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *BootstrapResponse) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 4)
	s = append(s, "&types.BootstrapResponse{")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *AuthorizeResponse) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 4)
	s = append(s, "&types.AuthorizeResponse{")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *RegisterResponse) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 4)
	s = append(s, "&types.RegisterResponse{")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *GenesisResponse) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 4)
	s = append(s, "&types.GenesisResponse{")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *Challenge1Response) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 4)
	s = append(s, "&types.Challenge1Response{")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *Challenge2Response) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 4)
	s = append(s, "&types.Challenge2Response{")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *DisconnectResponse) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 4)
	s = append(s, "&types.DisconnectResponse{")
	s = append(s, "}")
	return strings.Join(s, "")
}
func valueToGoStringPacketBackend(v interface{}, typ string) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("func(v %v) *%v { return &v } ( %#v )", typ, typ, pv)
}
func (m *Address) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Address) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.IP) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintPacketBackend(dAtA, i, uint64(len(m.IP)))
		i += copy(dAtA[i:], m.IP)
	}
	if m.Port != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintPacketBackend(dAtA, i, uint64(m.Port))
	}
	if len(m.Zone) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintPacketBackend(dAtA, i, uint64(len(m.Zone)))
		i += copy(dAtA[i:], m.Zone)
	}
	return i, nil
}

func (m *Host) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Host) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.NodeID) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintPacketBackend(dAtA, i, uint64(len(m.NodeID)))
		i += copy(dAtA[i:], m.NodeID)
	}
	if m.ShortID != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintPacketBackend(dAtA, i, uint64(m.ShortID))
	}
	if m.Address != nil {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintPacketBackend(dAtA, i, uint64(m.Address.Size()))
		n1, err := m.Address.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n1
	}
	return i, nil
}

func (m *PacketBackend) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PacketBackend) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Sender != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintPacketBackend(dAtA, i, uint64(m.Sender.Size()))
		n2, err := m.Sender.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n2
	}
	if m.Receiver != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintPacketBackend(dAtA, i, uint64(m.Receiver.Size()))
		n3, err := m.Receiver.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n3
	}
	if m.RequestID != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintPacketBackend(dAtA, i, uint64(m.RequestID))
	}
	if len(m.TraceID) > 0 {
		dAtA[i] = 0x22
		i++
		i = encodeVarintPacketBackend(dAtA, i, uint64(len(m.TraceID)))
		i += copy(dAtA[i:], m.TraceID)
	}
	if m.Payload != nil {
		nn4, err := m.Payload.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += nn4
	}
	return i, nil
}

func (m *PacketBackend_Request) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.Request != nil {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintPacketBackend(dAtA, i, uint64(m.Request.Size()))
		n5, err := m.Request.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n5
	}
	return i, nil
}
func (m *PacketBackend_Response) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.Response != nil {
		dAtA[i] = 0x32
		i++
		i = encodeVarintPacketBackend(dAtA, i, uint64(m.Response.Size()))
		n6, err := m.Response.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n6
	}
	return i, nil
}
func (m *Request) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Request) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Request != nil {
		nn7, err := m.Request.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += nn7
	}
	return i, nil
}

func (m *Request_Ping) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.Ping != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintPacketBackend(dAtA, i, uint64(m.Ping.Size()))
		n8, err := m.Ping.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n8
	}
	return i, nil
}
func (m *Request_RPC) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.RPC != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintPacketBackend(dAtA, i, uint64(m.RPC.Size()))
		n9, err := m.RPC.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n9
	}
	return i, nil
}
func (m *Request_Cascade) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.Cascade != nil {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintPacketBackend(dAtA, i, uint64(m.Cascade.Size()))
		n10, err := m.Cascade.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n10
	}
	return i, nil
}
func (m *Request_Pulse) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.Pulse != nil {
		dAtA[i] = 0x22
		i++
		i = encodeVarintPacketBackend(dAtA, i, uint64(m.Pulse.Size()))
		n11, err := m.Pulse.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n11
	}
	return i, nil
}
func (m *Request_Bootstrap) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.Bootstrap != nil {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintPacketBackend(dAtA, i, uint64(m.Bootstrap.Size()))
		n12, err := m.Bootstrap.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n12
	}
	return i, nil
}
func (m *Request_Authorize) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.Authorize != nil {
		dAtA[i] = 0x32
		i++
		i = encodeVarintPacketBackend(dAtA, i, uint64(m.Authorize.Size()))
		n13, err := m.Authorize.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n13
	}
	return i, nil
}
func (m *Request_Register) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.Register != nil {
		dAtA[i] = 0x3a
		i++
		i = encodeVarintPacketBackend(dAtA, i, uint64(m.Register.Size()))
		n14, err := m.Register.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n14
	}
	return i, nil
}
func (m *Request_Genesis) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.Genesis != nil {
		dAtA[i] = 0x42
		i++
		i = encodeVarintPacketBackend(dAtA, i, uint64(m.Genesis.Size()))
		n15, err := m.Genesis.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n15
	}
	return i, nil
}
func (m *Request_Challenge1) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.Challenge1 != nil {
		dAtA[i] = 0x4a
		i++
		i = encodeVarintPacketBackend(dAtA, i, uint64(m.Challenge1.Size()))
		n16, err := m.Challenge1.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n16
	}
	return i, nil
}
func (m *Request_Challenge2) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.Challenge2 != nil {
		dAtA[i] = 0x52
		i++
		i = encodeVarintPacketBackend(dAtA, i, uint64(m.Challenge2.Size()))
		n17, err := m.Challenge2.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n17
	}
	return i, nil
}
func (m *Request_Disconnect) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.Disconnect != nil {
		dAtA[i] = 0x5a
		i++
		i = encodeVarintPacketBackend(dAtA, i, uint64(m.Disconnect.Size()))
		n18, err := m.Disconnect.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n18
	}
	return i, nil
}
func (m *Response) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Response) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Response != nil {
		nn19, err := m.Response.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += nn19
	}
	return i, nil
}

func (m *Response_Ping) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.Ping != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintPacketBackend(dAtA, i, uint64(m.Ping.Size()))
		n20, err := m.Ping.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n20
	}
	return i, nil
}
func (m *Response_RPC) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.RPC != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintPacketBackend(dAtA, i, uint64(m.RPC.Size()))
		n21, err := m.RPC.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n21
	}
	return i, nil
}
func (m *Response_Cascade) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.Cascade != nil {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintPacketBackend(dAtA, i, uint64(m.Cascade.Size()))
		n22, err := m.Cascade.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n22
	}
	return i, nil
}
func (m *Response_Pulse) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.Pulse != nil {
		dAtA[i] = 0x22
		i++
		i = encodeVarintPacketBackend(dAtA, i, uint64(m.Pulse.Size()))
		n23, err := m.Pulse.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n23
	}
	return i, nil
}
func (m *Response_Bootstrap) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.Bootstrap != nil {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintPacketBackend(dAtA, i, uint64(m.Bootstrap.Size()))
		n24, err := m.Bootstrap.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n24
	}
	return i, nil
}
func (m *Response_Authorize) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.Authorize != nil {
		dAtA[i] = 0x32
		i++
		i = encodeVarintPacketBackend(dAtA, i, uint64(m.Authorize.Size()))
		n25, err := m.Authorize.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n25
	}
	return i, nil
}
func (m *Response_Register) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.Register != nil {
		dAtA[i] = 0x3a
		i++
		i = encodeVarintPacketBackend(dAtA, i, uint64(m.Register.Size()))
		n26, err := m.Register.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n26
	}
	return i, nil
}
func (m *Response_Genesis) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.Genesis != nil {
		dAtA[i] = 0x42
		i++
		i = encodeVarintPacketBackend(dAtA, i, uint64(m.Genesis.Size()))
		n27, err := m.Genesis.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n27
	}
	return i, nil
}
func (m *Response_Challenge1) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.Challenge1 != nil {
		dAtA[i] = 0x4a
		i++
		i = encodeVarintPacketBackend(dAtA, i, uint64(m.Challenge1.Size()))
		n28, err := m.Challenge1.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n28
	}
	return i, nil
}
func (m *Response_Challenge2) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.Challenge2 != nil {
		dAtA[i] = 0x52
		i++
		i = encodeVarintPacketBackend(dAtA, i, uint64(m.Challenge2.Size()))
		n29, err := m.Challenge2.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n29
	}
	return i, nil
}
func (m *Response_Disconnect) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.Disconnect != nil {
		dAtA[i] = 0x5a
		i++
		i = encodeVarintPacketBackend(dAtA, i, uint64(m.Disconnect.Size()))
		n30, err := m.Disconnect.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n30
	}
	return i, nil
}
func (m *Ping) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Ping) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	return i, nil
}

func (m *RPCRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RPCRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Method) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintPacketBackend(dAtA, i, uint64(len(m.Method)))
		i += copy(dAtA[i:], m.Method)
	}
	if len(m.Data) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintPacketBackend(dAtA, i, uint64(len(m.Data)))
		i += copy(dAtA[i:], m.Data)
	}
	return i, nil
}

func (m *Cascade) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Cascade) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.NodeIds) > 0 {
		for _, b := range m.NodeIds {
			dAtA[i] = 0xa
			i++
			i = encodeVarintPacketBackend(dAtA, i, uint64(len(b)))
			i += copy(dAtA[i:], b)
		}
	}
	if len(m.Entropy) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintPacketBackend(dAtA, i, uint64(len(m.Entropy)))
		i += copy(dAtA[i:], m.Entropy)
	}
	if m.ReplicationFactor != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintPacketBackend(dAtA, i, uint64(m.ReplicationFactor))
	}
	return i, nil
}

func (m *CascadeRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CascadeRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.TraceID) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintPacketBackend(dAtA, i, uint64(len(m.TraceID)))
		i += copy(dAtA[i:], m.TraceID)
	}
	if m.RPC != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintPacketBackend(dAtA, i, uint64(m.RPC.Size()))
		n31, err := m.RPC.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n31
	}
	if m.Cascade != nil {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintPacketBackend(dAtA, i, uint64(m.Cascade.Size()))
		n32, err := m.Cascade.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n32
	}
	return i, nil
}

func (m *PulseRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PulseRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Pulse != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintPacketBackend(dAtA, i, uint64(m.Pulse.Size()))
		n33, err := m.Pulse.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n33
	}
	return i, nil
}

func (m *BootstrapRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BootstrapRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	return i, nil
}

func (m *AuthorizeRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AuthorizeRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	return i, nil
}

func (m *RegisterRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RegisterRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	return i, nil
}

func (m *GenesisRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GenesisRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	return i, nil
}

func (m *Challenge1Request) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Challenge1Request) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	return i, nil
}

func (m *Challenge2Request) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Challenge2Request) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	return i, nil
}

func (m *DisconnectRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DisconnectRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	return i, nil
}

func (m *RPCResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RPCResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Response != nil {
		nn34, err := m.Response.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += nn34
	}
	return i, nil
}

func (m *RPCResponse_Result) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.Result != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintPacketBackend(dAtA, i, uint64(len(m.Result)))
		i += copy(dAtA[i:], m.Result)
	}
	return i, nil
}
func (m *RPCResponse_Error) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.Error != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintPacketBackend(dAtA, i, uint64(len(m.Error)))
		i += copy(dAtA[i:], m.Error)
	}
	return i, nil
}
func (m *CascadeResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CascadeResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Response != nil {
		nn35, err := m.Response.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += nn35
	}
	return i, nil
}

func (m *CascadeResponse_Success) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	dAtA[i] = 0x8
	i++
	if m.Success {
		dAtA[i] = 1
	} else {
		dAtA[i] = 0
	}
	i++
	return i, nil
}
func (m *CascadeResponse_Error) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.Error != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintPacketBackend(dAtA, i, uint64(len(m.Error)))
		i += copy(dAtA[i:], m.Error)
	}
	return i, nil
}
func (m *PulseResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PulseResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	return i, nil
}

func (m *BootstrapResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BootstrapResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	return i, nil
}

func (m *AuthorizeResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AuthorizeResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	return i, nil
}

func (m *RegisterResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RegisterResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	return i, nil
}

func (m *GenesisResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GenesisResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	return i, nil
}

func (m *Challenge1Response) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Challenge1Response) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	return i, nil
}

func (m *Challenge2Response) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Challenge2Response) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	return i, nil
}

func (m *DisconnectResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DisconnectResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	return i, nil
}

func encodeVarintPacketBackend(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *Address) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.IP)
	if l > 0 {
		n += 1 + l + sovPacketBackend(uint64(l))
	}
	if m.Port != 0 {
		n += 1 + sovPacketBackend(uint64(m.Port))
	}
	l = len(m.Zone)
	if l > 0 {
		n += 1 + l + sovPacketBackend(uint64(l))
	}
	return n
}

func (m *Host) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.NodeID)
	if l > 0 {
		n += 1 + l + sovPacketBackend(uint64(l))
	}
	if m.ShortID != 0 {
		n += 1 + sovPacketBackend(uint64(m.ShortID))
	}
	if m.Address != nil {
		l = m.Address.Size()
		n += 1 + l + sovPacketBackend(uint64(l))
	}
	return n
}

func (m *PacketBackend) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Sender != nil {
		l = m.Sender.Size()
		n += 1 + l + sovPacketBackend(uint64(l))
	}
	if m.Receiver != nil {
		l = m.Receiver.Size()
		n += 1 + l + sovPacketBackend(uint64(l))
	}
	if m.RequestID != 0 {
		n += 1 + sovPacketBackend(uint64(m.RequestID))
	}
	l = len(m.TraceID)
	if l > 0 {
		n += 1 + l + sovPacketBackend(uint64(l))
	}
	if m.Payload != nil {
		n += m.Payload.Size()
	}
	return n
}

func (m *PacketBackend_Request) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Request != nil {
		l = m.Request.Size()
		n += 1 + l + sovPacketBackend(uint64(l))
	}
	return n
}
func (m *PacketBackend_Response) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Response != nil {
		l = m.Response.Size()
		n += 1 + l + sovPacketBackend(uint64(l))
	}
	return n
}
func (m *Request) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Request != nil {
		n += m.Request.Size()
	}
	return n
}

func (m *Request_Ping) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Ping != nil {
		l = m.Ping.Size()
		n += 1 + l + sovPacketBackend(uint64(l))
	}
	return n
}
func (m *Request_RPC) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.RPC != nil {
		l = m.RPC.Size()
		n += 1 + l + sovPacketBackend(uint64(l))
	}
	return n
}
func (m *Request_Cascade) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Cascade != nil {
		l = m.Cascade.Size()
		n += 1 + l + sovPacketBackend(uint64(l))
	}
	return n
}
func (m *Request_Pulse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Pulse != nil {
		l = m.Pulse.Size()
		n += 1 + l + sovPacketBackend(uint64(l))
	}
	return n
}
func (m *Request_Bootstrap) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Bootstrap != nil {
		l = m.Bootstrap.Size()
		n += 1 + l + sovPacketBackend(uint64(l))
	}
	return n
}
func (m *Request_Authorize) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Authorize != nil {
		l = m.Authorize.Size()
		n += 1 + l + sovPacketBackend(uint64(l))
	}
	return n
}
func (m *Request_Register) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Register != nil {
		l = m.Register.Size()
		n += 1 + l + sovPacketBackend(uint64(l))
	}
	return n
}
func (m *Request_Genesis) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Genesis != nil {
		l = m.Genesis.Size()
		n += 1 + l + sovPacketBackend(uint64(l))
	}
	return n
}
func (m *Request_Challenge1) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Challenge1 != nil {
		l = m.Challenge1.Size()
		n += 1 + l + sovPacketBackend(uint64(l))
	}
	return n
}
func (m *Request_Challenge2) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Challenge2 != nil {
		l = m.Challenge2.Size()
		n += 1 + l + sovPacketBackend(uint64(l))
	}
	return n
}
func (m *Request_Disconnect) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Disconnect != nil {
		l = m.Disconnect.Size()
		n += 1 + l + sovPacketBackend(uint64(l))
	}
	return n
}
func (m *Response) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Response != nil {
		n += m.Response.Size()
	}
	return n
}

func (m *Response_Ping) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Ping != nil {
		l = m.Ping.Size()
		n += 1 + l + sovPacketBackend(uint64(l))
	}
	return n
}
func (m *Response_RPC) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.RPC != nil {
		l = m.RPC.Size()
		n += 1 + l + sovPacketBackend(uint64(l))
	}
	return n
}
func (m *Response_Cascade) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Cascade != nil {
		l = m.Cascade.Size()
		n += 1 + l + sovPacketBackend(uint64(l))
	}
	return n
}
func (m *Response_Pulse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Pulse != nil {
		l = m.Pulse.Size()
		n += 1 + l + sovPacketBackend(uint64(l))
	}
	return n
}
func (m *Response_Bootstrap) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Bootstrap != nil {
		l = m.Bootstrap.Size()
		n += 1 + l + sovPacketBackend(uint64(l))
	}
	return n
}
func (m *Response_Authorize) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Authorize != nil {
		l = m.Authorize.Size()
		n += 1 + l + sovPacketBackend(uint64(l))
	}
	return n
}
func (m *Response_Register) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Register != nil {
		l = m.Register.Size()
		n += 1 + l + sovPacketBackend(uint64(l))
	}
	return n
}
func (m *Response_Genesis) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Genesis != nil {
		l = m.Genesis.Size()
		n += 1 + l + sovPacketBackend(uint64(l))
	}
	return n
}
func (m *Response_Challenge1) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Challenge1 != nil {
		l = m.Challenge1.Size()
		n += 1 + l + sovPacketBackend(uint64(l))
	}
	return n
}
func (m *Response_Challenge2) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Challenge2 != nil {
		l = m.Challenge2.Size()
		n += 1 + l + sovPacketBackend(uint64(l))
	}
	return n
}
func (m *Response_Disconnect) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Disconnect != nil {
		l = m.Disconnect.Size()
		n += 1 + l + sovPacketBackend(uint64(l))
	}
	return n
}
func (m *Ping) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *RPCRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Method)
	if l > 0 {
		n += 1 + l + sovPacketBackend(uint64(l))
	}
	l = len(m.Data)
	if l > 0 {
		n += 1 + l + sovPacketBackend(uint64(l))
	}
	return n
}

func (m *Cascade) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.NodeIds) > 0 {
		for _, b := range m.NodeIds {
			l = len(b)
			n += 1 + l + sovPacketBackend(uint64(l))
		}
	}
	l = len(m.Entropy)
	if l > 0 {
		n += 1 + l + sovPacketBackend(uint64(l))
	}
	if m.ReplicationFactor != 0 {
		n += 1 + sovPacketBackend(uint64(m.ReplicationFactor))
	}
	return n
}

func (m *CascadeRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.TraceID)
	if l > 0 {
		n += 1 + l + sovPacketBackend(uint64(l))
	}
	if m.RPC != nil {
		l = m.RPC.Size()
		n += 1 + l + sovPacketBackend(uint64(l))
	}
	if m.Cascade != nil {
		l = m.Cascade.Size()
		n += 1 + l + sovPacketBackend(uint64(l))
	}
	return n
}

func (m *PulseRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Pulse != nil {
		l = m.Pulse.Size()
		n += 1 + l + sovPacketBackend(uint64(l))
	}
	return n
}

func (m *BootstrapRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *AuthorizeRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *RegisterRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *GenesisRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *Challenge1Request) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *Challenge2Request) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *DisconnectRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *RPCResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Response != nil {
		n += m.Response.Size()
	}
	return n
}

func (m *RPCResponse_Result) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Result != nil {
		l = len(m.Result)
		n += 1 + l + sovPacketBackend(uint64(l))
	}
	return n
}
func (m *RPCResponse_Error) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Error != nil {
		l = len(m.Error)
		n += 1 + l + sovPacketBackend(uint64(l))
	}
	return n
}
func (m *CascadeResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Response != nil {
		n += m.Response.Size()
	}
	return n
}

func (m *CascadeResponse_Success) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	n += 2
	return n
}
func (m *CascadeResponse_Error) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Error != nil {
		l = len(m.Error)
		n += 1 + l + sovPacketBackend(uint64(l))
	}
	return n
}
func (m *PulseResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *BootstrapResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *AuthorizeResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *RegisterResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *GenesisResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *Challenge1Response) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *Challenge2Response) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *DisconnectResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func sovPacketBackend(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozPacketBackend(x uint64) (n int) {
	return sovPacketBackend(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (this *Address) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&Address{`,
		`IP:` + fmt.Sprintf("%v", this.IP) + `,`,
		`Port:` + fmt.Sprintf("%v", this.Port) + `,`,
		`Zone:` + fmt.Sprintf("%v", this.Zone) + `,`,
		`}`,
	}, "")
	return s
}
func (this *Host) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&Host{`,
		`NodeID:` + fmt.Sprintf("%v", this.NodeID) + `,`,
		`ShortID:` + fmt.Sprintf("%v", this.ShortID) + `,`,
		`Address:` + strings.Replace(fmt.Sprintf("%v", this.Address), "Address", "Address", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *PacketBackend) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&PacketBackend{`,
		`Sender:` + strings.Replace(fmt.Sprintf("%v", this.Sender), "Host", "Host", 1) + `,`,
		`Receiver:` + strings.Replace(fmt.Sprintf("%v", this.Receiver), "Host", "Host", 1) + `,`,
		`RequestID:` + fmt.Sprintf("%v", this.RequestID) + `,`,
		`TraceID:` + fmt.Sprintf("%v", this.TraceID) + `,`,
		`Payload:` + fmt.Sprintf("%v", this.Payload) + `,`,
		`}`,
	}, "")
	return s
}
func (this *PacketBackend_Request) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&PacketBackend_Request{`,
		`Request:` + strings.Replace(fmt.Sprintf("%v", this.Request), "Request", "Request", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *PacketBackend_Response) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&PacketBackend_Response{`,
		`Response:` + strings.Replace(fmt.Sprintf("%v", this.Response), "Response", "Response", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *Request) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&Request{`,
		`Request:` + fmt.Sprintf("%v", this.Request) + `,`,
		`}`,
	}, "")
	return s
}
func (this *Request_Ping) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&Request_Ping{`,
		`Ping:` + strings.Replace(fmt.Sprintf("%v", this.Ping), "Ping", "Ping", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *Request_RPC) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&Request_RPC{`,
		`RPC:` + strings.Replace(fmt.Sprintf("%v", this.RPC), "RPCRequest", "RPCRequest", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *Request_Cascade) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&Request_Cascade{`,
		`Cascade:` + strings.Replace(fmt.Sprintf("%v", this.Cascade), "CascadeRequest", "CascadeRequest", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *Request_Pulse) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&Request_Pulse{`,
		`Pulse:` + strings.Replace(fmt.Sprintf("%v", this.Pulse), "PulseRequest", "PulseRequest", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *Request_Bootstrap) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&Request_Bootstrap{`,
		`Bootstrap:` + strings.Replace(fmt.Sprintf("%v", this.Bootstrap), "BootstrapRequest", "BootstrapRequest", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *Request_Authorize) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&Request_Authorize{`,
		`Authorize:` + strings.Replace(fmt.Sprintf("%v", this.Authorize), "AuthorizeRequest", "AuthorizeRequest", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *Request_Register) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&Request_Register{`,
		`Register:` + strings.Replace(fmt.Sprintf("%v", this.Register), "RegisterRequest", "RegisterRequest", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *Request_Genesis) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&Request_Genesis{`,
		`Genesis:` + strings.Replace(fmt.Sprintf("%v", this.Genesis), "GenesisRequest", "GenesisRequest", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *Request_Challenge1) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&Request_Challenge1{`,
		`Challenge1:` + strings.Replace(fmt.Sprintf("%v", this.Challenge1), "Challenge1Request", "Challenge1Request", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *Request_Challenge2) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&Request_Challenge2{`,
		`Challenge2:` + strings.Replace(fmt.Sprintf("%v", this.Challenge2), "Challenge2Request", "Challenge2Request", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *Request_Disconnect) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&Request_Disconnect{`,
		`Disconnect:` + strings.Replace(fmt.Sprintf("%v", this.Disconnect), "DisconnectRequest", "DisconnectRequest", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *Response) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&Response{`,
		`Response:` + fmt.Sprintf("%v", this.Response) + `,`,
		`}`,
	}, "")
	return s
}
func (this *Response_Ping) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&Response_Ping{`,
		`Ping:` + strings.Replace(fmt.Sprintf("%v", this.Ping), "Ping", "Ping", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *Response_RPC) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&Response_RPC{`,
		`RPC:` + strings.Replace(fmt.Sprintf("%v", this.RPC), "RPCResponse", "RPCResponse", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *Response_Cascade) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&Response_Cascade{`,
		`Cascade:` + strings.Replace(fmt.Sprintf("%v", this.Cascade), "CascadeResponse", "CascadeResponse", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *Response_Pulse) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&Response_Pulse{`,
		`Pulse:` + strings.Replace(fmt.Sprintf("%v", this.Pulse), "PulseResponse", "PulseResponse", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *Response_Bootstrap) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&Response_Bootstrap{`,
		`Bootstrap:` + strings.Replace(fmt.Sprintf("%v", this.Bootstrap), "BootstrapResponse", "BootstrapResponse", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *Response_Authorize) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&Response_Authorize{`,
		`Authorize:` + strings.Replace(fmt.Sprintf("%v", this.Authorize), "AuthorizeResponse", "AuthorizeResponse", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *Response_Register) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&Response_Register{`,
		`Register:` + strings.Replace(fmt.Sprintf("%v", this.Register), "RegisterResponse", "RegisterResponse", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *Response_Genesis) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&Response_Genesis{`,
		`Genesis:` + strings.Replace(fmt.Sprintf("%v", this.Genesis), "GenesisResponse", "GenesisResponse", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *Response_Challenge1) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&Response_Challenge1{`,
		`Challenge1:` + strings.Replace(fmt.Sprintf("%v", this.Challenge1), "Challenge1Response", "Challenge1Response", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *Response_Challenge2) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&Response_Challenge2{`,
		`Challenge2:` + strings.Replace(fmt.Sprintf("%v", this.Challenge2), "Challenge2Response", "Challenge2Response", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *Response_Disconnect) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&Response_Disconnect{`,
		`Disconnect:` + strings.Replace(fmt.Sprintf("%v", this.Disconnect), "DisconnectResponse", "DisconnectResponse", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *Ping) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&Ping{`,
		`}`,
	}, "")
	return s
}
func (this *RPCRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&RPCRequest{`,
		`Method:` + fmt.Sprintf("%v", this.Method) + `,`,
		`Data:` + fmt.Sprintf("%v", this.Data) + `,`,
		`}`,
	}, "")
	return s
}
func (this *Cascade) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&Cascade{`,
		`NodeIds:` + fmt.Sprintf("%v", this.NodeIds) + `,`,
		`Entropy:` + fmt.Sprintf("%v", this.Entropy) + `,`,
		`ReplicationFactor:` + fmt.Sprintf("%v", this.ReplicationFactor) + `,`,
		`}`,
	}, "")
	return s
}
func (this *CascadeRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&CascadeRequest{`,
		`TraceID:` + fmt.Sprintf("%v", this.TraceID) + `,`,
		`RPC:` + strings.Replace(fmt.Sprintf("%v", this.RPC), "RPCRequest", "RPCRequest", 1) + `,`,
		`Cascade:` + strings.Replace(fmt.Sprintf("%v", this.Cascade), "Cascade", "Cascade", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *PulseRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&PulseRequest{`,
		`Pulse:` + strings.Replace(fmt.Sprintf("%v", this.Pulse), "PulseProto", "pulse.PulseProto", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *BootstrapRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&BootstrapRequest{`,
		`}`,
	}, "")
	return s
}
func (this *AuthorizeRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&AuthorizeRequest{`,
		`}`,
	}, "")
	return s
}
func (this *RegisterRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&RegisterRequest{`,
		`}`,
	}, "")
	return s
}
func (this *GenesisRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GenesisRequest{`,
		`}`,
	}, "")
	return s
}
func (this *Challenge1Request) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&Challenge1Request{`,
		`}`,
	}, "")
	return s
}
func (this *Challenge2Request) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&Challenge2Request{`,
		`}`,
	}, "")
	return s
}
func (this *DisconnectRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&DisconnectRequest{`,
		`}`,
	}, "")
	return s
}
func (this *RPCResponse) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&RPCResponse{`,
		`Response:` + fmt.Sprintf("%v", this.Response) + `,`,
		`}`,
	}, "")
	return s
}
func (this *RPCResponse_Result) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&RPCResponse_Result{`,
		`Result:` + fmt.Sprintf("%v", this.Result) + `,`,
		`}`,
	}, "")
	return s
}
func (this *RPCResponse_Error) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&RPCResponse_Error{`,
		`Error:` + fmt.Sprintf("%v", this.Error) + `,`,
		`}`,
	}, "")
	return s
}
func (this *CascadeResponse) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&CascadeResponse{`,
		`Response:` + fmt.Sprintf("%v", this.Response) + `,`,
		`}`,
	}, "")
	return s
}
func (this *CascadeResponse_Success) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&CascadeResponse_Success{`,
		`Success:` + fmt.Sprintf("%v", this.Success) + `,`,
		`}`,
	}, "")
	return s
}
func (this *CascadeResponse_Error) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&CascadeResponse_Error{`,
		`Error:` + fmt.Sprintf("%v", this.Error) + `,`,
		`}`,
	}, "")
	return s
}
func (this *PulseResponse) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&PulseResponse{`,
		`}`,
	}, "")
	return s
}
func (this *BootstrapResponse) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&BootstrapResponse{`,
		`}`,
	}, "")
	return s
}
func (this *AuthorizeResponse) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&AuthorizeResponse{`,
		`}`,
	}, "")
	return s
}
func (this *RegisterResponse) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&RegisterResponse{`,
		`}`,
	}, "")
	return s
}
func (this *GenesisResponse) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GenesisResponse{`,
		`}`,
	}, "")
	return s
}
func (this *Challenge1Response) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&Challenge1Response{`,
		`}`,
	}, "")
	return s
}
func (this *Challenge2Response) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&Challenge2Response{`,
		`}`,
	}, "")
	return s
}
func (this *DisconnectResponse) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&DisconnectResponse{`,
		`}`,
	}, "")
	return s
}
func valueToStringPacketBackend(v interface{}) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("*%v", pv)
}
func (m *Address) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPacketBackend
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Address: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Address: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field IP", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPacketBackend
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthPacketBackend
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthPacketBackend
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.IP = append(m.IP[:0], dAtA[iNdEx:postIndex]...)
			if m.IP == nil {
				m.IP = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Port", wireType)
			}
			m.Port = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPacketBackend
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Port |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Zone", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPacketBackend
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthPacketBackend
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthPacketBackend
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Zone = append(m.Zone[:0], dAtA[iNdEx:postIndex]...)
			if m.Zone == nil {
				m.Zone = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPacketBackend(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPacketBackend
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthPacketBackend
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Host) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPacketBackend
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Host: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Host: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NodeID", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPacketBackend
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthPacketBackend
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthPacketBackend
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NodeID = append(m.NodeID[:0], dAtA[iNdEx:postIndex]...)
			if m.NodeID == nil {
				m.NodeID = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ShortID", wireType)
			}
			m.ShortID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPacketBackend
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ShortID |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Address", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPacketBackend
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPacketBackend
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPacketBackend
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Address == nil {
				m.Address = &Address{}
			}
			if err := m.Address.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPacketBackend(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPacketBackend
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthPacketBackend
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PacketBackend) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPacketBackend
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PacketBackend: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PacketBackend: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sender", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPacketBackend
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPacketBackend
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPacketBackend
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Sender == nil {
				m.Sender = &Host{}
			}
			if err := m.Sender.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Receiver", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPacketBackend
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPacketBackend
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPacketBackend
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Receiver == nil {
				m.Receiver = &Host{}
			}
			if err := m.Receiver.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RequestID", wireType)
			}
			m.RequestID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPacketBackend
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RequestID |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TraceID", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPacketBackend
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthPacketBackend
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthPacketBackend
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TraceID = append(m.TraceID[:0], dAtA[iNdEx:postIndex]...)
			if m.TraceID == nil {
				m.TraceID = []byte{}
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Request", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPacketBackend
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPacketBackend
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPacketBackend
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &Request{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Payload = &PacketBackend_Request{v}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Response", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPacketBackend
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPacketBackend
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPacketBackend
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &Response{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Payload = &PacketBackend_Response{v}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPacketBackend(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPacketBackend
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthPacketBackend
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Request) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPacketBackend
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Request: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Request: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ping", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPacketBackend
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPacketBackend
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPacketBackend
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &Ping{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Request = &Request_Ping{v}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RPC", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPacketBackend
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPacketBackend
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPacketBackend
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &RPCRequest{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Request = &Request_RPC{v}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Cascade", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPacketBackend
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPacketBackend
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPacketBackend
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &CascadeRequest{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Request = &Request_Cascade{v}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pulse", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPacketBackend
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPacketBackend
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPacketBackend
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &PulseRequest{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Request = &Request_Pulse{v}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Bootstrap", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPacketBackend
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPacketBackend
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPacketBackend
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &BootstrapRequest{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Request = &Request_Bootstrap{v}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Authorize", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPacketBackend
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPacketBackend
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPacketBackend
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &AuthorizeRequest{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Request = &Request_Authorize{v}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Register", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPacketBackend
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPacketBackend
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPacketBackend
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &RegisterRequest{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Request = &Request_Register{v}
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Genesis", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPacketBackend
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPacketBackend
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPacketBackend
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &GenesisRequest{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Request = &Request_Genesis{v}
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Challenge1", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPacketBackend
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPacketBackend
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPacketBackend
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &Challenge1Request{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Request = &Request_Challenge1{v}
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Challenge2", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPacketBackend
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPacketBackend
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPacketBackend
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &Challenge2Request{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Request = &Request_Challenge2{v}
			iNdEx = postIndex
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Disconnect", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPacketBackend
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPacketBackend
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPacketBackend
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &DisconnectRequest{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Request = &Request_Disconnect{v}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPacketBackend(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPacketBackend
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthPacketBackend
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Response) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPacketBackend
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Response: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Response: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ping", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPacketBackend
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPacketBackend
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPacketBackend
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &Ping{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Response = &Response_Ping{v}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RPC", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPacketBackend
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPacketBackend
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPacketBackend
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &RPCResponse{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Response = &Response_RPC{v}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Cascade", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPacketBackend
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPacketBackend
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPacketBackend
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &CascadeResponse{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Response = &Response_Cascade{v}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pulse", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPacketBackend
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPacketBackend
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPacketBackend
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &PulseResponse{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Response = &Response_Pulse{v}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Bootstrap", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPacketBackend
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPacketBackend
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPacketBackend
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &BootstrapResponse{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Response = &Response_Bootstrap{v}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Authorize", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPacketBackend
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPacketBackend
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPacketBackend
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &AuthorizeResponse{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Response = &Response_Authorize{v}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Register", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPacketBackend
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPacketBackend
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPacketBackend
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &RegisterResponse{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Response = &Response_Register{v}
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Genesis", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPacketBackend
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPacketBackend
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPacketBackend
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &GenesisResponse{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Response = &Response_Genesis{v}
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Challenge1", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPacketBackend
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPacketBackend
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPacketBackend
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &Challenge1Response{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Response = &Response_Challenge1{v}
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Challenge2", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPacketBackend
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPacketBackend
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPacketBackend
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &Challenge2Response{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Response = &Response_Challenge2{v}
			iNdEx = postIndex
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Disconnect", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPacketBackend
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPacketBackend
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPacketBackend
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &DisconnectResponse{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Response = &Response_Disconnect{v}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPacketBackend(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPacketBackend
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthPacketBackend
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Ping) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPacketBackend
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Ping: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Ping: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipPacketBackend(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPacketBackend
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthPacketBackend
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RPCRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPacketBackend
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RPCRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RPCRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Method", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPacketBackend
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthPacketBackend
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthPacketBackend
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Method = append(m.Method[:0], dAtA[iNdEx:postIndex]...)
			if m.Method == nil {
				m.Method = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Data", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPacketBackend
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthPacketBackend
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthPacketBackend
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Data = append(m.Data[:0], dAtA[iNdEx:postIndex]...)
			if m.Data == nil {
				m.Data = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPacketBackend(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPacketBackend
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthPacketBackend
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Cascade) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPacketBackend
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Cascade: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Cascade: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NodeIds", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPacketBackend
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthPacketBackend
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthPacketBackend
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NodeIds = append(m.NodeIds, make([]byte, postIndex-iNdEx))
			copy(m.NodeIds[len(m.NodeIds)-1], dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Entropy", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPacketBackend
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthPacketBackend
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthPacketBackend
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Entropy = append(m.Entropy[:0], dAtA[iNdEx:postIndex]...)
			if m.Entropy == nil {
				m.Entropy = []byte{}
			}
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReplicationFactor", wireType)
			}
			m.ReplicationFactor = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPacketBackend
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ReplicationFactor |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipPacketBackend(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPacketBackend
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthPacketBackend
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CascadeRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPacketBackend
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CascadeRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CascadeRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TraceID", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPacketBackend
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthPacketBackend
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthPacketBackend
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TraceID = append(m.TraceID[:0], dAtA[iNdEx:postIndex]...)
			if m.TraceID == nil {
				m.TraceID = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RPC", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPacketBackend
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPacketBackend
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPacketBackend
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.RPC == nil {
				m.RPC = &RPCRequest{}
			}
			if err := m.RPC.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Cascade", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPacketBackend
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPacketBackend
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPacketBackend
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Cascade == nil {
				m.Cascade = &Cascade{}
			}
			if err := m.Cascade.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPacketBackend(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPacketBackend
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthPacketBackend
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PulseRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPacketBackend
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PulseRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PulseRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pulse", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPacketBackend
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPacketBackend
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPacketBackend
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pulse == nil {
				m.Pulse = &pulse.PulseProto{}
			}
			if err := m.Pulse.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPacketBackend(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPacketBackend
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthPacketBackend
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *BootstrapRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPacketBackend
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BootstrapRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BootstrapRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipPacketBackend(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPacketBackend
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthPacketBackend
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AuthorizeRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPacketBackend
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AuthorizeRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AuthorizeRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipPacketBackend(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPacketBackend
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthPacketBackend
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RegisterRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPacketBackend
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RegisterRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RegisterRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipPacketBackend(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPacketBackend
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthPacketBackend
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GenesisRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPacketBackend
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GenesisRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GenesisRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipPacketBackend(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPacketBackend
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthPacketBackend
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Challenge1Request) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPacketBackend
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Challenge1Request: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Challenge1Request: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipPacketBackend(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPacketBackend
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthPacketBackend
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Challenge2Request) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPacketBackend
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Challenge2Request: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Challenge2Request: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipPacketBackend(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPacketBackend
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthPacketBackend
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DisconnectRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPacketBackend
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DisconnectRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DisconnectRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipPacketBackend(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPacketBackend
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthPacketBackend
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RPCResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPacketBackend
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RPCResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RPCResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Result", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPacketBackend
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthPacketBackend
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthPacketBackend
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := make([]byte, postIndex-iNdEx)
			copy(v, dAtA[iNdEx:postIndex])
			m.Response = &RPCResponse_Result{v}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Error", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPacketBackend
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthPacketBackend
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthPacketBackend
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := make([]byte, postIndex-iNdEx)
			copy(v, dAtA[iNdEx:postIndex])
			m.Response = &RPCResponse_Error{v}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPacketBackend(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPacketBackend
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthPacketBackend
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CascadeResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPacketBackend
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CascadeResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CascadeResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Success", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPacketBackend
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			b := bool(v != 0)
			m.Response = &CascadeResponse_Success{b}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Error", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPacketBackend
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthPacketBackend
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthPacketBackend
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := make([]byte, postIndex-iNdEx)
			copy(v, dAtA[iNdEx:postIndex])
			m.Response = &CascadeResponse_Error{v}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPacketBackend(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPacketBackend
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthPacketBackend
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PulseResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPacketBackend
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PulseResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PulseResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipPacketBackend(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPacketBackend
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthPacketBackend
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *BootstrapResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPacketBackend
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BootstrapResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BootstrapResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipPacketBackend(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPacketBackend
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthPacketBackend
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AuthorizeResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPacketBackend
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AuthorizeResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AuthorizeResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipPacketBackend(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPacketBackend
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthPacketBackend
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RegisterResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPacketBackend
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RegisterResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RegisterResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipPacketBackend(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPacketBackend
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthPacketBackend
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GenesisResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPacketBackend
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GenesisResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GenesisResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipPacketBackend(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPacketBackend
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthPacketBackend
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Challenge1Response) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPacketBackend
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Challenge1Response: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Challenge1Response: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipPacketBackend(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPacketBackend
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthPacketBackend
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Challenge2Response) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPacketBackend
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Challenge2Response: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Challenge2Response: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipPacketBackend(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPacketBackend
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthPacketBackend
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DisconnectResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPacketBackend
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DisconnectResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DisconnectResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipPacketBackend(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPacketBackend
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthPacketBackend
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipPacketBackend(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowPacketBackend
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowPacketBackend
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowPacketBackend
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthPacketBackend
			}
			iNdEx += length
			if iNdEx < 0 {
				return 0, ErrInvalidLengthPacketBackend
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowPacketBackend
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipPacketBackend(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
				if iNdEx < 0 {
					return 0, ErrInvalidLengthPacketBackend
				}
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthPacketBackend = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowPacketBackend   = fmt.Errorf("proto: integer overflow")
)
