// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: network/hostnetwork/packet/packet.proto

package packet

import (
	bytes "bytes"
	fmt "fmt"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	github_com_insolar_insolar_insolar "github.com/insolar/insolar/insolar"
	pulse "github.com/insolar/insolar/insolar/pulse"
	github_com_insolar_insolar_network_consensusv1_packets "github.com/insolar/insolar/network/consensusv1/packets"
	github_com_insolar_insolar_network_hostnetwork_host "github.com/insolar/insolar/network/hostnetwork/host"
	io "io"
	math "math"
	reflect "reflect"
	strconv "strconv"
	strings "strings"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion2 // please upgrade the proto package

type BootstrapResponseCode int32

const (
	Accepted       BootstrapResponseCode = 0
	UpdateSchedule BootstrapResponseCode = 1
	UpdateShortID  BootstrapResponseCode = 2
	Reject         BootstrapResponseCode = 3
)

var BootstrapResponseCode_name = map[int32]string{
	0: "Accepted",
	1: "UpdateSchedule",
	2: "UpdateShortID",
	3: "Reject",
}

var BootstrapResponseCode_value = map[string]int32{
	"Accepted":       0,
	"UpdateSchedule": 1,
	"UpdateShortID":  2,
	"Reject":         3,
}

func (BootstrapResponseCode) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_c3f826366adfd81c, []int{0}
}

type AuthorizeResponseCode int32

const (
	Success        AuthorizeResponseCode = 0
	WrongTimestamp AuthorizeResponseCode = 2
	WrongMandate   AuthorizeResponseCode = 3
	WrongVersion   AuthorizeResponseCode = 4
)

var AuthorizeResponseCode_name = map[int32]string{
	0: "Success",
	2: "WrongTimestamp",
	3: "WrongMandate",
	4: "WrongVersion",
}

var AuthorizeResponseCode_value = map[string]int32{
	"Success":        0,
	"WrongTimestamp": 2,
	"WrongMandate":   3,
	"WrongVersion":   4,
}

func (AuthorizeResponseCode) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_c3f826366adfd81c, []int{1}
}

type Packet struct {
	Polymorph int32                                                     `protobuf:"varint,16,opt,name=polymorph,proto3" json:"polymorph,omitempty"`
	Sender    *github_com_insolar_insolar_network_hostnetwork_host.Host `protobuf:"bytes,20,opt,name=Sender,proto3,customtype=github.com/insolar/insolar/network/hostnetwork/host.Host" json:"Sender,omitempty"`
	Receiver  *github_com_insolar_insolar_network_hostnetwork_host.Host `protobuf:"bytes,21,opt,name=Receiver,proto3,customtype=github.com/insolar/insolar/network/hostnetwork/host.Host" json:"Receiver,omitempty"`
	RequestID uint64                                                    `protobuf:"varint,22,opt,name=RequestID,proto3" json:"RequestID,omitempty"`
	TraceID   string                                                    `protobuf:"bytes,23,opt,name=TraceID,proto3" json:"TraceID,omitempty"`
	Type      uint32                                                    `protobuf:"varint,24,opt,name=Type,proto3" json:"Type,omitempty"`
	// Types that are valid to be assigned to Payload:
	//	*Packet_Request
	//	*Packet_Response
	Payload isPacket_Payload `protobuf_oneof:"Payload"`
}

func (m *Packet) Reset()      { *m = Packet{} }
func (*Packet) ProtoMessage() {}
func (*Packet) Descriptor() ([]byte, []int) {
	return fileDescriptor_c3f826366adfd81c, []int{0}
}
func (m *Packet) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Packet) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Packet.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Packet) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Packet.Merge(m, src)
}
func (m *Packet) XXX_Size() int {
	return m.Size()
}
func (m *Packet) XXX_DiscardUnknown() {
	xxx_messageInfo_Packet.DiscardUnknown(m)
}

var xxx_messageInfo_Packet proto.InternalMessageInfo

type isPacket_Payload interface {
	isPacket_Payload()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}

type Packet_Request struct {
	Request *Request `protobuf:"bytes,25,opt,name=Request,proto3,oneof"`
}
type Packet_Response struct {
	Response *Response `protobuf:"bytes,26,opt,name=Response,proto3,oneof"`
}

func (*Packet_Request) isPacket_Payload()  {}
func (*Packet_Response) isPacket_Payload() {}

func (m *Packet) GetPayload() isPacket_Payload {
	if m != nil {
		return m.Payload
	}
	return nil
}

func (m *Packet) GetRequest() *Request {
	if x, ok := m.GetPayload().(*Packet_Request); ok {
		return x.Request
	}
	return nil
}

func (m *Packet) GetResponse() *Response {
	if x, ok := m.GetPayload().(*Packet_Response); ok {
		return x.Response
	}
	return nil
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*Packet) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _Packet_OneofMarshaler, _Packet_OneofUnmarshaler, _Packet_OneofSizer, []interface{}{
		(*Packet_Request)(nil),
		(*Packet_Response)(nil),
	}
}

func _Packet_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*Packet)
	// Payload
	switch x := m.Payload.(type) {
	case *Packet_Request:
		_ = b.EncodeVarint(25<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Request); err != nil {
			return err
		}
	case *Packet_Response:
		_ = b.EncodeVarint(26<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Response); err != nil {
			return err
		}
	case nil:
	default:
		return fmt.Errorf("Packet.Payload has unexpected type %T", x)
	}
	return nil
}

func _Packet_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*Packet)
	switch tag {
	case 25: // Payload.Request
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(Request)
		err := b.DecodeMessage(msg)
		m.Payload = &Packet_Request{msg}
		return true, err
	case 26: // Payload.Response
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(Response)
		err := b.DecodeMessage(msg)
		m.Payload = &Packet_Response{msg}
		return true, err
	default:
		return false, nil
	}
}

func _Packet_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*Packet)
	// Payload
	switch x := m.Payload.(type) {
	case *Packet_Request:
		s := proto.Size(x.Request)
		n += 2 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *Packet_Response:
		s := proto.Size(x.Response)
		n += 2 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

type Request struct {
	// Types that are valid to be assigned to Request:
	//	*Request_Ping
	//	*Request_RPC
	//	*Request_Cascade
	//	*Request_Pulse
	//	*Request_Bootstrap
	//	*Request_Authorize
	//	*Request_SignCert
	//	*Request_UpdateSchedule
	//	*Request_Reconnect
	Request isRequest_Request `protobuf_oneof:"Request"`
}

func (m *Request) Reset()      { *m = Request{} }
func (*Request) ProtoMessage() {}
func (*Request) Descriptor() ([]byte, []int) {
	return fileDescriptor_c3f826366adfd81c, []int{1}
}
func (m *Request) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Request) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Request.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Request) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Request.Merge(m, src)
}
func (m *Request) XXX_Size() int {
	return m.Size()
}
func (m *Request) XXX_DiscardUnknown() {
	xxx_messageInfo_Request.DiscardUnknown(m)
}

var xxx_messageInfo_Request proto.InternalMessageInfo

type isRequest_Request interface {
	isRequest_Request()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}

type Request_Ping struct {
	Ping *Ping `protobuf:"bytes,1,opt,name=Ping,proto3,oneof"`
}
type Request_RPC struct {
	RPC *RPCRequest `protobuf:"bytes,2,opt,name=RPC,proto3,oneof"`
}
type Request_Cascade struct {
	Cascade *CascadeRequest `protobuf:"bytes,3,opt,name=Cascade,proto3,oneof"`
}
type Request_Pulse struct {
	Pulse *PulseRequest `protobuf:"bytes,4,opt,name=Pulse,proto3,oneof"`
}
type Request_Bootstrap struct {
	Bootstrap *BootstrapRequest `protobuf:"bytes,5,opt,name=Bootstrap,proto3,oneof"`
}
type Request_Authorize struct {
	Authorize *AuthorizeRequest `protobuf:"bytes,6,opt,name=Authorize,proto3,oneof"`
}
type Request_SignCert struct {
	SignCert *SignCertRequest `protobuf:"bytes,7,opt,name=SignCert,proto3,oneof"`
}
type Request_UpdateSchedule struct {
	UpdateSchedule *UpdateScheduleRequest `protobuf:"bytes,8,opt,name=UpdateSchedule,proto3,oneof"`
}
type Request_Reconnect struct {
	Reconnect *ReconnectRequest `protobuf:"bytes,9,opt,name=Reconnect,proto3,oneof"`
}

func (*Request_Ping) isRequest_Request()           {}
func (*Request_RPC) isRequest_Request()            {}
func (*Request_Cascade) isRequest_Request()        {}
func (*Request_Pulse) isRequest_Request()          {}
func (*Request_Bootstrap) isRequest_Request()      {}
func (*Request_Authorize) isRequest_Request()      {}
func (*Request_SignCert) isRequest_Request()       {}
func (*Request_UpdateSchedule) isRequest_Request() {}
func (*Request_Reconnect) isRequest_Request()      {}

func (m *Request) GetRequest() isRequest_Request {
	if m != nil {
		return m.Request
	}
	return nil
}

func (m *Request) GetPing() *Ping {
	if x, ok := m.GetRequest().(*Request_Ping); ok {
		return x.Ping
	}
	return nil
}

func (m *Request) GetRPC() *RPCRequest {
	if x, ok := m.GetRequest().(*Request_RPC); ok {
		return x.RPC
	}
	return nil
}

func (m *Request) GetCascade() *CascadeRequest {
	if x, ok := m.GetRequest().(*Request_Cascade); ok {
		return x.Cascade
	}
	return nil
}

func (m *Request) GetPulse() *PulseRequest {
	if x, ok := m.GetRequest().(*Request_Pulse); ok {
		return x.Pulse
	}
	return nil
}

func (m *Request) GetBootstrap() *BootstrapRequest {
	if x, ok := m.GetRequest().(*Request_Bootstrap); ok {
		return x.Bootstrap
	}
	return nil
}

func (m *Request) GetAuthorize() *AuthorizeRequest {
	if x, ok := m.GetRequest().(*Request_Authorize); ok {
		return x.Authorize
	}
	return nil
}

func (m *Request) GetSignCert() *SignCertRequest {
	if x, ok := m.GetRequest().(*Request_SignCert); ok {
		return x.SignCert
	}
	return nil
}

func (m *Request) GetUpdateSchedule() *UpdateScheduleRequest {
	if x, ok := m.GetRequest().(*Request_UpdateSchedule); ok {
		return x.UpdateSchedule
	}
	return nil
}

func (m *Request) GetReconnect() *ReconnectRequest {
	if x, ok := m.GetRequest().(*Request_Reconnect); ok {
		return x.Reconnect
	}
	return nil
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*Request) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _Request_OneofMarshaler, _Request_OneofUnmarshaler, _Request_OneofSizer, []interface{}{
		(*Request_Ping)(nil),
		(*Request_RPC)(nil),
		(*Request_Cascade)(nil),
		(*Request_Pulse)(nil),
		(*Request_Bootstrap)(nil),
		(*Request_Authorize)(nil),
		(*Request_SignCert)(nil),
		(*Request_UpdateSchedule)(nil),
		(*Request_Reconnect)(nil),
	}
}

func _Request_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*Request)
	// Request
	switch x := m.Request.(type) {
	case *Request_Ping:
		_ = b.EncodeVarint(1<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Ping); err != nil {
			return err
		}
	case *Request_RPC:
		_ = b.EncodeVarint(2<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.RPC); err != nil {
			return err
		}
	case *Request_Cascade:
		_ = b.EncodeVarint(3<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Cascade); err != nil {
			return err
		}
	case *Request_Pulse:
		_ = b.EncodeVarint(4<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Pulse); err != nil {
			return err
		}
	case *Request_Bootstrap:
		_ = b.EncodeVarint(5<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Bootstrap); err != nil {
			return err
		}
	case *Request_Authorize:
		_ = b.EncodeVarint(6<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Authorize); err != nil {
			return err
		}
	case *Request_SignCert:
		_ = b.EncodeVarint(7<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.SignCert); err != nil {
			return err
		}
	case *Request_UpdateSchedule:
		_ = b.EncodeVarint(8<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.UpdateSchedule); err != nil {
			return err
		}
	case *Request_Reconnect:
		_ = b.EncodeVarint(9<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Reconnect); err != nil {
			return err
		}
	case nil:
	default:
		return fmt.Errorf("Request.Request has unexpected type %T", x)
	}
	return nil
}

func _Request_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*Request)
	switch tag {
	case 1: // Request.Ping
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(Ping)
		err := b.DecodeMessage(msg)
		m.Request = &Request_Ping{msg}
		return true, err
	case 2: // Request.RPC
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(RPCRequest)
		err := b.DecodeMessage(msg)
		m.Request = &Request_RPC{msg}
		return true, err
	case 3: // Request.Cascade
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(CascadeRequest)
		err := b.DecodeMessage(msg)
		m.Request = &Request_Cascade{msg}
		return true, err
	case 4: // Request.Pulse
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(PulseRequest)
		err := b.DecodeMessage(msg)
		m.Request = &Request_Pulse{msg}
		return true, err
	case 5: // Request.Bootstrap
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(BootstrapRequest)
		err := b.DecodeMessage(msg)
		m.Request = &Request_Bootstrap{msg}
		return true, err
	case 6: // Request.Authorize
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(AuthorizeRequest)
		err := b.DecodeMessage(msg)
		m.Request = &Request_Authorize{msg}
		return true, err
	case 7: // Request.SignCert
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(SignCertRequest)
		err := b.DecodeMessage(msg)
		m.Request = &Request_SignCert{msg}
		return true, err
	case 8: // Request.UpdateSchedule
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(UpdateScheduleRequest)
		err := b.DecodeMessage(msg)
		m.Request = &Request_UpdateSchedule{msg}
		return true, err
	case 9: // Request.Reconnect
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(ReconnectRequest)
		err := b.DecodeMessage(msg)
		m.Request = &Request_Reconnect{msg}
		return true, err
	default:
		return false, nil
	}
}

func _Request_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*Request)
	// Request
	switch x := m.Request.(type) {
	case *Request_Ping:
		s := proto.Size(x.Ping)
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *Request_RPC:
		s := proto.Size(x.RPC)
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *Request_Cascade:
		s := proto.Size(x.Cascade)
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *Request_Pulse:
		s := proto.Size(x.Pulse)
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *Request_Bootstrap:
		s := proto.Size(x.Bootstrap)
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *Request_Authorize:
		s := proto.Size(x.Authorize)
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *Request_SignCert:
		s := proto.Size(x.SignCert)
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *Request_UpdateSchedule:
		s := proto.Size(x.UpdateSchedule)
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *Request_Reconnect:
		s := proto.Size(x.Reconnect)
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

type Response struct {
	// Types that are valid to be assigned to Response:
	//	*Response_Ping
	//	*Response_RPC
	//	*Response_Basic
	//	*Response_Bootstrap
	//	*Response_Authorize
	//	*Response_SignCert
	//	*Response_Error
	//	*Response_UpdateSchedule
	//	*Response_Reconnect
	Response isResponse_Response `protobuf_oneof:"Response"`
}

func (m *Response) Reset()      { *m = Response{} }
func (*Response) ProtoMessage() {}
func (*Response) Descriptor() ([]byte, []int) {
	return fileDescriptor_c3f826366adfd81c, []int{2}
}
func (m *Response) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Response) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Response.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Response) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Response.Merge(m, src)
}
func (m *Response) XXX_Size() int {
	return m.Size()
}
func (m *Response) XXX_DiscardUnknown() {
	xxx_messageInfo_Response.DiscardUnknown(m)
}

var xxx_messageInfo_Response proto.InternalMessageInfo

type isResponse_Response interface {
	isResponse_Response()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}

type Response_Ping struct {
	Ping *Ping `protobuf:"bytes,1,opt,name=Ping,proto3,oneof"`
}
type Response_RPC struct {
	RPC *RPCResponse `protobuf:"bytes,2,opt,name=RPC,proto3,oneof"`
}
type Response_Basic struct {
	Basic *BasicResponse `protobuf:"bytes,3,opt,name=Basic,proto3,oneof"`
}
type Response_Bootstrap struct {
	Bootstrap *BootstrapResponse `protobuf:"bytes,4,opt,name=Bootstrap,proto3,oneof"`
}
type Response_Authorize struct {
	Authorize *AuthorizeResponse `protobuf:"bytes,5,opt,name=Authorize,proto3,oneof"`
}
type Response_SignCert struct {
	SignCert *SignCertResponse `protobuf:"bytes,6,opt,name=SignCert,proto3,oneof"`
}
type Response_Error struct {
	Error *ErrorResponse `protobuf:"bytes,7,opt,name=Error,proto3,oneof"`
}
type Response_UpdateSchedule struct {
	UpdateSchedule *UpdateScheduleResponse `protobuf:"bytes,8,opt,name=UpdateSchedule,proto3,oneof"`
}
type Response_Reconnect struct {
	Reconnect *ReconnectResponse `protobuf:"bytes,9,opt,name=Reconnect,proto3,oneof"`
}

func (*Response_Ping) isResponse_Response()           {}
func (*Response_RPC) isResponse_Response()            {}
func (*Response_Basic) isResponse_Response()          {}
func (*Response_Bootstrap) isResponse_Response()      {}
func (*Response_Authorize) isResponse_Response()      {}
func (*Response_SignCert) isResponse_Response()       {}
func (*Response_Error) isResponse_Response()          {}
func (*Response_UpdateSchedule) isResponse_Response() {}
func (*Response_Reconnect) isResponse_Response()      {}

func (m *Response) GetResponse() isResponse_Response {
	if m != nil {
		return m.Response
	}
	return nil
}

func (m *Response) GetPing() *Ping {
	if x, ok := m.GetResponse().(*Response_Ping); ok {
		return x.Ping
	}
	return nil
}

func (m *Response) GetRPC() *RPCResponse {
	if x, ok := m.GetResponse().(*Response_RPC); ok {
		return x.RPC
	}
	return nil
}

func (m *Response) GetBasic() *BasicResponse {
	if x, ok := m.GetResponse().(*Response_Basic); ok {
		return x.Basic
	}
	return nil
}

func (m *Response) GetBootstrap() *BootstrapResponse {
	if x, ok := m.GetResponse().(*Response_Bootstrap); ok {
		return x.Bootstrap
	}
	return nil
}

func (m *Response) GetAuthorize() *AuthorizeResponse {
	if x, ok := m.GetResponse().(*Response_Authorize); ok {
		return x.Authorize
	}
	return nil
}

func (m *Response) GetSignCert() *SignCertResponse {
	if x, ok := m.GetResponse().(*Response_SignCert); ok {
		return x.SignCert
	}
	return nil
}

func (m *Response) GetError() *ErrorResponse {
	if x, ok := m.GetResponse().(*Response_Error); ok {
		return x.Error
	}
	return nil
}

func (m *Response) GetUpdateSchedule() *UpdateScheduleResponse {
	if x, ok := m.GetResponse().(*Response_UpdateSchedule); ok {
		return x.UpdateSchedule
	}
	return nil
}

func (m *Response) GetReconnect() *ReconnectResponse {
	if x, ok := m.GetResponse().(*Response_Reconnect); ok {
		return x.Reconnect
	}
	return nil
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*Response) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _Response_OneofMarshaler, _Response_OneofUnmarshaler, _Response_OneofSizer, []interface{}{
		(*Response_Ping)(nil),
		(*Response_RPC)(nil),
		(*Response_Basic)(nil),
		(*Response_Bootstrap)(nil),
		(*Response_Authorize)(nil),
		(*Response_SignCert)(nil),
		(*Response_Error)(nil),
		(*Response_UpdateSchedule)(nil),
		(*Response_Reconnect)(nil),
	}
}

func _Response_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*Response)
	// Response
	switch x := m.Response.(type) {
	case *Response_Ping:
		_ = b.EncodeVarint(1<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Ping); err != nil {
			return err
		}
	case *Response_RPC:
		_ = b.EncodeVarint(2<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.RPC); err != nil {
			return err
		}
	case *Response_Basic:
		_ = b.EncodeVarint(3<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Basic); err != nil {
			return err
		}
	case *Response_Bootstrap:
		_ = b.EncodeVarint(4<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Bootstrap); err != nil {
			return err
		}
	case *Response_Authorize:
		_ = b.EncodeVarint(5<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Authorize); err != nil {
			return err
		}
	case *Response_SignCert:
		_ = b.EncodeVarint(6<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.SignCert); err != nil {
			return err
		}
	case *Response_Error:
		_ = b.EncodeVarint(7<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Error); err != nil {
			return err
		}
	case *Response_UpdateSchedule:
		_ = b.EncodeVarint(8<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.UpdateSchedule); err != nil {
			return err
		}
	case *Response_Reconnect:
		_ = b.EncodeVarint(9<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Reconnect); err != nil {
			return err
		}
	case nil:
	default:
		return fmt.Errorf("Response.Response has unexpected type %T", x)
	}
	return nil
}

func _Response_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*Response)
	switch tag {
	case 1: // Response.Ping
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(Ping)
		err := b.DecodeMessage(msg)
		m.Response = &Response_Ping{msg}
		return true, err
	case 2: // Response.RPC
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(RPCResponse)
		err := b.DecodeMessage(msg)
		m.Response = &Response_RPC{msg}
		return true, err
	case 3: // Response.Basic
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(BasicResponse)
		err := b.DecodeMessage(msg)
		m.Response = &Response_Basic{msg}
		return true, err
	case 4: // Response.Bootstrap
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(BootstrapResponse)
		err := b.DecodeMessage(msg)
		m.Response = &Response_Bootstrap{msg}
		return true, err
	case 5: // Response.Authorize
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(AuthorizeResponse)
		err := b.DecodeMessage(msg)
		m.Response = &Response_Authorize{msg}
		return true, err
	case 6: // Response.SignCert
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(SignCertResponse)
		err := b.DecodeMessage(msg)
		m.Response = &Response_SignCert{msg}
		return true, err
	case 7: // Response.Error
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(ErrorResponse)
		err := b.DecodeMessage(msg)
		m.Response = &Response_Error{msg}
		return true, err
	case 8: // Response.UpdateSchedule
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(UpdateScheduleResponse)
		err := b.DecodeMessage(msg)
		m.Response = &Response_UpdateSchedule{msg}
		return true, err
	case 9: // Response.Reconnect
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(ReconnectResponse)
		err := b.DecodeMessage(msg)
		m.Response = &Response_Reconnect{msg}
		return true, err
	default:
		return false, nil
	}
}

func _Response_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*Response)
	// Response
	switch x := m.Response.(type) {
	case *Response_Ping:
		s := proto.Size(x.Ping)
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *Response_RPC:
		s := proto.Size(x.RPC)
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *Response_Basic:
		s := proto.Size(x.Basic)
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *Response_Bootstrap:
		s := proto.Size(x.Bootstrap)
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *Response_Authorize:
		s := proto.Size(x.Authorize)
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *Response_SignCert:
		s := proto.Size(x.SignCert)
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *Response_Error:
		s := proto.Size(x.Error)
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *Response_UpdateSchedule:
		s := proto.Size(x.UpdateSchedule)
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *Response_Reconnect:
		s := proto.Size(x.Reconnect)
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

type Ping struct {
}

func (m *Ping) Reset()      { *m = Ping{} }
func (*Ping) ProtoMessage() {}
func (*Ping) Descriptor() ([]byte, []int) {
	return fileDescriptor_c3f826366adfd81c, []int{3}
}
func (m *Ping) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Ping) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Ping.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Ping) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Ping.Merge(m, src)
}
func (m *Ping) XXX_Size() int {
	return m.Size()
}
func (m *Ping) XXX_DiscardUnknown() {
	xxx_messageInfo_Ping.DiscardUnknown(m)
}

var xxx_messageInfo_Ping proto.InternalMessageInfo

type RPCRequest struct {
	Method string `protobuf:"bytes,1,opt,name=Method,proto3" json:"Method,omitempty"`
	Data   []byte `protobuf:"bytes,2,opt,name=Data,proto3" json:"Data,omitempty"`
}

func (m *RPCRequest) Reset()      { *m = RPCRequest{} }
func (*RPCRequest) ProtoMessage() {}
func (*RPCRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_c3f826366adfd81c, []int{4}
}
func (m *RPCRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RPCRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RPCRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RPCRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RPCRequest.Merge(m, src)
}
func (m *RPCRequest) XXX_Size() int {
	return m.Size()
}
func (m *RPCRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_RPCRequest.DiscardUnknown(m)
}

var xxx_messageInfo_RPCRequest proto.InternalMessageInfo

type Cascade struct {
	NodeIds           []github_com_insolar_insolar_insolar.Reference `protobuf:"bytes,1,rep,name=NodeIds,proto3,customtype=github.com/insolar/insolar/insolar.Reference" json:"NodeIds,omitempty"`
	Entropy           github_com_insolar_insolar_insolar.Entropy     `protobuf:"bytes,2,opt,name=Entropy,proto3,customtype=github.com/insolar/insolar/insolar.Entropy" json:"Entropy"`
	ReplicationFactor uint32                                         `protobuf:"varint,3,opt,name=ReplicationFactor,proto3" json:"ReplicationFactor,omitempty"`
}

func (m *Cascade) Reset()      { *m = Cascade{} }
func (*Cascade) ProtoMessage() {}
func (*Cascade) Descriptor() ([]byte, []int) {
	return fileDescriptor_c3f826366adfd81c, []int{5}
}
func (m *Cascade) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Cascade) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Cascade.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Cascade) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Cascade.Merge(m, src)
}
func (m *Cascade) XXX_Size() int {
	return m.Size()
}
func (m *Cascade) XXX_DiscardUnknown() {
	xxx_messageInfo_Cascade.DiscardUnknown(m)
}

var xxx_messageInfo_Cascade proto.InternalMessageInfo

type CascadeRequest struct {
	TraceID string      `protobuf:"bytes,1,opt,name=TraceID,proto3" json:"TraceID,omitempty"`
	RPC     *RPCRequest `protobuf:"bytes,2,opt,name=RPC,proto3" json:"RPC,omitempty"`
	Cascade *Cascade    `protobuf:"bytes,3,opt,name=Cascade,proto3" json:"Cascade,omitempty"`
}

func (m *CascadeRequest) Reset()      { *m = CascadeRequest{} }
func (*CascadeRequest) ProtoMessage() {}
func (*CascadeRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_c3f826366adfd81c, []int{6}
}
func (m *CascadeRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CascadeRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CascadeRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CascadeRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CascadeRequest.Merge(m, src)
}
func (m *CascadeRequest) XXX_Size() int {
	return m.Size()
}
func (m *CascadeRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_CascadeRequest.DiscardUnknown(m)
}

var xxx_messageInfo_CascadeRequest proto.InternalMessageInfo

type PulseRequest struct {
	Pulse         *pulse.PulseProto `protobuf:"bytes,1,opt,name=Pulse,proto3" json:"Pulse,omitempty"`
	TraceSpanData []byte            `protobuf:"bytes,2,opt,name=TraceSpanData,proto3" json:"TraceSpanData,omitempty"`
}

func (m *PulseRequest) Reset()      { *m = PulseRequest{} }
func (*PulseRequest) ProtoMessage() {}
func (*PulseRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_c3f826366adfd81c, []int{7}
}
func (m *PulseRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PulseRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PulseRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PulseRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PulseRequest.Merge(m, src)
}
func (m *PulseRequest) XXX_Size() int {
	return m.Size()
}
func (m *PulseRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_PulseRequest.DiscardUnknown(m)
}

var xxx_messageInfo_PulseRequest proto.InternalMessageInfo

type UpdateScheduleRequest struct {
	LastNodePulse github_com_insolar_insolar_insolar.PulseNumber `protobuf:"varint,1,opt,name=LastNodePulse,proto3,customtype=github.com/insolar/insolar/insolar.PulseNumber" json:"LastNodePulse"`
	Permit        *Permit                                        `protobuf:"bytes,2,opt,name=Permit,proto3" json:"Permit,omitempty"`
}

func (m *UpdateScheduleRequest) Reset()      { *m = UpdateScheduleRequest{} }
func (*UpdateScheduleRequest) ProtoMessage() {}
func (*UpdateScheduleRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_c3f826366adfd81c, []int{8}
}
func (m *UpdateScheduleRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UpdateScheduleRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UpdateScheduleRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *UpdateScheduleRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UpdateScheduleRequest.Merge(m, src)
}
func (m *UpdateScheduleRequest) XXX_Size() int {
	return m.Size()
}
func (m *UpdateScheduleRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_UpdateScheduleRequest.DiscardUnknown(m)
}

var xxx_messageInfo_UpdateScheduleRequest proto.InternalMessageInfo

type ReconnectRequest struct {
	ReconnectTo github_com_insolar_insolar_network_hostnetwork_host.Host `protobuf:"bytes,1,opt,name=ReconnectTo,proto3,customtype=github.com/insolar/insolar/network/hostnetwork/host.Host" json:"ReconnectTo"`
	Permit      *Permit                                                  `protobuf:"bytes,2,opt,name=Permit,proto3" json:"Permit,omitempty"`
}

func (m *ReconnectRequest) Reset()      { *m = ReconnectRequest{} }
func (*ReconnectRequest) ProtoMessage() {}
func (*ReconnectRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_c3f826366adfd81c, []int{9}
}
func (m *ReconnectRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ReconnectRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ReconnectRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ReconnectRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ReconnectRequest.Merge(m, src)
}
func (m *ReconnectRequest) XXX_Size() int {
	return m.Size()
}
func (m *ReconnectRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ReconnectRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ReconnectRequest proto.InternalMessageInfo

type BootstrapRequest struct {
	JoinClaim *github_com_insolar_insolar_network_consensusv1_packets.NodeJoinClaim `protobuf:"bytes,1,opt,name=JoinClaim,proto3,customtype=github.com/insolar/insolar/network/consensusv1/packets.NodeJoinClaim" json:"JoinClaim,omitempty"`
	Pulse     pulse.PulseProto                                                      `protobuf:"bytes,2,opt,name=Pulse,proto3" json:"Pulse"`
	Permit    *Permit                                                               `protobuf:"bytes,3,opt,name=Permit,proto3" json:"Permit,omitempty"`
}

func (m *BootstrapRequest) Reset()      { *m = BootstrapRequest{} }
func (*BootstrapRequest) ProtoMessage() {}
func (*BootstrapRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_c3f826366adfd81c, []int{10}
}
func (m *BootstrapRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *BootstrapRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_BootstrapRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *BootstrapRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BootstrapRequest.Merge(m, src)
}
func (m *BootstrapRequest) XXX_Size() int {
	return m.Size()
}
func (m *BootstrapRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_BootstrapRequest.DiscardUnknown(m)
}

var xxx_messageInfo_BootstrapRequest proto.InternalMessageInfo

type AuthorizeData struct {
	Certificate []byte `protobuf:"bytes,1,opt,name=Certificate,proto3" json:"Certificate,omitempty"`
	Timestamp   int64  `protobuf:"varint,2,opt,name=Timestamp,proto3" json:"Timestamp,omitempty"`
	Version     string `protobuf:"bytes,3,opt,name=Version,proto3" json:"Version,omitempty"`
}

func (m *AuthorizeData) Reset()      { *m = AuthorizeData{} }
func (*AuthorizeData) ProtoMessage() {}
func (*AuthorizeData) Descriptor() ([]byte, []int) {
	return fileDescriptor_c3f826366adfd81c, []int{11}
}
func (m *AuthorizeData) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AuthorizeData) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AuthorizeData.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *AuthorizeData) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AuthorizeData.Merge(m, src)
}
func (m *AuthorizeData) XXX_Size() int {
	return m.Size()
}
func (m *AuthorizeData) XXX_DiscardUnknown() {
	xxx_messageInfo_AuthorizeData.DiscardUnknown(m)
}

var xxx_messageInfo_AuthorizeData proto.InternalMessageInfo

type AuthorizeRequest struct {
	AuthorizeData *AuthorizeData `protobuf:"bytes,1,opt,name=AuthorizeData,proto3" json:"AuthorizeData,omitempty"`
	Signature     []byte         `protobuf:"bytes,2,opt,name=Signature,proto3" json:"Signature,omitempty"`
}

func (m *AuthorizeRequest) Reset()      { *m = AuthorizeRequest{} }
func (*AuthorizeRequest) ProtoMessage() {}
func (*AuthorizeRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_c3f826366adfd81c, []int{12}
}
func (m *AuthorizeRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AuthorizeRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AuthorizeRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *AuthorizeRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AuthorizeRequest.Merge(m, src)
}
func (m *AuthorizeRequest) XXX_Size() int {
	return m.Size()
}
func (m *AuthorizeRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_AuthorizeRequest.DiscardUnknown(m)
}

var xxx_messageInfo_AuthorizeRequest proto.InternalMessageInfo

type SignCertRequest struct {
	NodeRef github_com_insolar_insolar_insolar.Reference `protobuf:"bytes,1,opt,name=NodeRef,proto3,customtype=github.com/insolar/insolar/insolar.Reference" json:"NodeRef"`
}

func (m *SignCertRequest) Reset()      { *m = SignCertRequest{} }
func (*SignCertRequest) ProtoMessage() {}
func (*SignCertRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_c3f826366adfd81c, []int{13}
}
func (m *SignCertRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SignCertRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SignCertRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SignCertRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SignCertRequest.Merge(m, src)
}
func (m *SignCertRequest) XXX_Size() int {
	return m.Size()
}
func (m *SignCertRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_SignCertRequest.DiscardUnknown(m)
}

var xxx_messageInfo_SignCertRequest proto.InternalMessageInfo

type RPCResponse struct {
	Result []byte `protobuf:"bytes,1,opt,name=Result,proto3" json:"Result,omitempty"`
	Error  string `protobuf:"bytes,2,opt,name=Error,proto3" json:"Error,omitempty"`
}

func (m *RPCResponse) Reset()      { *m = RPCResponse{} }
func (*RPCResponse) ProtoMessage() {}
func (*RPCResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_c3f826366adfd81c, []int{14}
}
func (m *RPCResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RPCResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RPCResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RPCResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RPCResponse.Merge(m, src)
}
func (m *RPCResponse) XXX_Size() int {
	return m.Size()
}
func (m *RPCResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_RPCResponse.DiscardUnknown(m)
}

var xxx_messageInfo_RPCResponse proto.InternalMessageInfo

type Permit struct {
	Payload   PermitPayload `protobuf:"bytes,1,opt,name=Payload,proto3" json:"Payload"`
	Signature []byte        `protobuf:"bytes,2,opt,name=Signature,proto3" json:"Signature,omitempty"`
}

func (m *Permit) Reset()      { *m = Permit{} }
func (*Permit) ProtoMessage() {}
func (*Permit) Descriptor() ([]byte, []int) {
	return fileDescriptor_c3f826366adfd81c, []int{15}
}
func (m *Permit) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Permit) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Permit.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Permit) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Permit.Merge(m, src)
}
func (m *Permit) XXX_Size() int {
	return m.Size()
}
func (m *Permit) XXX_DiscardUnknown() {
	xxx_messageInfo_Permit.DiscardUnknown(m)
}

var xxx_messageInfo_Permit proto.InternalMessageInfo

type PermitPayload struct {
	JoinerPublicKey  []byte                                                    `protobuf:"bytes,1,opt,name=JoinerPublicKey,proto3" json:"JoinerPublicKey,omitempty"`
	ExpireTimestamp  int64                                                     `protobuf:"varint,2,opt,name=ExpireTimestamp,proto3" json:"ExpireTimestamp,omitempty"`
	ReconnectTo      *github_com_insolar_insolar_network_hostnetwork_host.Host `protobuf:"bytes,3,opt,name=ReconnectTo,proto3,customtype=github.com/insolar/insolar/network/hostnetwork/host.Host" json:"ReconnectTo,omitempty"`
	AuthorityNodeRef github_com_insolar_insolar_insolar.Reference              `protobuf:"bytes,4,opt,name=AuthorityNodeRef,proto3,customtype=github.com/insolar/insolar/insolar.Reference" json:"AuthorityNodeRef"`
}

func (m *PermitPayload) Reset()      { *m = PermitPayload{} }
func (*PermitPayload) ProtoMessage() {}
func (*PermitPayload) Descriptor() ([]byte, []int) {
	return fileDescriptor_c3f826366adfd81c, []int{16}
}
func (m *PermitPayload) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PermitPayload) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PermitPayload.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PermitPayload) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PermitPayload.Merge(m, src)
}
func (m *PermitPayload) XXX_Size() int {
	return m.Size()
}
func (m *PermitPayload) XXX_DiscardUnknown() {
	xxx_messageInfo_PermitPayload.DiscardUnknown(m)
}

var xxx_messageInfo_PermitPayload proto.InternalMessageInfo

type BootstrapResponse struct {
	Code BootstrapResponseCode `protobuf:"varint,1,opt,name=Code,proto3,enum=packet.BootstrapResponseCode" json:"Code,omitempty"`
	ETA  uint32                `protobuf:"varint,2,opt,name=ETA,proto3" json:"ETA,omitempty"`
	//    uint32 AssignShortID = 3;
	Pulse pulse.PulseProto `protobuf:"bytes,3,opt,name=Pulse,proto3" json:"Pulse"`
}

func (m *BootstrapResponse) Reset()      { *m = BootstrapResponse{} }
func (*BootstrapResponse) ProtoMessage() {}
func (*BootstrapResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_c3f826366adfd81c, []int{17}
}
func (m *BootstrapResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *BootstrapResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_BootstrapResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *BootstrapResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BootstrapResponse.Merge(m, src)
}
func (m *BootstrapResponse) XXX_Size() int {
	return m.Size()
}
func (m *BootstrapResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_BootstrapResponse.DiscardUnknown(m)
}

var xxx_messageInfo_BootstrapResponse proto.InternalMessageInfo

type BasicResponse struct {
	Success bool   `protobuf:"varint,1,opt,name=Success,proto3" json:"Success,omitempty"`
	Error   string `protobuf:"bytes,2,opt,name=Error,proto3" json:"Error,omitempty"`
}

func (m *BasicResponse) Reset()      { *m = BasicResponse{} }
func (*BasicResponse) ProtoMessage() {}
func (*BasicResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_c3f826366adfd81c, []int{18}
}
func (m *BasicResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *BasicResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_BasicResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *BasicResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BasicResponse.Merge(m, src)
}
func (m *BasicResponse) XXX_Size() int {
	return m.Size()
}
func (m *BasicResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_BasicResponse.DiscardUnknown(m)
}

var xxx_messageInfo_BasicResponse proto.InternalMessageInfo

type AuthorizeResponse struct {
	Code           AuthorizeResponseCode `protobuf:"varint,1,opt,name=Code,proto3,enum=packet.AuthorizeResponseCode" json:"Code,omitempty"`
	Timestamp      int64                 `protobuf:"varint,2,opt,name=Timestamp,proto3" json:"Timestamp,omitempty"`
	Error          string                `protobuf:"bytes,3,opt,name=Error,proto3" json:"Error,omitempty"`
	Permit         *Permit               `protobuf:"bytes,4,opt,name=Permit,proto3" json:"Permit,omitempty"`
	DiscoveryCount uint32                `protobuf:"varint,5,opt,name=DiscoveryCount,proto3" json:"DiscoveryCount,omitempty"`
	Pulse          pulse.PulseProto      `protobuf:"bytes,6,opt,name=Pulse,proto3" json:"Pulse"`
}

func (m *AuthorizeResponse) Reset()      { *m = AuthorizeResponse{} }
func (*AuthorizeResponse) ProtoMessage() {}
func (*AuthorizeResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_c3f826366adfd81c, []int{19}
}
func (m *AuthorizeResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AuthorizeResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AuthorizeResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *AuthorizeResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AuthorizeResponse.Merge(m, src)
}
func (m *AuthorizeResponse) XXX_Size() int {
	return m.Size()
}
func (m *AuthorizeResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_AuthorizeResponse.DiscardUnknown(m)
}

var xxx_messageInfo_AuthorizeResponse proto.InternalMessageInfo

type SignCertResponse struct {
	Sign []byte `protobuf:"bytes,1,opt,name=Sign,proto3" json:"Sign,omitempty"`
}

func (m *SignCertResponse) Reset()      { *m = SignCertResponse{} }
func (*SignCertResponse) ProtoMessage() {}
func (*SignCertResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_c3f826366adfd81c, []int{20}
}
func (m *SignCertResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SignCertResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SignCertResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SignCertResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SignCertResponse.Merge(m, src)
}
func (m *SignCertResponse) XXX_Size() int {
	return m.Size()
}
func (m *SignCertResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_SignCertResponse.DiscardUnknown(m)
}

var xxx_messageInfo_SignCertResponse proto.InternalMessageInfo

type ErrorResponse struct {
	Error string `protobuf:"bytes,1,opt,name=Error,proto3" json:"Error,omitempty"`
}

func (m *ErrorResponse) Reset()      { *m = ErrorResponse{} }
func (*ErrorResponse) ProtoMessage() {}
func (*ErrorResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_c3f826366adfd81c, []int{21}
}
func (m *ErrorResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ErrorResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ErrorResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ErrorResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ErrorResponse.Merge(m, src)
}
func (m *ErrorResponse) XXX_Size() int {
	return m.Size()
}
func (m *ErrorResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_ErrorResponse.DiscardUnknown(m)
}

var xxx_messageInfo_ErrorResponse proto.InternalMessageInfo

type UpdateScheduleResponse struct {
}

func (m *UpdateScheduleResponse) Reset()      { *m = UpdateScheduleResponse{} }
func (*UpdateScheduleResponse) ProtoMessage() {}
func (*UpdateScheduleResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_c3f826366adfd81c, []int{22}
}
func (m *UpdateScheduleResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UpdateScheduleResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UpdateScheduleResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *UpdateScheduleResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UpdateScheduleResponse.Merge(m, src)
}
func (m *UpdateScheduleResponse) XXX_Size() int {
	return m.Size()
}
func (m *UpdateScheduleResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_UpdateScheduleResponse.DiscardUnknown(m)
}

var xxx_messageInfo_UpdateScheduleResponse proto.InternalMessageInfo

type ReconnectResponse struct {
}

func (m *ReconnectResponse) Reset()      { *m = ReconnectResponse{} }
func (*ReconnectResponse) ProtoMessage() {}
func (*ReconnectResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_c3f826366adfd81c, []int{23}
}
func (m *ReconnectResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ReconnectResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ReconnectResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ReconnectResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ReconnectResponse.Merge(m, src)
}
func (m *ReconnectResponse) XXX_Size() int {
	return m.Size()
}
func (m *ReconnectResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_ReconnectResponse.DiscardUnknown(m)
}

var xxx_messageInfo_ReconnectResponse proto.InternalMessageInfo

func init() {
	proto.RegisterEnum("packet.BootstrapResponseCode", BootstrapResponseCode_name, BootstrapResponseCode_value)
	proto.RegisterEnum("packet.AuthorizeResponseCode", AuthorizeResponseCode_name, AuthorizeResponseCode_value)
	proto.RegisterType((*Packet)(nil), "packet.Packet")
	proto.RegisterType((*Request)(nil), "packet.Request")
	proto.RegisterType((*Response)(nil), "packet.Response")
	proto.RegisterType((*Ping)(nil), "packet.Ping")
	proto.RegisterType((*RPCRequest)(nil), "packet.RPCRequest")
	proto.RegisterType((*Cascade)(nil), "packet.Cascade")
	proto.RegisterType((*CascadeRequest)(nil), "packet.CascadeRequest")
	proto.RegisterType((*PulseRequest)(nil), "packet.PulseRequest")
	proto.RegisterType((*UpdateScheduleRequest)(nil), "packet.UpdateScheduleRequest")
	proto.RegisterType((*ReconnectRequest)(nil), "packet.ReconnectRequest")
	proto.RegisterType((*BootstrapRequest)(nil), "packet.BootstrapRequest")
	proto.RegisterType((*AuthorizeData)(nil), "packet.AuthorizeData")
	proto.RegisterType((*AuthorizeRequest)(nil), "packet.AuthorizeRequest")
	proto.RegisterType((*SignCertRequest)(nil), "packet.SignCertRequest")
	proto.RegisterType((*RPCResponse)(nil), "packet.RPCResponse")
	proto.RegisterType((*Permit)(nil), "packet.Permit")
	proto.RegisterType((*PermitPayload)(nil), "packet.PermitPayload")
	proto.RegisterType((*BootstrapResponse)(nil), "packet.BootstrapResponse")
	proto.RegisterType((*BasicResponse)(nil), "packet.BasicResponse")
	proto.RegisterType((*AuthorizeResponse)(nil), "packet.AuthorizeResponse")
	proto.RegisterType((*SignCertResponse)(nil), "packet.SignCertResponse")
	proto.RegisterType((*ErrorResponse)(nil), "packet.ErrorResponse")
	proto.RegisterType((*UpdateScheduleResponse)(nil), "packet.UpdateScheduleResponse")
	proto.RegisterType((*ReconnectResponse)(nil), "packet.ReconnectResponse")
}

func init() {
	proto.RegisterFile("network/hostnetwork/packet/packet.proto", fileDescriptor_c3f826366adfd81c)
}

var fileDescriptor_c3f826366adfd81c = []byte{
	// 1476 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xac, 0x57, 0xcf, 0x6f, 0x13, 0xc7,
	0x17, 0xf7, 0xc6, 0x8e, 0x13, 0xbf, 0xd8, 0xc9, 0x66, 0x20, 0x61, 0x41, 0x7c, 0x37, 0xd6, 0x8a,
	0x6f, 0x70, 0x29, 0x98, 0x42, 0x01, 0x81, 0x40, 0x6a, 0x71, 0x92, 0x36, 0xa1, 0x80, 0xac, 0x49,
	0xda, 0x72, 0x80, 0xaa, 0x9b, 0xf5, 0x24, 0xd9, 0x62, 0xef, 0x6c, 0x77, 0xc7, 0xb4, 0x69, 0x2f,
	0xbd, 0x55, 0xea, 0xa9, 0xff, 0x40, 0x7b, 0xab, 0xd4, 0x3f, 0x85, 0x23, 0xdc, 0x50, 0x0e, 0x51,
	0x13, 0x2e, 0x3d, 0x72, 0xe8, 0xa1, 0xbd, 0x55, 0x33, 0x3b, 0x3b, 0xfb, 0xc3, 0x49, 0xb0, 0x28,
	0x97, 0x78, 0xe7, 0x33, 0xef, 0xbd, 0x79, 0x6f, 0x3e, 0xef, 0xbd, 0x79, 0x81, 0xb3, 0x1e, 0x61,
	0xdf, 0xd0, 0xe0, 0xf1, 0xc5, 0x2d, 0x1a, 0xb2, 0xf8, 0xdb, 0xb7, 0x9d, 0xc7, 0x84, 0xc9, 0x9f,
	0xa6, 0x1f, 0x50, 0x46, 0x51, 0x39, 0x5a, 0x9d, 0xba, 0xb0, 0xe9, 0xb2, 0xad, 0xfe, 0x7a, 0xd3,
	0xa1, 0xbd, 0x8b, 0x9b, 0x74, 0x93, 0x5e, 0x14, 0xdb, 0xeb, 0xfd, 0x0d, 0xb1, 0x12, 0x0b, 0xf1,
	0x15, 0xa9, 0x9d, 0xba, 0x92, 0x12, 0x77, 0xbd, 0x90, 0x76, 0xed, 0x60, 0xe0, 0xd7, 0xef, 0x77,
	0x43, 0x12, 0xfd, 0x8d, 0xb4, 0xac, 0x9f, 0x8a, 0x50, 0x6e, 0x8b, 0xf3, 0xd0, 0x69, 0xa8, 0xf8,
	0xb4, 0xbb, 0xdd, 0xa3, 0x81, 0xbf, 0x65, 0xe8, 0x75, 0xad, 0x31, 0x8a, 0x13, 0x00, 0xad, 0x41,
	0x79, 0x95, 0x78, 0x1d, 0x12, 0x18, 0xc7, 0xeb, 0x5a, 0xa3, 0xda, 0xba, 0xb5, 0xb3, 0x3b, 0x77,
	0xfd, 0x88, 0x23, 0x0f, 0x8a, 0x96, 0x7f, 0x37, 0x97, 0x69, 0xc8, 0xb0, 0xb4, 0x85, 0x1e, 0xc0,
	0x38, 0x26, 0x0e, 0x71, 0x9f, 0x90, 0xc0, 0x98, 0x79, 0x0b, 0x76, 0x95, 0x35, 0x1e, 0x0d, 0x26,
	0x5f, 0xf7, 0x49, 0xc8, 0x56, 0x16, 0x8d, 0xd9, 0xba, 0xd6, 0x28, 0xe1, 0x04, 0x40, 0x06, 0x8c,
	0xad, 0x05, 0xb6, 0x43, 0x56, 0x16, 0x8d, 0x13, 0x75, 0xad, 0x51, 0xc1, 0xf1, 0x12, 0x21, 0x28,
	0xad, 0x6d, 0xfb, 0xc4, 0x30, 0xea, 0x5a, 0xa3, 0x86, 0xc5, 0x37, 0x7a, 0x17, 0xc6, 0xa4, 0xaa,
	0x71, 0xb2, 0xae, 0x35, 0x26, 0x2e, 0x4f, 0x35, 0x25, 0x63, 0x12, 0x5e, 0x2e, 0xe0, 0x58, 0x02,
	0x35, 0x79, 0x48, 0xa1, 0x4f, 0xbd, 0x90, 0x18, 0xa7, 0x84, 0xb4, 0x9e, 0x48, 0x47, 0xf8, 0x72,
	0x01, 0x2b, 0x99, 0x56, 0x05, 0xc6, 0xda, 0xf6, 0x76, 0x97, 0xda, 0x1d, 0xeb, 0x55, 0x51, 0x1d,
	0x84, 0x2c, 0x28, 0xb5, 0x5d, 0x6f, 0xd3, 0xd0, 0x84, 0x89, 0x6a, 0x6c, 0x82, 0x63, 0xcb, 0x05,
	0x2c, 0xf6, 0xd0, 0x3c, 0x14, 0x71, 0x7b, 0xc1, 0x18, 0x11, 0x22, 0x48, 0x9d, 0xd2, 0x5e, 0x48,
	0xdc, 0xe2, 0x02, 0xe8, 0x32, 0x8c, 0x2d, 0xd8, 0xa1, 0x63, 0x77, 0x88, 0x51, 0x14, 0xb2, 0xb3,
	0xb1, 0xac, 0x84, 0x53, 0x61, 0x48, 0x04, 0x9d, 0x87, 0xd1, 0x36, 0xcf, 0x13, 0xa3, 0x24, 0x34,
	0x8e, 0x2b, 0x07, 0x38, 0x98, 0xc8, 0x47, 0x42, 0xe8, 0x3a, 0x54, 0x5a, 0x94, 0xb2, 0x90, 0x05,
	0xb6, 0x6f, 0x8c, 0x0a, 0x0d, 0x23, 0xd6, 0x50, 0x1b, 0x89, 0x56, 0x22, 0xcc, 0x35, 0x6f, 0xf7,
	0xd9, 0x16, 0x0d, 0xdc, 0xef, 0x88, 0x51, 0xce, 0x6a, 0xaa, 0x8d, 0x94, 0xa6, 0xc2, 0xd0, 0x55,
	0x18, 0x5f, 0x75, 0x37, 0xbd, 0x05, 0x12, 0x30, 0x63, 0x4c, 0x28, 0x9e, 0x88, 0x15, 0x63, 0x3c,
	0xd1, 0x53, 0xa2, 0xe8, 0x63, 0x98, 0xfc, 0xd4, 0xef, 0xd8, 0x8c, 0xac, 0x3a, 0x5b, 0xa4, 0xd3,
	0xef, 0x12, 0x63, 0x5c, 0x28, 0xff, 0x2f, 0x56, 0xce, 0xee, 0x26, 0x26, 0x72, 0x6a, 0xdc, 0x73,
	0x4c, 0x1c, 0xea, 0x79, 0xc4, 0x61, 0x46, 0x25, 0xeb, 0xb9, 0xda, 0x48, 0x79, 0xae, 0x30, 0x4e,
	0xb9, 0xc4, 0xad, 0xbf, 0x8a, 0x49, 0xba, 0x0c, 0xc5, 0xf9, 0xd9, 0x34, 0xe7, 0xc7, 0x32, 0x9c,
	0xab, 0xe4, 0x12, 0xa4, 0x5f, 0x80, 0xd1, 0x96, 0x1d, 0xba, 0x8e, 0xa4, 0x7c, 0x46, 0xd1, 0xc1,
	0xc1, 0x94, 0x70, 0x24, 0x85, 0x6e, 0xa4, 0x19, 0x8c, 0x38, 0x3f, 0x79, 0x00, 0x83, 0x4a, 0x2d,
	0x45, 0xe1, 0x8d, 0x34, 0x85, 0xa3, 0x59, 0xd5, 0x14, 0x85, 0x89, 0x6a, 0xc2, 0xe1, 0xb5, 0x14,
	0x87, 0x39, 0xf2, 0x13, 0x0e, 0x93, 0xa2, 0x51, 0x24, 0x5e, 0x80, 0xd1, 0xa5, 0x20, 0xa0, 0x81,
	0x24, 0x5e, 0x05, 0x27, 0xc0, 0x74, 0x70, 0x02, 0x40, 0xcb, 0x87, 0x70, 0x6e, 0x1e, 0xc6, 0xb9,
	0x32, 0x90, 0x27, 0xfd, 0xc6, 0x20, 0xe9, 0x27, 0x0f, 0x20, 0x3d, 0x89, 0x35, 0x61, 0x1d, 0x12,
	0xa6, 0xad, 0x72, 0xc4, 0xb4, 0x75, 0x1d, 0x20, 0x29, 0x57, 0x34, 0x0b, 0xe5, 0x7b, 0x84, 0x6d,
	0xd1, 0x8e, 0xc8, 0x80, 0x0a, 0x96, 0x2b, 0xde, 0x93, 0x16, 0x6d, 0x66, 0x0b, 0xd2, 0xab, 0x58,
	0x7c, 0x5b, 0xcf, 0x35, 0x55, 0xd4, 0xe8, 0x0e, 0x8c, 0xdd, 0xa7, 0x1d, 0xb2, 0xd2, 0x09, 0x0d,
	0xad, 0x5e, 0x6c, 0x54, 0x5b, 0xef, 0xed, 0xec, 0xce, 0x9d, 0x7f, 0xfd, 0x7b, 0xd0, 0xc4, 0x64,
	0x83, 0x04, 0xc4, 0x73, 0x08, 0x8e, 0x0d, 0xa0, 0xbb, 0x30, 0xb6, 0xe4, 0xb1, 0x80, 0xfa, 0xdb,
	0xd1, 0x71, 0xad, 0xcb, 0x4f, 0x77, 0xe7, 0x0a, 0x3b, 0xbb, 0x73, 0xe7, 0x86, 0xb0, 0x27, 0x35,
	0x71, 0x6c, 0x02, 0x9d, 0x87, 0x69, 0x4c, 0xfc, 0xae, 0xeb, 0xd8, 0xcc, 0xa5, 0xde, 0x47, 0xb6,
	0xc3, 0x68, 0x20, 0x12, 0xb2, 0x86, 0x07, 0x37, 0xac, 0xef, 0x61, 0x32, 0xdb, 0x90, 0xd2, 0x7d,
	0x5a, 0xcb, 0xf6, 0xe9, 0x33, 0xaf, 0xe9, 0x7d, 0x51, 0x11, 0xbc, 0x93, 0xef, 0x7c, 0x53, 0xf9,
	0xce, 0x17, 0xef, 0x5b, 0x8f, 0xa0, 0x9a, 0xee, 0x6d, 0xe8, 0x6c, 0xdc, 0x00, 0xa3, 0x6a, 0x9c,
	0x6e, 0x46, 0xcf, 0xa6, 0xc0, 0xda, 0xfc, 0xed, 0x8c, 0x7b, 0xdf, 0x19, 0xa8, 0x09, 0xa7, 0x56,
	0x7d, 0xdb, 0x4b, 0xd1, 0x94, 0x05, 0xad, 0x5f, 0x34, 0x98, 0x39, 0xb0, 0xb3, 0xa0, 0x87, 0x50,
	0xbb, 0x6b, 0x87, 0x8c, 0x13, 0x90, 0x1c, 0x58, 0x6b, 0x5d, 0x93, 0xf7, 0xde, 0x1c, 0xe2, 0xde,
	0x85, 0xde, 0xfd, 0x7e, 0x6f, 0x9d, 0x04, 0x38, 0x6b, 0x0c, 0xcd, 0x43, 0xb9, 0x4d, 0x82, 0x9e,
	0xcb, 0xe4, 0x55, 0x4d, 0xaa, 0xae, 0x22, 0x50, 0x2c, 0x77, 0xad, 0x5f, 0x35, 0xd0, 0xf3, 0x5d,
	0x0b, 0xad, 0xc3, 0x84, 0xc2, 0xd6, 0xa8, 0x70, 0xac, 0xda, 0xfa, 0x50, 0x3a, 0xf6, 0xe6, 0xaf,
	0x74, 0xda, 0xe8, 0xd0, 0x0e, 0x3e, 0xd7, 0x40, 0xcf, 0x3f, 0x25, 0x68, 0x03, 0x2a, 0x77, 0xa8,
	0xeb, 0x2d, 0x74, 0x6d, 0xb7, 0x27, 0xdd, 0x5b, 0xde, 0xd9, 0x9d, 0x5b, 0x1c, 0xc2, 0x35, 0x87,
	0x17, 0xa2, 0x17, 0xf6, 0xc3, 0x27, 0x97, 0xe4, 0xfc, 0x15, 0x36, 0xf9, 0xb5, 0x29, 0x7b, 0x38,
	0x31, 0xcd, 0xfb, 0x4d, 0xc4, 0xcd, 0xc8, 0x21, 0xc9, 0xd0, 0x2a, 0xf1, 0x5b, 0x89, 0x53, 0x22,
	0x89, 0xa9, 0x78, 0x64, 0x4c, 0x2e, 0xd4, 0x54, 0x2f, 0xe4, 0x59, 0x82, 0xea, 0x30, 0xc1, 0xfb,
	0x9b, 0xbb, 0xc1, 0x0b, 0x23, 0xca, 0x84, 0x2a, 0x4e, 0x43, 0x7c, 0xae, 0x59, 0x73, 0x7b, 0x24,
	0x64, 0x76, 0xcf, 0x17, 0xde, 0x14, 0x71, 0x02, 0xf0, 0x7a, 0xf9, 0x8c, 0x04, 0xa1, 0x4b, 0x3d,
	0x71, 0x72, 0x05, 0xc7, 0x4b, 0xab, 0x07, 0x7a, 0xfe, 0x39, 0x45, 0x37, 0x73, 0xc7, 0xcb, 0x54,
	0x9f, 0x19, 0x68, 0xde, 0x7c, 0x13, 0xe7, 0x5c, 0x3d, 0x0d, 0x15, 0xde, 0x8e, 0x6d, 0xd6, 0x0f,
	0x88, 0x4c, 0xf9, 0x04, 0xb0, 0x6c, 0x98, 0xca, 0x3d, 0xc2, 0xe8, 0x7e, 0xd4, 0xa5, 0x30, 0xd9,
	0x90, 0x4c, 0x5d, 0x91, 0x89, 0xf4, 0x06, 0x9d, 0x0a, 0x93, 0x0d, 0xeb, 0x26, 0x4c, 0xa4, 0x9e,
	0x3d, 0xde, 0x3c, 0x31, 0x09, 0xfb, 0x5d, 0x26, 0x6f, 0x4d, 0xae, 0xd0, 0xf1, 0xf8, 0xa9, 0x18,
	0x11, 0x17, 0x12, 0x2d, 0xac, 0x47, 0x31, 0x43, 0xe8, 0xaa, 0x9a, 0xbf, 0xf2, 0xe1, 0x47, 0x02,
	0x72, 0x53, 0x12, 0x1c, 0xcb, 0xbe, 0x26, 0xfc, 0xdf, 0x46, 0xa0, 0x96, 0x51, 0x47, 0x0d, 0x98,
	0xe2, 0xe9, 0x44, 0x82, 0x76, 0x7f, 0xbd, 0xeb, 0x3a, 0x9f, 0x90, 0x6d, 0xe9, 0x67, 0x1e, 0xe6,
	0x92, 0x4b, 0xdf, 0xfa, 0x6e, 0x40, 0xf2, 0x3c, 0xe7, 0x61, 0xf4, 0x45, 0xb6, 0x3c, 0x8b, 0x6f,
	0x61, 0x80, 0xce, 0x94, 0xe6, 0x97, 0x2a, 0x67, 0xd8, 0x76, 0x4c, 0x5d, 0xe9, 0x3f, 0x50, 0x37,
	0x60, 0xcd, 0xfa, 0x51, 0x83, 0xe9, 0x81, 0xe9, 0x02, 0x5d, 0x82, 0xd2, 0x02, 0xed, 0x44, 0xe9,
	0x3f, 0x99, 0x0c, 0x66, 0x03, 0x82, 0x5c, 0x08, 0x0b, 0x51, 0xa4, 0x43, 0x71, 0x69, 0xed, 0xb6,
	0xb8, 0xa8, 0x1a, 0xe6, 0x9f, 0x49, 0xc9, 0x16, 0x87, 0x29, 0x59, 0xeb, 0x03, 0xa8, 0x65, 0x26,
	0x23, 0x5e, 0x4a, 0xab, 0x7d, 0xc7, 0x21, 0x61, 0x28, 0xfc, 0x18, 0xc7, 0xf1, 0xf2, 0x90, 0x8c,
	0xfa, 0x47, 0x83, 0xe9, 0x81, 0x69, 0xe7, 0xb0, 0x50, 0x06, 0x04, 0x53, 0xa1, 0x1c, 0x5d, 0xe1,
	0xea, 0xf0, 0x62, 0xea, 0xf0, 0x54, 0xc3, 0x29, 0x1d, 0xd5, 0x70, 0xd0, 0x3c, 0x4c, 0x2e, 0xba,
	0xa1, 0x43, 0x9f, 0x90, 0x60, 0x7b, 0x81, 0xf6, 0x3d, 0x26, 0xe6, 0xb5, 0x1a, 0xce, 0xa1, 0xc9,
	0xe5, 0x95, 0x87, 0xba, 0xbc, 0x79, 0xd0, 0xf3, 0xe3, 0x1a, 0x1f, 0x5a, 0x38, 0x26, 0xb3, 0x5c,
	0x7c, 0x5b, 0xff, 0x87, 0x5a, 0x66, 0x42, 0x4b, 0xa2, 0xd1, 0xd2, 0x57, 0x69, 0xc0, 0xec, 0xc1,
	0x03, 0x99, 0x75, 0x8c, 0xcf, 0x13, 0xb9, 0x29, 0xeb, 0xdc, 0x03, 0x98, 0x39, 0x30, 0x35, 0x50,
	0x15, 0xc6, 0x6f, 0x3b, 0x0e, 0xf1, 0x19, 0xe9, 0xe8, 0x05, 0x84, 0xf2, 0x43, 0xa0, 0xae, 0xa1,
	0x69, 0xa8, 0x49, 0x6c, 0x8b, 0x06, 0x6c, 0x65, 0x51, 0x1f, 0x41, 0xc0, 0xfb, 0xc8, 0x57, 0xc4,
	0x61, 0x7a, 0xf1, 0xdc, 0x43, 0x98, 0x39, 0x90, 0x29, 0x34, 0xa1, 0x92, 0x23, 0x32, 0xfc, 0x79,
	0x40, 0xbd, 0x4d, 0x45, 0x92, 0x3e, 0x82, 0x74, 0xa8, 0x0a, 0xec, 0x9e, 0xed, 0x71, 0xf3, 0x7a,
	0x51, 0x21, 0xb2, 0x21, 0xeb, 0xa5, 0xd6, 0xad, 0xa7, 0x7b, 0x66, 0xe1, 0xd9, 0x9e, 0x59, 0x78,
	0xb1, 0x67, 0x16, 0x5e, 0xed, 0x99, 0xda, 0xdf, 0x7b, 0x66, 0xe1, 0x87, 0x7d, 0x53, 0xfb, 0x7d,
	0xdf, 0xd4, 0x9e, 0xee, 0x9b, 0xda, 0xb3, 0x7d, 0x53, 0xfb, 0x63, 0xdf, 0xd4, 0xfe, 0xdc, 0x37,
	0x0b, 0xaf, 0xf6, 0x4d, 0xed, 0xe7, 0x97, 0x66, 0xe1, 0xd9, 0x4b, 0xb3, 0xf0, 0xe2, 0xa5, 0x59,
	0x58, 0x2f, 0x8b, 0x7f, 0xe0, 0xdf, 0xff, 0x37, 0x00, 0x00, 0xff, 0xff, 0x27, 0x8e, 0xfe, 0x86,
	0x58, 0x10, 0x00, 0x00,
}

func (x BootstrapResponseCode) String() string {
	s, ok := BootstrapResponseCode_name[int32(x)]
	if ok {
		return s
	}
	return strconv.Itoa(int(x))
}
func (x AuthorizeResponseCode) String() string {
	s, ok := AuthorizeResponseCode_name[int32(x)]
	if ok {
		return s
	}
	return strconv.Itoa(int(x))
}
func (this *Packet) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Packet)
	if !ok {
		that2, ok := that.(Packet)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Polymorph != that1.Polymorph {
		return false
	}
	if that1.Sender == nil {
		if this.Sender != nil {
			return false
		}
	} else if !this.Sender.Equal(*that1.Sender) {
		return false
	}
	if that1.Receiver == nil {
		if this.Receiver != nil {
			return false
		}
	} else if !this.Receiver.Equal(*that1.Receiver) {
		return false
	}
	if this.RequestID != that1.RequestID {
		return false
	}
	if this.TraceID != that1.TraceID {
		return false
	}
	if this.Type != that1.Type {
		return false
	}
	if that1.Payload == nil {
		if this.Payload != nil {
			return false
		}
	} else if this.Payload == nil {
		return false
	} else if !this.Payload.Equal(that1.Payload) {
		return false
	}
	return true
}
func (this *Packet_Request) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Packet_Request)
	if !ok {
		that2, ok := that.(Packet_Request)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Request.Equal(that1.Request) {
		return false
	}
	return true
}
func (this *Packet_Response) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Packet_Response)
	if !ok {
		that2, ok := that.(Packet_Response)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Response.Equal(that1.Response) {
		return false
	}
	return true
}
func (this *Request) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Request)
	if !ok {
		that2, ok := that.(Request)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if that1.Request == nil {
		if this.Request != nil {
			return false
		}
	} else if this.Request == nil {
		return false
	} else if !this.Request.Equal(that1.Request) {
		return false
	}
	return true
}
func (this *Request_Ping) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Request_Ping)
	if !ok {
		that2, ok := that.(Request_Ping)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Ping.Equal(that1.Ping) {
		return false
	}
	return true
}
func (this *Request_RPC) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Request_RPC)
	if !ok {
		that2, ok := that.(Request_RPC)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.RPC.Equal(that1.RPC) {
		return false
	}
	return true
}
func (this *Request_Cascade) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Request_Cascade)
	if !ok {
		that2, ok := that.(Request_Cascade)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Cascade.Equal(that1.Cascade) {
		return false
	}
	return true
}
func (this *Request_Pulse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Request_Pulse)
	if !ok {
		that2, ok := that.(Request_Pulse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Pulse.Equal(that1.Pulse) {
		return false
	}
	return true
}
func (this *Request_Bootstrap) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Request_Bootstrap)
	if !ok {
		that2, ok := that.(Request_Bootstrap)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Bootstrap.Equal(that1.Bootstrap) {
		return false
	}
	return true
}
func (this *Request_Authorize) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Request_Authorize)
	if !ok {
		that2, ok := that.(Request_Authorize)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Authorize.Equal(that1.Authorize) {
		return false
	}
	return true
}
func (this *Request_SignCert) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Request_SignCert)
	if !ok {
		that2, ok := that.(Request_SignCert)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.SignCert.Equal(that1.SignCert) {
		return false
	}
	return true
}
func (this *Request_UpdateSchedule) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Request_UpdateSchedule)
	if !ok {
		that2, ok := that.(Request_UpdateSchedule)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.UpdateSchedule.Equal(that1.UpdateSchedule) {
		return false
	}
	return true
}
func (this *Request_Reconnect) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Request_Reconnect)
	if !ok {
		that2, ok := that.(Request_Reconnect)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Reconnect.Equal(that1.Reconnect) {
		return false
	}
	return true
}
func (this *Response) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Response)
	if !ok {
		that2, ok := that.(Response)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if that1.Response == nil {
		if this.Response != nil {
			return false
		}
	} else if this.Response == nil {
		return false
	} else if !this.Response.Equal(that1.Response) {
		return false
	}
	return true
}
func (this *Response_Ping) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Response_Ping)
	if !ok {
		that2, ok := that.(Response_Ping)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Ping.Equal(that1.Ping) {
		return false
	}
	return true
}
func (this *Response_RPC) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Response_RPC)
	if !ok {
		that2, ok := that.(Response_RPC)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.RPC.Equal(that1.RPC) {
		return false
	}
	return true
}
func (this *Response_Basic) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Response_Basic)
	if !ok {
		that2, ok := that.(Response_Basic)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Basic.Equal(that1.Basic) {
		return false
	}
	return true
}
func (this *Response_Bootstrap) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Response_Bootstrap)
	if !ok {
		that2, ok := that.(Response_Bootstrap)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Bootstrap.Equal(that1.Bootstrap) {
		return false
	}
	return true
}
func (this *Response_Authorize) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Response_Authorize)
	if !ok {
		that2, ok := that.(Response_Authorize)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Authorize.Equal(that1.Authorize) {
		return false
	}
	return true
}
func (this *Response_SignCert) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Response_SignCert)
	if !ok {
		that2, ok := that.(Response_SignCert)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.SignCert.Equal(that1.SignCert) {
		return false
	}
	return true
}
func (this *Response_Error) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Response_Error)
	if !ok {
		that2, ok := that.(Response_Error)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Error.Equal(that1.Error) {
		return false
	}
	return true
}
func (this *Response_UpdateSchedule) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Response_UpdateSchedule)
	if !ok {
		that2, ok := that.(Response_UpdateSchedule)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.UpdateSchedule.Equal(that1.UpdateSchedule) {
		return false
	}
	return true
}
func (this *Response_Reconnect) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Response_Reconnect)
	if !ok {
		that2, ok := that.(Response_Reconnect)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Reconnect.Equal(that1.Reconnect) {
		return false
	}
	return true
}
func (this *Ping) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Ping)
	if !ok {
		that2, ok := that.(Ping)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	return true
}
func (this *RPCRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*RPCRequest)
	if !ok {
		that2, ok := that.(RPCRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Method != that1.Method {
		return false
	}
	if !bytes.Equal(this.Data, that1.Data) {
		return false
	}
	return true
}
func (this *Cascade) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Cascade)
	if !ok {
		that2, ok := that.(Cascade)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.NodeIds) != len(that1.NodeIds) {
		return false
	}
	for i := range this.NodeIds {
		if !this.NodeIds[i].Equal(that1.NodeIds[i]) {
			return false
		}
	}
	if !this.Entropy.Equal(that1.Entropy) {
		return false
	}
	if this.ReplicationFactor != that1.ReplicationFactor {
		return false
	}
	return true
}
func (this *CascadeRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*CascadeRequest)
	if !ok {
		that2, ok := that.(CascadeRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.TraceID != that1.TraceID {
		return false
	}
	if !this.RPC.Equal(that1.RPC) {
		return false
	}
	if !this.Cascade.Equal(that1.Cascade) {
		return false
	}
	return true
}
func (this *PulseRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*PulseRequest)
	if !ok {
		that2, ok := that.(PulseRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Pulse.Equal(that1.Pulse) {
		return false
	}
	if !bytes.Equal(this.TraceSpanData, that1.TraceSpanData) {
		return false
	}
	return true
}
func (this *UpdateScheduleRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*UpdateScheduleRequest)
	if !ok {
		that2, ok := that.(UpdateScheduleRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.LastNodePulse.Equal(that1.LastNodePulse) {
		return false
	}
	if !this.Permit.Equal(that1.Permit) {
		return false
	}
	return true
}
func (this *ReconnectRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ReconnectRequest)
	if !ok {
		that2, ok := that.(ReconnectRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.ReconnectTo.Equal(that1.ReconnectTo) {
		return false
	}
	if !this.Permit.Equal(that1.Permit) {
		return false
	}
	return true
}
func (this *BootstrapRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*BootstrapRequest)
	if !ok {
		that2, ok := that.(BootstrapRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if that1.JoinClaim == nil {
		if this.JoinClaim != nil {
			return false
		}
	} else if !this.JoinClaim.Equal(*that1.JoinClaim) {
		return false
	}
	if !this.Pulse.Equal(&that1.Pulse) {
		return false
	}
	if !this.Permit.Equal(that1.Permit) {
		return false
	}
	return true
}
func (this *AuthorizeData) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*AuthorizeData)
	if !ok {
		that2, ok := that.(AuthorizeData)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !bytes.Equal(this.Certificate, that1.Certificate) {
		return false
	}
	if this.Timestamp != that1.Timestamp {
		return false
	}
	if this.Version != that1.Version {
		return false
	}
	return true
}
func (this *AuthorizeRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*AuthorizeRequest)
	if !ok {
		that2, ok := that.(AuthorizeRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.AuthorizeData.Equal(that1.AuthorizeData) {
		return false
	}
	if !bytes.Equal(this.Signature, that1.Signature) {
		return false
	}
	return true
}
func (this *SignCertRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*SignCertRequest)
	if !ok {
		that2, ok := that.(SignCertRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.NodeRef.Equal(that1.NodeRef) {
		return false
	}
	return true
}
func (this *RPCResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*RPCResponse)
	if !ok {
		that2, ok := that.(RPCResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !bytes.Equal(this.Result, that1.Result) {
		return false
	}
	if this.Error != that1.Error {
		return false
	}
	return true
}
func (this *Permit) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Permit)
	if !ok {
		that2, ok := that.(Permit)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Payload.Equal(&that1.Payload) {
		return false
	}
	if !bytes.Equal(this.Signature, that1.Signature) {
		return false
	}
	return true
}
func (this *PermitPayload) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*PermitPayload)
	if !ok {
		that2, ok := that.(PermitPayload)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !bytes.Equal(this.JoinerPublicKey, that1.JoinerPublicKey) {
		return false
	}
	if this.ExpireTimestamp != that1.ExpireTimestamp {
		return false
	}
	if that1.ReconnectTo == nil {
		if this.ReconnectTo != nil {
			return false
		}
	} else if !this.ReconnectTo.Equal(*that1.ReconnectTo) {
		return false
	}
	if !this.AuthorityNodeRef.Equal(that1.AuthorityNodeRef) {
		return false
	}
	return true
}
func (this *BootstrapResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*BootstrapResponse)
	if !ok {
		that2, ok := that.(BootstrapResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Code != that1.Code {
		return false
	}
	if this.ETA != that1.ETA {
		return false
	}
	if !this.Pulse.Equal(&that1.Pulse) {
		return false
	}
	return true
}
func (this *BasicResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*BasicResponse)
	if !ok {
		that2, ok := that.(BasicResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Success != that1.Success {
		return false
	}
	if this.Error != that1.Error {
		return false
	}
	return true
}
func (this *AuthorizeResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*AuthorizeResponse)
	if !ok {
		that2, ok := that.(AuthorizeResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Code != that1.Code {
		return false
	}
	if this.Timestamp != that1.Timestamp {
		return false
	}
	if this.Error != that1.Error {
		return false
	}
	if !this.Permit.Equal(that1.Permit) {
		return false
	}
	if this.DiscoveryCount != that1.DiscoveryCount {
		return false
	}
	if !this.Pulse.Equal(&that1.Pulse) {
		return false
	}
	return true
}
func (this *SignCertResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*SignCertResponse)
	if !ok {
		that2, ok := that.(SignCertResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !bytes.Equal(this.Sign, that1.Sign) {
		return false
	}
	return true
}
func (this *ErrorResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ErrorResponse)
	if !ok {
		that2, ok := that.(ErrorResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Error != that1.Error {
		return false
	}
	return true
}
func (this *UpdateScheduleResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*UpdateScheduleResponse)
	if !ok {
		that2, ok := that.(UpdateScheduleResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	return true
}
func (this *ReconnectResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ReconnectResponse)
	if !ok {
		that2, ok := that.(ReconnectResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	return true
}
func (this *Packet) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 12)
	s = append(s, "&packet.Packet{")
	s = append(s, "Polymorph: "+fmt.Sprintf("%#v", this.Polymorph)+",\n")
	s = append(s, "Sender: "+fmt.Sprintf("%#v", this.Sender)+",\n")
	s = append(s, "Receiver: "+fmt.Sprintf("%#v", this.Receiver)+",\n")
	s = append(s, "RequestID: "+fmt.Sprintf("%#v", this.RequestID)+",\n")
	s = append(s, "TraceID: "+fmt.Sprintf("%#v", this.TraceID)+",\n")
	s = append(s, "Type: "+fmt.Sprintf("%#v", this.Type)+",\n")
	if this.Payload != nil {
		s = append(s, "Payload: "+fmt.Sprintf("%#v", this.Payload)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *Packet_Request) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&packet.Packet_Request{` +
		`Request:` + fmt.Sprintf("%#v", this.Request) + `}`}, ", ")
	return s
}
func (this *Packet_Response) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&packet.Packet_Response{` +
		`Response:` + fmt.Sprintf("%#v", this.Response) + `}`}, ", ")
	return s
}
func (this *Request) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 13)
	s = append(s, "&packet.Request{")
	if this.Request != nil {
		s = append(s, "Request: "+fmt.Sprintf("%#v", this.Request)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *Request_Ping) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&packet.Request_Ping{` +
		`Ping:` + fmt.Sprintf("%#v", this.Ping) + `}`}, ", ")
	return s
}
func (this *Request_RPC) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&packet.Request_RPC{` +
		`RPC:` + fmt.Sprintf("%#v", this.RPC) + `}`}, ", ")
	return s
}
func (this *Request_Cascade) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&packet.Request_Cascade{` +
		`Cascade:` + fmt.Sprintf("%#v", this.Cascade) + `}`}, ", ")
	return s
}
func (this *Request_Pulse) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&packet.Request_Pulse{` +
		`Pulse:` + fmt.Sprintf("%#v", this.Pulse) + `}`}, ", ")
	return s
}
func (this *Request_Bootstrap) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&packet.Request_Bootstrap{` +
		`Bootstrap:` + fmt.Sprintf("%#v", this.Bootstrap) + `}`}, ", ")
	return s
}
func (this *Request_Authorize) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&packet.Request_Authorize{` +
		`Authorize:` + fmt.Sprintf("%#v", this.Authorize) + `}`}, ", ")
	return s
}
func (this *Request_SignCert) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&packet.Request_SignCert{` +
		`SignCert:` + fmt.Sprintf("%#v", this.SignCert) + `}`}, ", ")
	return s
}
func (this *Request_UpdateSchedule) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&packet.Request_UpdateSchedule{` +
		`UpdateSchedule:` + fmt.Sprintf("%#v", this.UpdateSchedule) + `}`}, ", ")
	return s
}
func (this *Request_Reconnect) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&packet.Request_Reconnect{` +
		`Reconnect:` + fmt.Sprintf("%#v", this.Reconnect) + `}`}, ", ")
	return s
}
func (this *Response) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 13)
	s = append(s, "&packet.Response{")
	if this.Response != nil {
		s = append(s, "Response: "+fmt.Sprintf("%#v", this.Response)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *Response_Ping) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&packet.Response_Ping{` +
		`Ping:` + fmt.Sprintf("%#v", this.Ping) + `}`}, ", ")
	return s
}
func (this *Response_RPC) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&packet.Response_RPC{` +
		`RPC:` + fmt.Sprintf("%#v", this.RPC) + `}`}, ", ")
	return s
}
func (this *Response_Basic) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&packet.Response_Basic{` +
		`Basic:` + fmt.Sprintf("%#v", this.Basic) + `}`}, ", ")
	return s
}
func (this *Response_Bootstrap) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&packet.Response_Bootstrap{` +
		`Bootstrap:` + fmt.Sprintf("%#v", this.Bootstrap) + `}`}, ", ")
	return s
}
func (this *Response_Authorize) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&packet.Response_Authorize{` +
		`Authorize:` + fmt.Sprintf("%#v", this.Authorize) + `}`}, ", ")
	return s
}
func (this *Response_SignCert) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&packet.Response_SignCert{` +
		`SignCert:` + fmt.Sprintf("%#v", this.SignCert) + `}`}, ", ")
	return s
}
func (this *Response_Error) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&packet.Response_Error{` +
		`Error:` + fmt.Sprintf("%#v", this.Error) + `}`}, ", ")
	return s
}
func (this *Response_UpdateSchedule) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&packet.Response_UpdateSchedule{` +
		`UpdateSchedule:` + fmt.Sprintf("%#v", this.UpdateSchedule) + `}`}, ", ")
	return s
}
func (this *Response_Reconnect) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&packet.Response_Reconnect{` +
		`Reconnect:` + fmt.Sprintf("%#v", this.Reconnect) + `}`}, ", ")
	return s
}
func (this *Ping) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 4)
	s = append(s, "&packet.Ping{")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *RPCRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&packet.RPCRequest{")
	s = append(s, "Method: "+fmt.Sprintf("%#v", this.Method)+",\n")
	s = append(s, "Data: "+fmt.Sprintf("%#v", this.Data)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *Cascade) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&packet.Cascade{")
	s = append(s, "NodeIds: "+fmt.Sprintf("%#v", this.NodeIds)+",\n")
	s = append(s, "Entropy: "+fmt.Sprintf("%#v", this.Entropy)+",\n")
	s = append(s, "ReplicationFactor: "+fmt.Sprintf("%#v", this.ReplicationFactor)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *CascadeRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&packet.CascadeRequest{")
	s = append(s, "TraceID: "+fmt.Sprintf("%#v", this.TraceID)+",\n")
	if this.RPC != nil {
		s = append(s, "RPC: "+fmt.Sprintf("%#v", this.RPC)+",\n")
	}
	if this.Cascade != nil {
		s = append(s, "Cascade: "+fmt.Sprintf("%#v", this.Cascade)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *PulseRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&packet.PulseRequest{")
	if this.Pulse != nil {
		s = append(s, "Pulse: "+fmt.Sprintf("%#v", this.Pulse)+",\n")
	}
	s = append(s, "TraceSpanData: "+fmt.Sprintf("%#v", this.TraceSpanData)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *UpdateScheduleRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&packet.UpdateScheduleRequest{")
	s = append(s, "LastNodePulse: "+fmt.Sprintf("%#v", this.LastNodePulse)+",\n")
	if this.Permit != nil {
		s = append(s, "Permit: "+fmt.Sprintf("%#v", this.Permit)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *ReconnectRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&packet.ReconnectRequest{")
	s = append(s, "ReconnectTo: "+fmt.Sprintf("%#v", this.ReconnectTo)+",\n")
	if this.Permit != nil {
		s = append(s, "Permit: "+fmt.Sprintf("%#v", this.Permit)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *BootstrapRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&packet.BootstrapRequest{")
	s = append(s, "JoinClaim: "+fmt.Sprintf("%#v", this.JoinClaim)+",\n")
	s = append(s, "Pulse: "+strings.Replace(this.Pulse.GoString(), `&`, ``, 1)+",\n")
	if this.Permit != nil {
		s = append(s, "Permit: "+fmt.Sprintf("%#v", this.Permit)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *AuthorizeData) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&packet.AuthorizeData{")
	s = append(s, "Certificate: "+fmt.Sprintf("%#v", this.Certificate)+",\n")
	s = append(s, "Timestamp: "+fmt.Sprintf("%#v", this.Timestamp)+",\n")
	s = append(s, "Version: "+fmt.Sprintf("%#v", this.Version)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *AuthorizeRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&packet.AuthorizeRequest{")
	if this.AuthorizeData != nil {
		s = append(s, "AuthorizeData: "+fmt.Sprintf("%#v", this.AuthorizeData)+",\n")
	}
	s = append(s, "Signature: "+fmt.Sprintf("%#v", this.Signature)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *SignCertRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&packet.SignCertRequest{")
	s = append(s, "NodeRef: "+fmt.Sprintf("%#v", this.NodeRef)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *RPCResponse) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&packet.RPCResponse{")
	s = append(s, "Result: "+fmt.Sprintf("%#v", this.Result)+",\n")
	s = append(s, "Error: "+fmt.Sprintf("%#v", this.Error)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *Permit) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&packet.Permit{")
	s = append(s, "Payload: "+strings.Replace(this.Payload.GoString(), `&`, ``, 1)+",\n")
	s = append(s, "Signature: "+fmt.Sprintf("%#v", this.Signature)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *PermitPayload) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 8)
	s = append(s, "&packet.PermitPayload{")
	s = append(s, "JoinerPublicKey: "+fmt.Sprintf("%#v", this.JoinerPublicKey)+",\n")
	s = append(s, "ExpireTimestamp: "+fmt.Sprintf("%#v", this.ExpireTimestamp)+",\n")
	s = append(s, "ReconnectTo: "+fmt.Sprintf("%#v", this.ReconnectTo)+",\n")
	s = append(s, "AuthorityNodeRef: "+fmt.Sprintf("%#v", this.AuthorityNodeRef)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *BootstrapResponse) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&packet.BootstrapResponse{")
	s = append(s, "Code: "+fmt.Sprintf("%#v", this.Code)+",\n")
	s = append(s, "ETA: "+fmt.Sprintf("%#v", this.ETA)+",\n")
	s = append(s, "Pulse: "+strings.Replace(this.Pulse.GoString(), `&`, ``, 1)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *BasicResponse) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&packet.BasicResponse{")
	s = append(s, "Success: "+fmt.Sprintf("%#v", this.Success)+",\n")
	s = append(s, "Error: "+fmt.Sprintf("%#v", this.Error)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *AuthorizeResponse) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 10)
	s = append(s, "&packet.AuthorizeResponse{")
	s = append(s, "Code: "+fmt.Sprintf("%#v", this.Code)+",\n")
	s = append(s, "Timestamp: "+fmt.Sprintf("%#v", this.Timestamp)+",\n")
	s = append(s, "Error: "+fmt.Sprintf("%#v", this.Error)+",\n")
	if this.Permit != nil {
		s = append(s, "Permit: "+fmt.Sprintf("%#v", this.Permit)+",\n")
	}
	s = append(s, "DiscoveryCount: "+fmt.Sprintf("%#v", this.DiscoveryCount)+",\n")
	s = append(s, "Pulse: "+strings.Replace(this.Pulse.GoString(), `&`, ``, 1)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *SignCertResponse) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&packet.SignCertResponse{")
	s = append(s, "Sign: "+fmt.Sprintf("%#v", this.Sign)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *ErrorResponse) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&packet.ErrorResponse{")
	s = append(s, "Error: "+fmt.Sprintf("%#v", this.Error)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *UpdateScheduleResponse) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 4)
	s = append(s, "&packet.UpdateScheduleResponse{")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *ReconnectResponse) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 4)
	s = append(s, "&packet.ReconnectResponse{")
	s = append(s, "}")
	return strings.Join(s, "")
}
func valueToGoStringPacket(v interface{}, typ string) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("func(v %v) *%v { return &v } ( %#v )", typ, typ, pv)
}
func (m *Packet) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Packet) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Polymorph != 0 {
		dAtA[i] = 0x80
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintPacket(dAtA, i, uint64(m.Polymorph))
	}
	if m.Sender != nil {
		dAtA[i] = 0xa2
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintPacket(dAtA, i, uint64(m.Sender.Size()))
		n1, err := m.Sender.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n1
	}
	if m.Receiver != nil {
		dAtA[i] = 0xaa
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintPacket(dAtA, i, uint64(m.Receiver.Size()))
		n2, err := m.Receiver.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n2
	}
	if m.RequestID != 0 {
		dAtA[i] = 0xb0
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintPacket(dAtA, i, uint64(m.RequestID))
	}
	if len(m.TraceID) > 0 {
		dAtA[i] = 0xba
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintPacket(dAtA, i, uint64(len(m.TraceID)))
		i += copy(dAtA[i:], m.TraceID)
	}
	if m.Type != 0 {
		dAtA[i] = 0xc0
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintPacket(dAtA, i, uint64(m.Type))
	}
	if m.Payload != nil {
		nn3, err := m.Payload.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += nn3
	}
	return i, nil
}

func (m *Packet_Request) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.Request != nil {
		dAtA[i] = 0xca
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintPacket(dAtA, i, uint64(m.Request.Size()))
		n4, err := m.Request.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n4
	}
	return i, nil
}
func (m *Packet_Response) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.Response != nil {
		dAtA[i] = 0xd2
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintPacket(dAtA, i, uint64(m.Response.Size()))
		n5, err := m.Response.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n5
	}
	return i, nil
}
func (m *Request) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Request) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Request != nil {
		nn6, err := m.Request.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += nn6
	}
	return i, nil
}

func (m *Request_Ping) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.Ping != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintPacket(dAtA, i, uint64(m.Ping.Size()))
		n7, err := m.Ping.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n7
	}
	return i, nil
}
func (m *Request_RPC) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.RPC != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintPacket(dAtA, i, uint64(m.RPC.Size()))
		n8, err := m.RPC.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n8
	}
	return i, nil
}
func (m *Request_Cascade) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.Cascade != nil {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintPacket(dAtA, i, uint64(m.Cascade.Size()))
		n9, err := m.Cascade.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n9
	}
	return i, nil
}
func (m *Request_Pulse) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.Pulse != nil {
		dAtA[i] = 0x22
		i++
		i = encodeVarintPacket(dAtA, i, uint64(m.Pulse.Size()))
		n10, err := m.Pulse.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n10
	}
	return i, nil
}
func (m *Request_Bootstrap) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.Bootstrap != nil {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintPacket(dAtA, i, uint64(m.Bootstrap.Size()))
		n11, err := m.Bootstrap.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n11
	}
	return i, nil
}
func (m *Request_Authorize) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.Authorize != nil {
		dAtA[i] = 0x32
		i++
		i = encodeVarintPacket(dAtA, i, uint64(m.Authorize.Size()))
		n12, err := m.Authorize.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n12
	}
	return i, nil
}
func (m *Request_SignCert) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.SignCert != nil {
		dAtA[i] = 0x3a
		i++
		i = encodeVarintPacket(dAtA, i, uint64(m.SignCert.Size()))
		n13, err := m.SignCert.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n13
	}
	return i, nil
}
func (m *Request_UpdateSchedule) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.UpdateSchedule != nil {
		dAtA[i] = 0x42
		i++
		i = encodeVarintPacket(dAtA, i, uint64(m.UpdateSchedule.Size()))
		n14, err := m.UpdateSchedule.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n14
	}
	return i, nil
}
func (m *Request_Reconnect) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.Reconnect != nil {
		dAtA[i] = 0x4a
		i++
		i = encodeVarintPacket(dAtA, i, uint64(m.Reconnect.Size()))
		n15, err := m.Reconnect.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n15
	}
	return i, nil
}
func (m *Response) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Response) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Response != nil {
		nn16, err := m.Response.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += nn16
	}
	return i, nil
}

func (m *Response_Ping) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.Ping != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintPacket(dAtA, i, uint64(m.Ping.Size()))
		n17, err := m.Ping.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n17
	}
	return i, nil
}
func (m *Response_RPC) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.RPC != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintPacket(dAtA, i, uint64(m.RPC.Size()))
		n18, err := m.RPC.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n18
	}
	return i, nil
}
func (m *Response_Basic) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.Basic != nil {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintPacket(dAtA, i, uint64(m.Basic.Size()))
		n19, err := m.Basic.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n19
	}
	return i, nil
}
func (m *Response_Bootstrap) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.Bootstrap != nil {
		dAtA[i] = 0x22
		i++
		i = encodeVarintPacket(dAtA, i, uint64(m.Bootstrap.Size()))
		n20, err := m.Bootstrap.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n20
	}
	return i, nil
}
func (m *Response_Authorize) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.Authorize != nil {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintPacket(dAtA, i, uint64(m.Authorize.Size()))
		n21, err := m.Authorize.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n21
	}
	return i, nil
}
func (m *Response_SignCert) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.SignCert != nil {
		dAtA[i] = 0x32
		i++
		i = encodeVarintPacket(dAtA, i, uint64(m.SignCert.Size()))
		n22, err := m.SignCert.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n22
	}
	return i, nil
}
func (m *Response_Error) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.Error != nil {
		dAtA[i] = 0x3a
		i++
		i = encodeVarintPacket(dAtA, i, uint64(m.Error.Size()))
		n23, err := m.Error.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n23
	}
	return i, nil
}
func (m *Response_UpdateSchedule) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.UpdateSchedule != nil {
		dAtA[i] = 0x42
		i++
		i = encodeVarintPacket(dAtA, i, uint64(m.UpdateSchedule.Size()))
		n24, err := m.UpdateSchedule.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n24
	}
	return i, nil
}
func (m *Response_Reconnect) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.Reconnect != nil {
		dAtA[i] = 0x4a
		i++
		i = encodeVarintPacket(dAtA, i, uint64(m.Reconnect.Size()))
		n25, err := m.Reconnect.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n25
	}
	return i, nil
}
func (m *Ping) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Ping) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	return i, nil
}

func (m *RPCRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RPCRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Method) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintPacket(dAtA, i, uint64(len(m.Method)))
		i += copy(dAtA[i:], m.Method)
	}
	if len(m.Data) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintPacket(dAtA, i, uint64(len(m.Data)))
		i += copy(dAtA[i:], m.Data)
	}
	return i, nil
}

func (m *Cascade) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Cascade) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.NodeIds) > 0 {
		for _, msg := range m.NodeIds {
			dAtA[i] = 0xa
			i++
			i = encodeVarintPacket(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	dAtA[i] = 0x12
	i++
	i = encodeVarintPacket(dAtA, i, uint64(m.Entropy.Size()))
	n26, err := m.Entropy.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n26
	if m.ReplicationFactor != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintPacket(dAtA, i, uint64(m.ReplicationFactor))
	}
	return i, nil
}

func (m *CascadeRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CascadeRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.TraceID) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintPacket(dAtA, i, uint64(len(m.TraceID)))
		i += copy(dAtA[i:], m.TraceID)
	}
	if m.RPC != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintPacket(dAtA, i, uint64(m.RPC.Size()))
		n27, err := m.RPC.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n27
	}
	if m.Cascade != nil {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintPacket(dAtA, i, uint64(m.Cascade.Size()))
		n28, err := m.Cascade.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n28
	}
	return i, nil
}

func (m *PulseRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PulseRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Pulse != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintPacket(dAtA, i, uint64(m.Pulse.Size()))
		n29, err := m.Pulse.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n29
	}
	if len(m.TraceSpanData) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintPacket(dAtA, i, uint64(len(m.TraceSpanData)))
		i += copy(dAtA[i:], m.TraceSpanData)
	}
	return i, nil
}

func (m *UpdateScheduleRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UpdateScheduleRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.LastNodePulse != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintPacket(dAtA, i, uint64(m.LastNodePulse))
	}
	if m.Permit != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintPacket(dAtA, i, uint64(m.Permit.Size()))
		n30, err := m.Permit.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n30
	}
	return i, nil
}

func (m *ReconnectRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ReconnectRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0xa
	i++
	i = encodeVarintPacket(dAtA, i, uint64(m.ReconnectTo.Size()))
	n31, err := m.ReconnectTo.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n31
	if m.Permit != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintPacket(dAtA, i, uint64(m.Permit.Size()))
		n32, err := m.Permit.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n32
	}
	return i, nil
}

func (m *BootstrapRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BootstrapRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.JoinClaim != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintPacket(dAtA, i, uint64(m.JoinClaim.Size()))
		n33, err := m.JoinClaim.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n33
	}
	dAtA[i] = 0x12
	i++
	i = encodeVarintPacket(dAtA, i, uint64(m.Pulse.Size()))
	n34, err := m.Pulse.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n34
	if m.Permit != nil {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintPacket(dAtA, i, uint64(m.Permit.Size()))
		n35, err := m.Permit.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n35
	}
	return i, nil
}

func (m *AuthorizeData) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AuthorizeData) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Certificate) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintPacket(dAtA, i, uint64(len(m.Certificate)))
		i += copy(dAtA[i:], m.Certificate)
	}
	if m.Timestamp != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintPacket(dAtA, i, uint64(m.Timestamp))
	}
	if len(m.Version) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintPacket(dAtA, i, uint64(len(m.Version)))
		i += copy(dAtA[i:], m.Version)
	}
	return i, nil
}

func (m *AuthorizeRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AuthorizeRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.AuthorizeData != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintPacket(dAtA, i, uint64(m.AuthorizeData.Size()))
		n36, err := m.AuthorizeData.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n36
	}
	if len(m.Signature) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintPacket(dAtA, i, uint64(len(m.Signature)))
		i += copy(dAtA[i:], m.Signature)
	}
	return i, nil
}

func (m *SignCertRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SignCertRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0xa
	i++
	i = encodeVarintPacket(dAtA, i, uint64(m.NodeRef.Size()))
	n37, err := m.NodeRef.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n37
	return i, nil
}

func (m *RPCResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RPCResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Result) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintPacket(dAtA, i, uint64(len(m.Result)))
		i += copy(dAtA[i:], m.Result)
	}
	if len(m.Error) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintPacket(dAtA, i, uint64(len(m.Error)))
		i += copy(dAtA[i:], m.Error)
	}
	return i, nil
}

func (m *Permit) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Permit) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0xa
	i++
	i = encodeVarintPacket(dAtA, i, uint64(m.Payload.Size()))
	n38, err := m.Payload.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n38
	if len(m.Signature) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintPacket(dAtA, i, uint64(len(m.Signature)))
		i += copy(dAtA[i:], m.Signature)
	}
	return i, nil
}

func (m *PermitPayload) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PermitPayload) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.JoinerPublicKey) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintPacket(dAtA, i, uint64(len(m.JoinerPublicKey)))
		i += copy(dAtA[i:], m.JoinerPublicKey)
	}
	if m.ExpireTimestamp != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintPacket(dAtA, i, uint64(m.ExpireTimestamp))
	}
	if m.ReconnectTo != nil {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintPacket(dAtA, i, uint64(m.ReconnectTo.Size()))
		n39, err := m.ReconnectTo.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n39
	}
	dAtA[i] = 0x22
	i++
	i = encodeVarintPacket(dAtA, i, uint64(m.AuthorityNodeRef.Size()))
	n40, err := m.AuthorityNodeRef.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n40
	return i, nil
}

func (m *BootstrapResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BootstrapResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Code != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintPacket(dAtA, i, uint64(m.Code))
	}
	if m.ETA != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintPacket(dAtA, i, uint64(m.ETA))
	}
	dAtA[i] = 0x1a
	i++
	i = encodeVarintPacket(dAtA, i, uint64(m.Pulse.Size()))
	n41, err := m.Pulse.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n41
	return i, nil
}

func (m *BasicResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BasicResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Success {
		dAtA[i] = 0x8
		i++
		if m.Success {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if len(m.Error) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintPacket(dAtA, i, uint64(len(m.Error)))
		i += copy(dAtA[i:], m.Error)
	}
	return i, nil
}

func (m *AuthorizeResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AuthorizeResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Code != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintPacket(dAtA, i, uint64(m.Code))
	}
	if m.Timestamp != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintPacket(dAtA, i, uint64(m.Timestamp))
	}
	if len(m.Error) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintPacket(dAtA, i, uint64(len(m.Error)))
		i += copy(dAtA[i:], m.Error)
	}
	if m.Permit != nil {
		dAtA[i] = 0x22
		i++
		i = encodeVarintPacket(dAtA, i, uint64(m.Permit.Size()))
		n42, err := m.Permit.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n42
	}
	if m.DiscoveryCount != 0 {
		dAtA[i] = 0x28
		i++
		i = encodeVarintPacket(dAtA, i, uint64(m.DiscoveryCount))
	}
	dAtA[i] = 0x32
	i++
	i = encodeVarintPacket(dAtA, i, uint64(m.Pulse.Size()))
	n43, err := m.Pulse.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n43
	return i, nil
}

func (m *SignCertResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SignCertResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Sign) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintPacket(dAtA, i, uint64(len(m.Sign)))
		i += copy(dAtA[i:], m.Sign)
	}
	return i, nil
}

func (m *ErrorResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ErrorResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Error) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintPacket(dAtA, i, uint64(len(m.Error)))
		i += copy(dAtA[i:], m.Error)
	}
	return i, nil
}

func (m *UpdateScheduleResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UpdateScheduleResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	return i, nil
}

func (m *ReconnectResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ReconnectResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	return i, nil
}

func encodeVarintPacket(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *Packet) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Polymorph != 0 {
		n += 2 + sovPacket(uint64(m.Polymorph))
	}
	if m.Sender != nil {
		l = m.Sender.Size()
		n += 2 + l + sovPacket(uint64(l))
	}
	if m.Receiver != nil {
		l = m.Receiver.Size()
		n += 2 + l + sovPacket(uint64(l))
	}
	if m.RequestID != 0 {
		n += 2 + sovPacket(uint64(m.RequestID))
	}
	l = len(m.TraceID)
	if l > 0 {
		n += 2 + l + sovPacket(uint64(l))
	}
	if m.Type != 0 {
		n += 2 + sovPacket(uint64(m.Type))
	}
	if m.Payload != nil {
		n += m.Payload.Size()
	}
	return n
}

func (m *Packet_Request) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Request != nil {
		l = m.Request.Size()
		n += 2 + l + sovPacket(uint64(l))
	}
	return n
}
func (m *Packet_Response) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Response != nil {
		l = m.Response.Size()
		n += 2 + l + sovPacket(uint64(l))
	}
	return n
}
func (m *Request) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Request != nil {
		n += m.Request.Size()
	}
	return n
}

func (m *Request_Ping) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Ping != nil {
		l = m.Ping.Size()
		n += 1 + l + sovPacket(uint64(l))
	}
	return n
}
func (m *Request_RPC) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.RPC != nil {
		l = m.RPC.Size()
		n += 1 + l + sovPacket(uint64(l))
	}
	return n
}
func (m *Request_Cascade) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Cascade != nil {
		l = m.Cascade.Size()
		n += 1 + l + sovPacket(uint64(l))
	}
	return n
}
func (m *Request_Pulse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Pulse != nil {
		l = m.Pulse.Size()
		n += 1 + l + sovPacket(uint64(l))
	}
	return n
}
func (m *Request_Bootstrap) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Bootstrap != nil {
		l = m.Bootstrap.Size()
		n += 1 + l + sovPacket(uint64(l))
	}
	return n
}
func (m *Request_Authorize) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Authorize != nil {
		l = m.Authorize.Size()
		n += 1 + l + sovPacket(uint64(l))
	}
	return n
}
func (m *Request_SignCert) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.SignCert != nil {
		l = m.SignCert.Size()
		n += 1 + l + sovPacket(uint64(l))
	}
	return n
}
func (m *Request_UpdateSchedule) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.UpdateSchedule != nil {
		l = m.UpdateSchedule.Size()
		n += 1 + l + sovPacket(uint64(l))
	}
	return n
}
func (m *Request_Reconnect) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Reconnect != nil {
		l = m.Reconnect.Size()
		n += 1 + l + sovPacket(uint64(l))
	}
	return n
}
func (m *Response) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Response != nil {
		n += m.Response.Size()
	}
	return n
}

func (m *Response_Ping) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Ping != nil {
		l = m.Ping.Size()
		n += 1 + l + sovPacket(uint64(l))
	}
	return n
}
func (m *Response_RPC) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.RPC != nil {
		l = m.RPC.Size()
		n += 1 + l + sovPacket(uint64(l))
	}
	return n
}
func (m *Response_Basic) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Basic != nil {
		l = m.Basic.Size()
		n += 1 + l + sovPacket(uint64(l))
	}
	return n
}
func (m *Response_Bootstrap) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Bootstrap != nil {
		l = m.Bootstrap.Size()
		n += 1 + l + sovPacket(uint64(l))
	}
	return n
}
func (m *Response_Authorize) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Authorize != nil {
		l = m.Authorize.Size()
		n += 1 + l + sovPacket(uint64(l))
	}
	return n
}
func (m *Response_SignCert) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.SignCert != nil {
		l = m.SignCert.Size()
		n += 1 + l + sovPacket(uint64(l))
	}
	return n
}
func (m *Response_Error) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Error != nil {
		l = m.Error.Size()
		n += 1 + l + sovPacket(uint64(l))
	}
	return n
}
func (m *Response_UpdateSchedule) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.UpdateSchedule != nil {
		l = m.UpdateSchedule.Size()
		n += 1 + l + sovPacket(uint64(l))
	}
	return n
}
func (m *Response_Reconnect) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Reconnect != nil {
		l = m.Reconnect.Size()
		n += 1 + l + sovPacket(uint64(l))
	}
	return n
}
func (m *Ping) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *RPCRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Method)
	if l > 0 {
		n += 1 + l + sovPacket(uint64(l))
	}
	l = len(m.Data)
	if l > 0 {
		n += 1 + l + sovPacket(uint64(l))
	}
	return n
}

func (m *Cascade) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.NodeIds) > 0 {
		for _, e := range m.NodeIds {
			l = e.Size()
			n += 1 + l + sovPacket(uint64(l))
		}
	}
	l = m.Entropy.Size()
	n += 1 + l + sovPacket(uint64(l))
	if m.ReplicationFactor != 0 {
		n += 1 + sovPacket(uint64(m.ReplicationFactor))
	}
	return n
}

func (m *CascadeRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.TraceID)
	if l > 0 {
		n += 1 + l + sovPacket(uint64(l))
	}
	if m.RPC != nil {
		l = m.RPC.Size()
		n += 1 + l + sovPacket(uint64(l))
	}
	if m.Cascade != nil {
		l = m.Cascade.Size()
		n += 1 + l + sovPacket(uint64(l))
	}
	return n
}

func (m *PulseRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Pulse != nil {
		l = m.Pulse.Size()
		n += 1 + l + sovPacket(uint64(l))
	}
	l = len(m.TraceSpanData)
	if l > 0 {
		n += 1 + l + sovPacket(uint64(l))
	}
	return n
}

func (m *UpdateScheduleRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.LastNodePulse != 0 {
		n += 1 + sovPacket(uint64(m.LastNodePulse))
	}
	if m.Permit != nil {
		l = m.Permit.Size()
		n += 1 + l + sovPacket(uint64(l))
	}
	return n
}

func (m *ReconnectRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.ReconnectTo.Size()
	n += 1 + l + sovPacket(uint64(l))
	if m.Permit != nil {
		l = m.Permit.Size()
		n += 1 + l + sovPacket(uint64(l))
	}
	return n
}

func (m *BootstrapRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.JoinClaim != nil {
		l = m.JoinClaim.Size()
		n += 1 + l + sovPacket(uint64(l))
	}
	l = m.Pulse.Size()
	n += 1 + l + sovPacket(uint64(l))
	if m.Permit != nil {
		l = m.Permit.Size()
		n += 1 + l + sovPacket(uint64(l))
	}
	return n
}

func (m *AuthorizeData) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Certificate)
	if l > 0 {
		n += 1 + l + sovPacket(uint64(l))
	}
	if m.Timestamp != 0 {
		n += 1 + sovPacket(uint64(m.Timestamp))
	}
	l = len(m.Version)
	if l > 0 {
		n += 1 + l + sovPacket(uint64(l))
	}
	return n
}

func (m *AuthorizeRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.AuthorizeData != nil {
		l = m.AuthorizeData.Size()
		n += 1 + l + sovPacket(uint64(l))
	}
	l = len(m.Signature)
	if l > 0 {
		n += 1 + l + sovPacket(uint64(l))
	}
	return n
}

func (m *SignCertRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.NodeRef.Size()
	n += 1 + l + sovPacket(uint64(l))
	return n
}

func (m *RPCResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Result)
	if l > 0 {
		n += 1 + l + sovPacket(uint64(l))
	}
	l = len(m.Error)
	if l > 0 {
		n += 1 + l + sovPacket(uint64(l))
	}
	return n
}

func (m *Permit) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Payload.Size()
	n += 1 + l + sovPacket(uint64(l))
	l = len(m.Signature)
	if l > 0 {
		n += 1 + l + sovPacket(uint64(l))
	}
	return n
}

func (m *PermitPayload) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.JoinerPublicKey)
	if l > 0 {
		n += 1 + l + sovPacket(uint64(l))
	}
	if m.ExpireTimestamp != 0 {
		n += 1 + sovPacket(uint64(m.ExpireTimestamp))
	}
	if m.ReconnectTo != nil {
		l = m.ReconnectTo.Size()
		n += 1 + l + sovPacket(uint64(l))
	}
	l = m.AuthorityNodeRef.Size()
	n += 1 + l + sovPacket(uint64(l))
	return n
}

func (m *BootstrapResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Code != 0 {
		n += 1 + sovPacket(uint64(m.Code))
	}
	if m.ETA != 0 {
		n += 1 + sovPacket(uint64(m.ETA))
	}
	l = m.Pulse.Size()
	n += 1 + l + sovPacket(uint64(l))
	return n
}

func (m *BasicResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Success {
		n += 2
	}
	l = len(m.Error)
	if l > 0 {
		n += 1 + l + sovPacket(uint64(l))
	}
	return n
}

func (m *AuthorizeResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Code != 0 {
		n += 1 + sovPacket(uint64(m.Code))
	}
	if m.Timestamp != 0 {
		n += 1 + sovPacket(uint64(m.Timestamp))
	}
	l = len(m.Error)
	if l > 0 {
		n += 1 + l + sovPacket(uint64(l))
	}
	if m.Permit != nil {
		l = m.Permit.Size()
		n += 1 + l + sovPacket(uint64(l))
	}
	if m.DiscoveryCount != 0 {
		n += 1 + sovPacket(uint64(m.DiscoveryCount))
	}
	l = m.Pulse.Size()
	n += 1 + l + sovPacket(uint64(l))
	return n
}

func (m *SignCertResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Sign)
	if l > 0 {
		n += 1 + l + sovPacket(uint64(l))
	}
	return n
}

func (m *ErrorResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Error)
	if l > 0 {
		n += 1 + l + sovPacket(uint64(l))
	}
	return n
}

func (m *UpdateScheduleResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *ReconnectResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func sovPacket(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozPacket(x uint64) (n int) {
	return sovPacket(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (this *Packet) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&Packet{`,
		`Polymorph:` + fmt.Sprintf("%v", this.Polymorph) + `,`,
		`Sender:` + fmt.Sprintf("%v", this.Sender) + `,`,
		`Receiver:` + fmt.Sprintf("%v", this.Receiver) + `,`,
		`RequestID:` + fmt.Sprintf("%v", this.RequestID) + `,`,
		`TraceID:` + fmt.Sprintf("%v", this.TraceID) + `,`,
		`Type:` + fmt.Sprintf("%v", this.Type) + `,`,
		`Payload:` + fmt.Sprintf("%v", this.Payload) + `,`,
		`}`,
	}, "")
	return s
}
func (this *Packet_Request) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&Packet_Request{`,
		`Request:` + strings.Replace(fmt.Sprintf("%v", this.Request), "Request", "Request", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *Packet_Response) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&Packet_Response{`,
		`Response:` + strings.Replace(fmt.Sprintf("%v", this.Response), "Response", "Response", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *Request) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&Request{`,
		`Request:` + fmt.Sprintf("%v", this.Request) + `,`,
		`}`,
	}, "")
	return s
}
func (this *Request_Ping) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&Request_Ping{`,
		`Ping:` + strings.Replace(fmt.Sprintf("%v", this.Ping), "Ping", "Ping", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *Request_RPC) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&Request_RPC{`,
		`RPC:` + strings.Replace(fmt.Sprintf("%v", this.RPC), "RPCRequest", "RPCRequest", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *Request_Cascade) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&Request_Cascade{`,
		`Cascade:` + strings.Replace(fmt.Sprintf("%v", this.Cascade), "CascadeRequest", "CascadeRequest", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *Request_Pulse) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&Request_Pulse{`,
		`Pulse:` + strings.Replace(fmt.Sprintf("%v", this.Pulse), "PulseRequest", "PulseRequest", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *Request_Bootstrap) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&Request_Bootstrap{`,
		`Bootstrap:` + strings.Replace(fmt.Sprintf("%v", this.Bootstrap), "BootstrapRequest", "BootstrapRequest", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *Request_Authorize) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&Request_Authorize{`,
		`Authorize:` + strings.Replace(fmt.Sprintf("%v", this.Authorize), "AuthorizeRequest", "AuthorizeRequest", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *Request_SignCert) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&Request_SignCert{`,
		`SignCert:` + strings.Replace(fmt.Sprintf("%v", this.SignCert), "SignCertRequest", "SignCertRequest", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *Request_UpdateSchedule) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&Request_UpdateSchedule{`,
		`UpdateSchedule:` + strings.Replace(fmt.Sprintf("%v", this.UpdateSchedule), "UpdateScheduleRequest", "UpdateScheduleRequest", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *Request_Reconnect) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&Request_Reconnect{`,
		`Reconnect:` + strings.Replace(fmt.Sprintf("%v", this.Reconnect), "ReconnectRequest", "ReconnectRequest", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *Response) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&Response{`,
		`Response:` + fmt.Sprintf("%v", this.Response) + `,`,
		`}`,
	}, "")
	return s
}
func (this *Response_Ping) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&Response_Ping{`,
		`Ping:` + strings.Replace(fmt.Sprintf("%v", this.Ping), "Ping", "Ping", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *Response_RPC) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&Response_RPC{`,
		`RPC:` + strings.Replace(fmt.Sprintf("%v", this.RPC), "RPCResponse", "RPCResponse", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *Response_Basic) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&Response_Basic{`,
		`Basic:` + strings.Replace(fmt.Sprintf("%v", this.Basic), "BasicResponse", "BasicResponse", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *Response_Bootstrap) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&Response_Bootstrap{`,
		`Bootstrap:` + strings.Replace(fmt.Sprintf("%v", this.Bootstrap), "BootstrapResponse", "BootstrapResponse", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *Response_Authorize) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&Response_Authorize{`,
		`Authorize:` + strings.Replace(fmt.Sprintf("%v", this.Authorize), "AuthorizeResponse", "AuthorizeResponse", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *Response_SignCert) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&Response_SignCert{`,
		`SignCert:` + strings.Replace(fmt.Sprintf("%v", this.SignCert), "SignCertResponse", "SignCertResponse", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *Response_Error) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&Response_Error{`,
		`Error:` + strings.Replace(fmt.Sprintf("%v", this.Error), "ErrorResponse", "ErrorResponse", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *Response_UpdateSchedule) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&Response_UpdateSchedule{`,
		`UpdateSchedule:` + strings.Replace(fmt.Sprintf("%v", this.UpdateSchedule), "UpdateScheduleResponse", "UpdateScheduleResponse", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *Response_Reconnect) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&Response_Reconnect{`,
		`Reconnect:` + strings.Replace(fmt.Sprintf("%v", this.Reconnect), "ReconnectResponse", "ReconnectResponse", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *Ping) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&Ping{`,
		`}`,
	}, "")
	return s
}
func (this *RPCRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&RPCRequest{`,
		`Method:` + fmt.Sprintf("%v", this.Method) + `,`,
		`Data:` + fmt.Sprintf("%v", this.Data) + `,`,
		`}`,
	}, "")
	return s
}
func (this *Cascade) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&Cascade{`,
		`NodeIds:` + fmt.Sprintf("%v", this.NodeIds) + `,`,
		`Entropy:` + fmt.Sprintf("%v", this.Entropy) + `,`,
		`ReplicationFactor:` + fmt.Sprintf("%v", this.ReplicationFactor) + `,`,
		`}`,
	}, "")
	return s
}
func (this *CascadeRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&CascadeRequest{`,
		`TraceID:` + fmt.Sprintf("%v", this.TraceID) + `,`,
		`RPC:` + strings.Replace(fmt.Sprintf("%v", this.RPC), "RPCRequest", "RPCRequest", 1) + `,`,
		`Cascade:` + strings.Replace(fmt.Sprintf("%v", this.Cascade), "Cascade", "Cascade", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *PulseRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&PulseRequest{`,
		`Pulse:` + strings.Replace(fmt.Sprintf("%v", this.Pulse), "PulseProto", "pulse.PulseProto", 1) + `,`,
		`TraceSpanData:` + fmt.Sprintf("%v", this.TraceSpanData) + `,`,
		`}`,
	}, "")
	return s
}
func (this *UpdateScheduleRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&UpdateScheduleRequest{`,
		`LastNodePulse:` + fmt.Sprintf("%v", this.LastNodePulse) + `,`,
		`Permit:` + strings.Replace(fmt.Sprintf("%v", this.Permit), "Permit", "Permit", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ReconnectRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ReconnectRequest{`,
		`ReconnectTo:` + fmt.Sprintf("%v", this.ReconnectTo) + `,`,
		`Permit:` + strings.Replace(fmt.Sprintf("%v", this.Permit), "Permit", "Permit", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *BootstrapRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&BootstrapRequest{`,
		`JoinClaim:` + fmt.Sprintf("%v", this.JoinClaim) + `,`,
		`Pulse:` + strings.Replace(strings.Replace(this.Pulse.String(), "PulseProto", "pulse.PulseProto", 1), `&`, ``, 1) + `,`,
		`Permit:` + strings.Replace(fmt.Sprintf("%v", this.Permit), "Permit", "Permit", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *AuthorizeData) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&AuthorizeData{`,
		`Certificate:` + fmt.Sprintf("%v", this.Certificate) + `,`,
		`Timestamp:` + fmt.Sprintf("%v", this.Timestamp) + `,`,
		`Version:` + fmt.Sprintf("%v", this.Version) + `,`,
		`}`,
	}, "")
	return s
}
func (this *AuthorizeRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&AuthorizeRequest{`,
		`AuthorizeData:` + strings.Replace(fmt.Sprintf("%v", this.AuthorizeData), "AuthorizeData", "AuthorizeData", 1) + `,`,
		`Signature:` + fmt.Sprintf("%v", this.Signature) + `,`,
		`}`,
	}, "")
	return s
}
func (this *SignCertRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&SignCertRequest{`,
		`NodeRef:` + fmt.Sprintf("%v", this.NodeRef) + `,`,
		`}`,
	}, "")
	return s
}
func (this *RPCResponse) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&RPCResponse{`,
		`Result:` + fmt.Sprintf("%v", this.Result) + `,`,
		`Error:` + fmt.Sprintf("%v", this.Error) + `,`,
		`}`,
	}, "")
	return s
}
func (this *Permit) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&Permit{`,
		`Payload:` + strings.Replace(strings.Replace(this.Payload.String(), "PermitPayload", "PermitPayload", 1), `&`, ``, 1) + `,`,
		`Signature:` + fmt.Sprintf("%v", this.Signature) + `,`,
		`}`,
	}, "")
	return s
}
func (this *PermitPayload) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&PermitPayload{`,
		`JoinerPublicKey:` + fmt.Sprintf("%v", this.JoinerPublicKey) + `,`,
		`ExpireTimestamp:` + fmt.Sprintf("%v", this.ExpireTimestamp) + `,`,
		`ReconnectTo:` + fmt.Sprintf("%v", this.ReconnectTo) + `,`,
		`AuthorityNodeRef:` + fmt.Sprintf("%v", this.AuthorityNodeRef) + `,`,
		`}`,
	}, "")
	return s
}
func (this *BootstrapResponse) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&BootstrapResponse{`,
		`Code:` + fmt.Sprintf("%v", this.Code) + `,`,
		`ETA:` + fmt.Sprintf("%v", this.ETA) + `,`,
		`Pulse:` + strings.Replace(strings.Replace(this.Pulse.String(), "PulseProto", "pulse.PulseProto", 1), `&`, ``, 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *BasicResponse) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&BasicResponse{`,
		`Success:` + fmt.Sprintf("%v", this.Success) + `,`,
		`Error:` + fmt.Sprintf("%v", this.Error) + `,`,
		`}`,
	}, "")
	return s
}
func (this *AuthorizeResponse) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&AuthorizeResponse{`,
		`Code:` + fmt.Sprintf("%v", this.Code) + `,`,
		`Timestamp:` + fmt.Sprintf("%v", this.Timestamp) + `,`,
		`Error:` + fmt.Sprintf("%v", this.Error) + `,`,
		`Permit:` + strings.Replace(fmt.Sprintf("%v", this.Permit), "Permit", "Permit", 1) + `,`,
		`DiscoveryCount:` + fmt.Sprintf("%v", this.DiscoveryCount) + `,`,
		`Pulse:` + strings.Replace(strings.Replace(this.Pulse.String(), "PulseProto", "pulse.PulseProto", 1), `&`, ``, 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *SignCertResponse) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&SignCertResponse{`,
		`Sign:` + fmt.Sprintf("%v", this.Sign) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ErrorResponse) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ErrorResponse{`,
		`Error:` + fmt.Sprintf("%v", this.Error) + `,`,
		`}`,
	}, "")
	return s
}
func (this *UpdateScheduleResponse) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&UpdateScheduleResponse{`,
		`}`,
	}, "")
	return s
}
func (this *ReconnectResponse) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ReconnectResponse{`,
		`}`,
	}, "")
	return s
}
func valueToStringPacket(v interface{}) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("*%v", pv)
}
func (m *Packet) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPacket
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Packet: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Packet: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 16:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Polymorph", wireType)
			}
			m.Polymorph = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPacket
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Polymorph |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 20:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sender", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPacket
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthPacket
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthPacket
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			var v github_com_insolar_insolar_network_hostnetwork_host.Host
			m.Sender = &v
			if err := m.Sender.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 21:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Receiver", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPacket
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthPacket
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthPacket
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			var v github_com_insolar_insolar_network_hostnetwork_host.Host
			m.Receiver = &v
			if err := m.Receiver.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 22:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RequestID", wireType)
			}
			m.RequestID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPacket
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RequestID |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 23:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TraceID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPacket
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPacket
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPacket
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TraceID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 24:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			m.Type = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPacket
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Type |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 25:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Request", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPacket
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPacket
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPacket
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &Request{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Payload = &Packet_Request{v}
			iNdEx = postIndex
		case 26:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Response", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPacket
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPacket
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPacket
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &Response{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Payload = &Packet_Response{v}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPacket(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPacket
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthPacket
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Request) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPacket
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Request: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Request: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ping", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPacket
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPacket
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPacket
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &Ping{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Request = &Request_Ping{v}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RPC", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPacket
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPacket
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPacket
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &RPCRequest{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Request = &Request_RPC{v}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Cascade", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPacket
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPacket
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPacket
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &CascadeRequest{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Request = &Request_Cascade{v}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pulse", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPacket
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPacket
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPacket
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &PulseRequest{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Request = &Request_Pulse{v}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Bootstrap", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPacket
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPacket
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPacket
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &BootstrapRequest{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Request = &Request_Bootstrap{v}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Authorize", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPacket
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPacket
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPacket
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &AuthorizeRequest{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Request = &Request_Authorize{v}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SignCert", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPacket
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPacket
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPacket
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &SignCertRequest{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Request = &Request_SignCert{v}
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UpdateSchedule", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPacket
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPacket
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPacket
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &UpdateScheduleRequest{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Request = &Request_UpdateSchedule{v}
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Reconnect", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPacket
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPacket
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPacket
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ReconnectRequest{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Request = &Request_Reconnect{v}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPacket(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPacket
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthPacket
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Response) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPacket
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Response: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Response: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ping", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPacket
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPacket
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPacket
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &Ping{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Response = &Response_Ping{v}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RPC", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPacket
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPacket
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPacket
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &RPCResponse{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Response = &Response_RPC{v}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Basic", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPacket
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPacket
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPacket
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &BasicResponse{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Response = &Response_Basic{v}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Bootstrap", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPacket
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPacket
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPacket
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &BootstrapResponse{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Response = &Response_Bootstrap{v}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Authorize", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPacket
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPacket
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPacket
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &AuthorizeResponse{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Response = &Response_Authorize{v}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SignCert", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPacket
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPacket
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPacket
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &SignCertResponse{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Response = &Response_SignCert{v}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Error", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPacket
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPacket
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPacket
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ErrorResponse{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Response = &Response_Error{v}
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UpdateSchedule", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPacket
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPacket
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPacket
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &UpdateScheduleResponse{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Response = &Response_UpdateSchedule{v}
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Reconnect", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPacket
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPacket
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPacket
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ReconnectResponse{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Response = &Response_Reconnect{v}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPacket(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPacket
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthPacket
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Ping) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPacket
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Ping: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Ping: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipPacket(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPacket
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthPacket
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RPCRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPacket
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RPCRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RPCRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Method", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPacket
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPacket
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPacket
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Method = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Data", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPacket
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthPacket
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthPacket
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Data = append(m.Data[:0], dAtA[iNdEx:postIndex]...)
			if m.Data == nil {
				m.Data = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPacket(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPacket
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthPacket
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Cascade) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPacket
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Cascade: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Cascade: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NodeIds", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPacket
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthPacket
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthPacket
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			var v github_com_insolar_insolar_insolar.Reference
			m.NodeIds = append(m.NodeIds, v)
			if err := m.NodeIds[len(m.NodeIds)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Entropy", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPacket
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthPacket
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthPacket
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Entropy.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReplicationFactor", wireType)
			}
			m.ReplicationFactor = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPacket
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ReplicationFactor |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipPacket(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPacket
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthPacket
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CascadeRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPacket
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CascadeRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CascadeRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TraceID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPacket
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPacket
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPacket
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TraceID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RPC", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPacket
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPacket
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPacket
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.RPC == nil {
				m.RPC = &RPCRequest{}
			}
			if err := m.RPC.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Cascade", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPacket
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPacket
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPacket
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Cascade == nil {
				m.Cascade = &Cascade{}
			}
			if err := m.Cascade.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPacket(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPacket
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthPacket
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PulseRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPacket
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PulseRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PulseRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pulse", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPacket
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPacket
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPacket
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pulse == nil {
				m.Pulse = &pulse.PulseProto{}
			}
			if err := m.Pulse.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TraceSpanData", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPacket
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthPacket
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthPacket
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TraceSpanData = append(m.TraceSpanData[:0], dAtA[iNdEx:postIndex]...)
			if m.TraceSpanData == nil {
				m.TraceSpanData = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPacket(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPacket
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthPacket
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UpdateScheduleRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPacket
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UpdateScheduleRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UpdateScheduleRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LastNodePulse", wireType)
			}
			m.LastNodePulse = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPacket
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.LastNodePulse |= github_com_insolar_insolar_insolar.PulseNumber(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Permit", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPacket
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPacket
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPacket
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Permit == nil {
				m.Permit = &Permit{}
			}
			if err := m.Permit.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPacket(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPacket
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthPacket
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ReconnectRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPacket
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ReconnectRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ReconnectRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReconnectTo", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPacket
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthPacket
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthPacket
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.ReconnectTo.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Permit", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPacket
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPacket
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPacket
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Permit == nil {
				m.Permit = &Permit{}
			}
			if err := m.Permit.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPacket(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPacket
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthPacket
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *BootstrapRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPacket
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BootstrapRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BootstrapRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field JoinClaim", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPacket
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthPacket
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthPacket
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			var v github_com_insolar_insolar_network_consensusv1_packets.NodeJoinClaim
			m.JoinClaim = &v
			if err := m.JoinClaim.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pulse", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPacket
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPacket
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPacket
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Pulse.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Permit", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPacket
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPacket
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPacket
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Permit == nil {
				m.Permit = &Permit{}
			}
			if err := m.Permit.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPacket(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPacket
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthPacket
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AuthorizeData) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPacket
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AuthorizeData: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AuthorizeData: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Certificate", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPacket
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthPacket
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthPacket
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Certificate = append(m.Certificate[:0], dAtA[iNdEx:postIndex]...)
			if m.Certificate == nil {
				m.Certificate = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Timestamp", wireType)
			}
			m.Timestamp = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPacket
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Timestamp |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Version", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPacket
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPacket
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPacket
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Version = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPacket(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPacket
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthPacket
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AuthorizeRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPacket
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AuthorizeRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AuthorizeRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AuthorizeData", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPacket
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPacket
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPacket
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.AuthorizeData == nil {
				m.AuthorizeData = &AuthorizeData{}
			}
			if err := m.AuthorizeData.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Signature", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPacket
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthPacket
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthPacket
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Signature = append(m.Signature[:0], dAtA[iNdEx:postIndex]...)
			if m.Signature == nil {
				m.Signature = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPacket(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPacket
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthPacket
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SignCertRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPacket
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SignCertRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SignCertRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NodeRef", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPacket
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthPacket
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthPacket
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.NodeRef.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPacket(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPacket
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthPacket
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RPCResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPacket
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RPCResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RPCResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Result", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPacket
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthPacket
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthPacket
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Result = append(m.Result[:0], dAtA[iNdEx:postIndex]...)
			if m.Result == nil {
				m.Result = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Error", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPacket
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPacket
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPacket
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Error = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPacket(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPacket
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthPacket
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Permit) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPacket
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Permit: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Permit: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Payload", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPacket
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPacket
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPacket
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Payload.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Signature", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPacket
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthPacket
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthPacket
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Signature = append(m.Signature[:0], dAtA[iNdEx:postIndex]...)
			if m.Signature == nil {
				m.Signature = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPacket(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPacket
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthPacket
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PermitPayload) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPacket
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PermitPayload: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PermitPayload: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field JoinerPublicKey", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPacket
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthPacket
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthPacket
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.JoinerPublicKey = append(m.JoinerPublicKey[:0], dAtA[iNdEx:postIndex]...)
			if m.JoinerPublicKey == nil {
				m.JoinerPublicKey = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExpireTimestamp", wireType)
			}
			m.ExpireTimestamp = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPacket
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ExpireTimestamp |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReconnectTo", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPacket
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthPacket
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthPacket
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			var v github_com_insolar_insolar_network_hostnetwork_host.Host
			m.ReconnectTo = &v
			if err := m.ReconnectTo.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AuthorityNodeRef", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPacket
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthPacket
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthPacket
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.AuthorityNodeRef.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPacket(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPacket
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthPacket
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *BootstrapResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPacket
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BootstrapResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BootstrapResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Code", wireType)
			}
			m.Code = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPacket
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Code |= BootstrapResponseCode(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ETA", wireType)
			}
			m.ETA = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPacket
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ETA |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pulse", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPacket
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPacket
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPacket
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Pulse.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPacket(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPacket
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthPacket
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *BasicResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPacket
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BasicResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BasicResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Success", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPacket
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Success = bool(v != 0)
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Error", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPacket
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPacket
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPacket
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Error = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPacket(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPacket
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthPacket
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AuthorizeResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPacket
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AuthorizeResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AuthorizeResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Code", wireType)
			}
			m.Code = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPacket
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Code |= AuthorizeResponseCode(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Timestamp", wireType)
			}
			m.Timestamp = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPacket
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Timestamp |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Error", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPacket
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPacket
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPacket
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Error = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Permit", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPacket
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPacket
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPacket
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Permit == nil {
				m.Permit = &Permit{}
			}
			if err := m.Permit.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DiscoveryCount", wireType)
			}
			m.DiscoveryCount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPacket
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.DiscoveryCount |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pulse", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPacket
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPacket
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPacket
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Pulse.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPacket(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPacket
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthPacket
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SignCertResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPacket
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SignCertResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SignCertResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sign", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPacket
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthPacket
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthPacket
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Sign = append(m.Sign[:0], dAtA[iNdEx:postIndex]...)
			if m.Sign == nil {
				m.Sign = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPacket(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPacket
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthPacket
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ErrorResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPacket
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ErrorResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ErrorResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Error", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPacket
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPacket
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPacket
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Error = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPacket(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPacket
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthPacket
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UpdateScheduleResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPacket
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UpdateScheduleResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UpdateScheduleResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipPacket(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPacket
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthPacket
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ReconnectResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPacket
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ReconnectResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ReconnectResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipPacket(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPacket
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthPacket
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipPacket(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowPacket
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowPacket
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowPacket
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthPacket
			}
			iNdEx += length
			if iNdEx < 0 {
				return 0, ErrInvalidLengthPacket
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowPacket
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipPacket(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
				if iNdEx < 0 {
					return 0, ErrInvalidLengthPacket
				}
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthPacket = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowPacket   = fmt.Errorf("proto: integer overflow")
)
