package testutils

// Code generated by http://github.com/gojuno/minimock (dev). DO NOT EDIT.

import (
	"context"
	"sync"
	mm_atomic "sync/atomic"
	mm_time "time"

	"github.com/gojuno/minimock"
)

// GlobalInsolarLockMock implements insolar.GlobalInsolarLock
type GlobalInsolarLockMock struct {
	t minimock.Tester

	funcAcquire          func(ctx context.Context)
	inspectFuncAcquire   func(ctx context.Context)
	afterAcquireCounter  uint64
	beforeAcquireCounter uint64
	AcquireMock          mGlobalInsolarLockMockAcquire

	funcRelease          func(ctx context.Context)
	inspectFuncRelease   func(ctx context.Context)
	afterReleaseCounter  uint64
	beforeReleaseCounter uint64
	ReleaseMock          mGlobalInsolarLockMockRelease
}

// NewGlobalInsolarLockMock returns a mock for insolar.GlobalInsolarLock
func NewGlobalInsolarLockMock(t minimock.Tester) *GlobalInsolarLockMock {
	m := &GlobalInsolarLockMock{t: t}
	if controller, ok := t.(minimock.MockController); ok {
		controller.RegisterMocker(m)
	}

	m.AcquireMock = mGlobalInsolarLockMockAcquire{mock: m}
	m.AcquireMock.callArgs = []*GlobalInsolarLockMockAcquireParams{}

	m.ReleaseMock = mGlobalInsolarLockMockRelease{mock: m}
	m.ReleaseMock.callArgs = []*GlobalInsolarLockMockReleaseParams{}

	return m
}

type mGlobalInsolarLockMockAcquire struct {
	mock               *GlobalInsolarLockMock
	defaultExpectation *GlobalInsolarLockMockAcquireExpectation
	expectations       []*GlobalInsolarLockMockAcquireExpectation

	callArgs []*GlobalInsolarLockMockAcquireParams
	mutex    sync.RWMutex
}

// GlobalInsolarLockMockAcquireExpectation specifies expectation struct of the GlobalInsolarLock.Acquire
type GlobalInsolarLockMockAcquireExpectation struct {
	mock   *GlobalInsolarLockMock
	params *GlobalInsolarLockMockAcquireParams

	Counter uint64
}

// GlobalInsolarLockMockAcquireParams contains parameters of the GlobalInsolarLock.Acquire
type GlobalInsolarLockMockAcquireParams struct {
	ctx context.Context
}

// Expect sets up expected params for GlobalInsolarLock.Acquire
func (mmAcquire *mGlobalInsolarLockMockAcquire) Expect(ctx context.Context) *mGlobalInsolarLockMockAcquire {
	if mmAcquire.mock.funcAcquire != nil {
		mmAcquire.mock.t.Fatalf("GlobalInsolarLockMock.Acquire mock is already set by Set")
	}

	if mmAcquire.defaultExpectation == nil {
		mmAcquire.defaultExpectation = &GlobalInsolarLockMockAcquireExpectation{}
	}

	mmAcquire.defaultExpectation.params = &GlobalInsolarLockMockAcquireParams{ctx}
	for _, e := range mmAcquire.expectations {
		if minimock.Equal(e.params, mmAcquire.defaultExpectation.params) {
			mmAcquire.mock.t.Fatalf("Expectation set by When has same params: %#v", *mmAcquire.defaultExpectation.params)
		}
	}

	return mmAcquire
}

// Inspect accepts an inspector function that has same arguments as the GlobalInsolarLock.Acquire
func (mmAcquire *mGlobalInsolarLockMockAcquire) Inspect(f func(ctx context.Context)) *mGlobalInsolarLockMockAcquire {
	if mmAcquire.mock.inspectFuncAcquire != nil {
		mmAcquire.mock.t.Fatalf("Inspect function is already set for GlobalInsolarLockMock.Acquire")
	}

	mmAcquire.mock.inspectFuncAcquire = f

	return mmAcquire
}

// Return sets up results that will be returned by GlobalInsolarLock.Acquire
func (mmAcquire *mGlobalInsolarLockMockAcquire) Return() *GlobalInsolarLockMock {
	if mmAcquire.mock.funcAcquire != nil {
		mmAcquire.mock.t.Fatalf("GlobalInsolarLockMock.Acquire mock is already set by Set")
	}

	if mmAcquire.defaultExpectation == nil {
		mmAcquire.defaultExpectation = &GlobalInsolarLockMockAcquireExpectation{mock: mmAcquire.mock}
	}

	return mmAcquire.mock
}

//Set uses given function f to mock the GlobalInsolarLock.Acquire method
func (mmAcquire *mGlobalInsolarLockMockAcquire) Set(f func(ctx context.Context)) *GlobalInsolarLockMock {
	if mmAcquire.defaultExpectation != nil {
		mmAcquire.mock.t.Fatalf("Default expectation is already set for the GlobalInsolarLock.Acquire method")
	}

	if len(mmAcquire.expectations) > 0 {
		mmAcquire.mock.t.Fatalf("Some expectations are already set for the GlobalInsolarLock.Acquire method")
	}

	mmAcquire.mock.funcAcquire = f
	return mmAcquire.mock
}

// Acquire implements insolar.GlobalInsolarLock
func (mmAcquire *GlobalInsolarLockMock) Acquire(ctx context.Context) {
	mm_atomic.AddUint64(&mmAcquire.beforeAcquireCounter, 1)
	defer mm_atomic.AddUint64(&mmAcquire.afterAcquireCounter, 1)

	if mmAcquire.inspectFuncAcquire != nil {
		mmAcquire.inspectFuncAcquire(ctx)
	}

	params := &GlobalInsolarLockMockAcquireParams{ctx}

	// Record call args
	mmAcquire.AcquireMock.mutex.Lock()
	mmAcquire.AcquireMock.callArgs = append(mmAcquire.AcquireMock.callArgs, params)
	mmAcquire.AcquireMock.mutex.Unlock()

	for _, e := range mmAcquire.AcquireMock.expectations {
		if minimock.Equal(e.params, params) {
			mm_atomic.AddUint64(&e.Counter, 1)
			return
		}
	}

	if mmAcquire.AcquireMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&mmAcquire.AcquireMock.defaultExpectation.Counter, 1)
		want := mmAcquire.AcquireMock.defaultExpectation.params
		got := GlobalInsolarLockMockAcquireParams{ctx}
		if want != nil && !minimock.Equal(*want, got) {
			mmAcquire.t.Errorf("GlobalInsolarLockMock.Acquire got unexpected parameters, want: %#v, got: %#v%s\n", *want, got, minimock.Diff(*want, got))
		}

		return

	}
	if mmAcquire.funcAcquire != nil {
		mmAcquire.funcAcquire(ctx)
		return
	}
	mmAcquire.t.Fatalf("Unexpected call to GlobalInsolarLockMock.Acquire. %v", ctx)

}

// AcquireAfterCounter returns a count of finished GlobalInsolarLockMock.Acquire invocations
func (mmAcquire *GlobalInsolarLockMock) AcquireAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&mmAcquire.afterAcquireCounter)
}

// AcquireBeforeCounter returns a count of GlobalInsolarLockMock.Acquire invocations
func (mmAcquire *GlobalInsolarLockMock) AcquireBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&mmAcquire.beforeAcquireCounter)
}

// Calls returns a list of arguments used in each call to GlobalInsolarLockMock.Acquire.
// The list is in the same order as the calls were made (i.e. recent calls have a higher index)
func (mmAcquire *mGlobalInsolarLockMockAcquire) Calls() []*GlobalInsolarLockMockAcquireParams {
	mmAcquire.mutex.RLock()

	argCopy := make([]*GlobalInsolarLockMockAcquireParams, len(mmAcquire.callArgs))
	copy(argCopy, mmAcquire.callArgs)

	mmAcquire.mutex.RUnlock()

	return argCopy
}

// MinimockAcquireDone returns true if the count of the Acquire invocations corresponds
// the number of defined expectations
func (m *GlobalInsolarLockMock) MinimockAcquireDone() bool {
	for _, e := range m.AcquireMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.AcquireMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterAcquireCounter) < 1 {
		return false
	}
	// if func was set then invocations count should be greater than zero
	if m.funcAcquire != nil && mm_atomic.LoadUint64(&m.afterAcquireCounter) < 1 {
		return false
	}
	return true
}

// MinimockAcquireInspect logs each unmet expectation
func (m *GlobalInsolarLockMock) MinimockAcquireInspect() {
	for _, e := range m.AcquireMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Errorf("Expected call to GlobalInsolarLockMock.Acquire with params: %#v", *e.params)
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.AcquireMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterAcquireCounter) < 1 {
		if m.AcquireMock.defaultExpectation.params == nil {
			m.t.Error("Expected call to GlobalInsolarLockMock.Acquire")
		} else {
			m.t.Errorf("Expected call to GlobalInsolarLockMock.Acquire with params: %#v", *m.AcquireMock.defaultExpectation.params)
		}
	}
	// if func was set then invocations count should be greater than zero
	if m.funcAcquire != nil && mm_atomic.LoadUint64(&m.afterAcquireCounter) < 1 {
		m.t.Error("Expected call to GlobalInsolarLockMock.Acquire")
	}
}

type mGlobalInsolarLockMockRelease struct {
	mock               *GlobalInsolarLockMock
	defaultExpectation *GlobalInsolarLockMockReleaseExpectation
	expectations       []*GlobalInsolarLockMockReleaseExpectation

	callArgs []*GlobalInsolarLockMockReleaseParams
	mutex    sync.RWMutex
}

// GlobalInsolarLockMockReleaseExpectation specifies expectation struct of the GlobalInsolarLock.Release
type GlobalInsolarLockMockReleaseExpectation struct {
	mock   *GlobalInsolarLockMock
	params *GlobalInsolarLockMockReleaseParams

	Counter uint64
}

// GlobalInsolarLockMockReleaseParams contains parameters of the GlobalInsolarLock.Release
type GlobalInsolarLockMockReleaseParams struct {
	ctx context.Context
}

// Expect sets up expected params for GlobalInsolarLock.Release
func (mmRelease *mGlobalInsolarLockMockRelease) Expect(ctx context.Context) *mGlobalInsolarLockMockRelease {
	if mmRelease.mock.funcRelease != nil {
		mmRelease.mock.t.Fatalf("GlobalInsolarLockMock.Release mock is already set by Set")
	}

	if mmRelease.defaultExpectation == nil {
		mmRelease.defaultExpectation = &GlobalInsolarLockMockReleaseExpectation{}
	}

	mmRelease.defaultExpectation.params = &GlobalInsolarLockMockReleaseParams{ctx}
	for _, e := range mmRelease.expectations {
		if minimock.Equal(e.params, mmRelease.defaultExpectation.params) {
			mmRelease.mock.t.Fatalf("Expectation set by When has same params: %#v", *mmRelease.defaultExpectation.params)
		}
	}

	return mmRelease
}

// Inspect accepts an inspector function that has same arguments as the GlobalInsolarLock.Release
func (mmRelease *mGlobalInsolarLockMockRelease) Inspect(f func(ctx context.Context)) *mGlobalInsolarLockMockRelease {
	if mmRelease.mock.inspectFuncRelease != nil {
		mmRelease.mock.t.Fatalf("Inspect function is already set for GlobalInsolarLockMock.Release")
	}

	mmRelease.mock.inspectFuncRelease = f

	return mmRelease
}

// Return sets up results that will be returned by GlobalInsolarLock.Release
func (mmRelease *mGlobalInsolarLockMockRelease) Return() *GlobalInsolarLockMock {
	if mmRelease.mock.funcRelease != nil {
		mmRelease.mock.t.Fatalf("GlobalInsolarLockMock.Release mock is already set by Set")
	}

	if mmRelease.defaultExpectation == nil {
		mmRelease.defaultExpectation = &GlobalInsolarLockMockReleaseExpectation{mock: mmRelease.mock}
	}

	return mmRelease.mock
}

//Set uses given function f to mock the GlobalInsolarLock.Release method
func (mmRelease *mGlobalInsolarLockMockRelease) Set(f func(ctx context.Context)) *GlobalInsolarLockMock {
	if mmRelease.defaultExpectation != nil {
		mmRelease.mock.t.Fatalf("Default expectation is already set for the GlobalInsolarLock.Release method")
	}

	if len(mmRelease.expectations) > 0 {
		mmRelease.mock.t.Fatalf("Some expectations are already set for the GlobalInsolarLock.Release method")
	}

	mmRelease.mock.funcRelease = f
	return mmRelease.mock
}

// Release implements insolar.GlobalInsolarLock
func (mmRelease *GlobalInsolarLockMock) Release(ctx context.Context) {
	mm_atomic.AddUint64(&mmRelease.beforeReleaseCounter, 1)
	defer mm_atomic.AddUint64(&mmRelease.afterReleaseCounter, 1)

	if mmRelease.inspectFuncRelease != nil {
		mmRelease.inspectFuncRelease(ctx)
	}

	params := &GlobalInsolarLockMockReleaseParams{ctx}

	// Record call args
	mmRelease.ReleaseMock.mutex.Lock()
	mmRelease.ReleaseMock.callArgs = append(mmRelease.ReleaseMock.callArgs, params)
	mmRelease.ReleaseMock.mutex.Unlock()

	for _, e := range mmRelease.ReleaseMock.expectations {
		if minimock.Equal(e.params, params) {
			mm_atomic.AddUint64(&e.Counter, 1)
			return
		}
	}

	if mmRelease.ReleaseMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&mmRelease.ReleaseMock.defaultExpectation.Counter, 1)
		want := mmRelease.ReleaseMock.defaultExpectation.params
		got := GlobalInsolarLockMockReleaseParams{ctx}
		if want != nil && !minimock.Equal(*want, got) {
			mmRelease.t.Errorf("GlobalInsolarLockMock.Release got unexpected parameters, want: %#v, got: %#v%s\n", *want, got, minimock.Diff(*want, got))
		}

		return

	}
	if mmRelease.funcRelease != nil {
		mmRelease.funcRelease(ctx)
		return
	}
	mmRelease.t.Fatalf("Unexpected call to GlobalInsolarLockMock.Release. %v", ctx)

}

// ReleaseAfterCounter returns a count of finished GlobalInsolarLockMock.Release invocations
func (mmRelease *GlobalInsolarLockMock) ReleaseAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&mmRelease.afterReleaseCounter)
}

// ReleaseBeforeCounter returns a count of GlobalInsolarLockMock.Release invocations
func (mmRelease *GlobalInsolarLockMock) ReleaseBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&mmRelease.beforeReleaseCounter)
}

// Calls returns a list of arguments used in each call to GlobalInsolarLockMock.Release.
// The list is in the same order as the calls were made (i.e. recent calls have a higher index)
func (mmRelease *mGlobalInsolarLockMockRelease) Calls() []*GlobalInsolarLockMockReleaseParams {
	mmRelease.mutex.RLock()

	argCopy := make([]*GlobalInsolarLockMockReleaseParams, len(mmRelease.callArgs))
	copy(argCopy, mmRelease.callArgs)

	mmRelease.mutex.RUnlock()

	return argCopy
}

// MinimockReleaseDone returns true if the count of the Release invocations corresponds
// the number of defined expectations
func (m *GlobalInsolarLockMock) MinimockReleaseDone() bool {
	for _, e := range m.ReleaseMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.ReleaseMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterReleaseCounter) < 1 {
		return false
	}
	// if func was set then invocations count should be greater than zero
	if m.funcRelease != nil && mm_atomic.LoadUint64(&m.afterReleaseCounter) < 1 {
		return false
	}
	return true
}

// MinimockReleaseInspect logs each unmet expectation
func (m *GlobalInsolarLockMock) MinimockReleaseInspect() {
	for _, e := range m.ReleaseMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Errorf("Expected call to GlobalInsolarLockMock.Release with params: %#v", *e.params)
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.ReleaseMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterReleaseCounter) < 1 {
		if m.ReleaseMock.defaultExpectation.params == nil {
			m.t.Error("Expected call to GlobalInsolarLockMock.Release")
		} else {
			m.t.Errorf("Expected call to GlobalInsolarLockMock.Release with params: %#v", *m.ReleaseMock.defaultExpectation.params)
		}
	}
	// if func was set then invocations count should be greater than zero
	if m.funcRelease != nil && mm_atomic.LoadUint64(&m.afterReleaseCounter) < 1 {
		m.t.Error("Expected call to GlobalInsolarLockMock.Release")
	}
}

// MinimockFinish checks that all mocked methods have been called the expected number of times
func (m *GlobalInsolarLockMock) MinimockFinish() {
	if !m.minimockDone() {
		m.MinimockAcquireInspect()

		m.MinimockReleaseInspect()
		m.t.FailNow()
	}
}

// MinimockWait waits for all mocked methods to be called the expected number of times
func (m *GlobalInsolarLockMock) MinimockWait(timeout mm_time.Duration) {
	timeoutCh := mm_time.After(timeout)
	for {
		if m.minimockDone() {
			return
		}
		select {
		case <-timeoutCh:
			m.MinimockFinish()
			return
		case <-mm_time.After(10 * mm_time.Millisecond):
		}
	}
}

func (m *GlobalInsolarLockMock) minimockDone() bool {
	done := true
	return done &&
		m.MinimockAcquireDone() &&
		m.MinimockReleaseDone()
}
