package network

// Code generated by http://github.com/gojuno/minimock (3.0.0). DO NOT EDIT.

import (
	"context"
	"sync"
	mm_atomic "sync/atomic"
	mm_time "time"

	"github.com/gojuno/minimock/v3"
	"github.com/insolar/insolar/insolar"
	mm_network "github.com/insolar/insolar/network"
	"github.com/insolar/insolar/network/consensusv1/packets"
	"github.com/insolar/insolar/network/node"
)

// NodeKeeperMock implements network.NodeKeeper
type NodeKeeperMock struct {
	t minimock.Tester

	funcGetAccessor          func() (a1 mm_network.Accessor)
	inspectFuncGetAccessor   func()
	afterGetAccessorCounter  uint64
	beforeGetAccessorCounter uint64
	GetAccessorMock          mNodeKeeperMockGetAccessor

	funcGetClaimQueue          func() (c1 mm_network.ClaimQueue)
	inspectFuncGetClaimQueue   func()
	afterGetClaimQueueCounter  uint64
	beforeGetClaimQueueCounter uint64
	GetClaimQueueMock          mNodeKeeperMockGetClaimQueue

	funcGetCloudHash          func() (ba1 []byte)
	inspectFuncGetCloudHash   func()
	afterGetCloudHashCounter  uint64
	beforeGetCloudHashCounter uint64
	GetCloudHashMock          mNodeKeeperMockGetCloudHash

	funcGetConsensusInfo          func() (c1 mm_network.ConsensusInfo)
	inspectFuncGetConsensusInfo   func()
	afterGetConsensusInfoCounter  uint64
	beforeGetConsensusInfoCounter uint64
	GetConsensusInfoMock          mNodeKeeperMockGetConsensusInfo

	funcGetOrigin          func() (n1 insolar.NetworkNode)
	inspectFuncGetOrigin   func()
	afterGetOriginCounter  uint64
	beforeGetOriginCounter uint64
	GetOriginMock          mNodeKeeperMockGetOrigin

	funcGetOriginAnnounceClaim          func(mapper packets.BitSetMapper) (np1 *packets.NodeAnnounceClaim, err error)
	inspectFuncGetOriginAnnounceClaim   func(mapper packets.BitSetMapper)
	afterGetOriginAnnounceClaimCounter  uint64
	beforeGetOriginAnnounceClaimCounter uint64
	GetOriginAnnounceClaimMock          mNodeKeeperMockGetOriginAnnounceClaim

	funcGetOriginJoinClaim          func() (np1 *packets.NodeJoinClaim, err error)
	inspectFuncGetOriginJoinClaim   func()
	afterGetOriginJoinClaimCounter  uint64
	beforeGetOriginJoinClaimCounter uint64
	GetOriginJoinClaimMock          mNodeKeeperMockGetOriginJoinClaim

	funcGetSnapshotCopy          func() (sp1 *node.Snapshot)
	inspectFuncGetSnapshotCopy   func()
	afterGetSnapshotCopyCounter  uint64
	beforeGetSnapshotCopyCounter uint64
	GetSnapshotCopyMock          mNodeKeeperMockGetSnapshotCopy

	funcGetWorkingNode          func(ref insolar.Reference) (n1 insolar.NetworkNode)
	inspectFuncGetWorkingNode   func(ref insolar.Reference)
	afterGetWorkingNodeCounter  uint64
	beforeGetWorkingNodeCounter uint64
	GetWorkingNodeMock          mNodeKeeperMockGetWorkingNode

	funcGetWorkingNodes          func() (na1 []insolar.NetworkNode)
	inspectFuncGetWorkingNodes   func()
	afterGetWorkingNodesCounter  uint64
	beforeGetWorkingNodesCounter uint64
	GetWorkingNodesMock          mNodeKeeperMockGetWorkingNodes

	funcGetWorkingNodesByRole          func(role insolar.DynamicRole) (ra1 []insolar.Reference)
	inspectFuncGetWorkingNodesByRole   func(role insolar.DynamicRole)
	afterGetWorkingNodesByRoleCounter  uint64
	beforeGetWorkingNodesByRoleCounter uint64
	GetWorkingNodesByRoleMock          mNodeKeeperMockGetWorkingNodesByRole

	funcIsBootstrapped          func() (b1 bool)
	inspectFuncIsBootstrapped   func()
	afterIsBootstrappedCounter  uint64
	beforeIsBootstrappedCounter uint64
	IsBootstrappedMock          mNodeKeeperMockIsBootstrapped

	funcMoveSyncToActive          func(ctx context.Context, number insolar.PulseNumber) (err error)
	inspectFuncMoveSyncToActive   func(ctx context.Context, number insolar.PulseNumber)
	afterMoveSyncToActiveCounter  uint64
	beforeMoveSyncToActiveCounter uint64
	MoveSyncToActiveMock          mNodeKeeperMockMoveSyncToActive

	funcSetCloudHash          func(ba1 []byte)
	inspectFuncSetCloudHash   func(ba1 []byte)
	afterSetCloudHashCounter  uint64
	beforeSetCloudHashCounter uint64
	SetCloudHashMock          mNodeKeeperMockSetCloudHash

	funcSetInitialSnapshot          func(nodes []insolar.NetworkNode)
	inspectFuncSetInitialSnapshot   func(nodes []insolar.NetworkNode)
	afterSetInitialSnapshotCounter  uint64
	beforeSetInitialSnapshotCounter uint64
	SetInitialSnapshotMock          mNodeKeeperMockSetInitialSnapshot

	funcSetIsBootstrapped          func(isBootstrap bool)
	inspectFuncSetIsBootstrapped   func(isBootstrap bool)
	afterSetIsBootstrappedCounter  uint64
	beforeSetIsBootstrappedCounter uint64
	SetIsBootstrappedMock          mNodeKeeperMockSetIsBootstrapped

	funcSync          func(ctx context.Context, na1 []insolar.NetworkNode, ra1 []packets.ReferendumClaim) (err error)
	inspectFuncSync   func(ctx context.Context, na1 []insolar.NetworkNode, ra1 []packets.ReferendumClaim)
	afterSyncCounter  uint64
	beforeSyncCounter uint64
	SyncMock          mNodeKeeperMockSync
}

// NewNodeKeeperMock returns a mock for network.NodeKeeper
func NewNodeKeeperMock(t minimock.Tester) *NodeKeeperMock {
	m := &NodeKeeperMock{t: t}
	if controller, ok := t.(minimock.MockController); ok {
		controller.RegisterMocker(m)
	}

	m.GetAccessorMock = mNodeKeeperMockGetAccessor{mock: m}

	m.GetClaimQueueMock = mNodeKeeperMockGetClaimQueue{mock: m}

	m.GetCloudHashMock = mNodeKeeperMockGetCloudHash{mock: m}

	m.GetConsensusInfoMock = mNodeKeeperMockGetConsensusInfo{mock: m}

	m.GetOriginMock = mNodeKeeperMockGetOrigin{mock: m}

	m.GetOriginAnnounceClaimMock = mNodeKeeperMockGetOriginAnnounceClaim{mock: m}
	m.GetOriginAnnounceClaimMock.callArgs = []*NodeKeeperMockGetOriginAnnounceClaimParams{}

	m.GetOriginJoinClaimMock = mNodeKeeperMockGetOriginJoinClaim{mock: m}

	m.GetSnapshotCopyMock = mNodeKeeperMockGetSnapshotCopy{mock: m}

	m.GetWorkingNodeMock = mNodeKeeperMockGetWorkingNode{mock: m}
	m.GetWorkingNodeMock.callArgs = []*NodeKeeperMockGetWorkingNodeParams{}

	m.GetWorkingNodesMock = mNodeKeeperMockGetWorkingNodes{mock: m}

	m.GetWorkingNodesByRoleMock = mNodeKeeperMockGetWorkingNodesByRole{mock: m}
	m.GetWorkingNodesByRoleMock.callArgs = []*NodeKeeperMockGetWorkingNodesByRoleParams{}

	m.IsBootstrappedMock = mNodeKeeperMockIsBootstrapped{mock: m}

	m.MoveSyncToActiveMock = mNodeKeeperMockMoveSyncToActive{mock: m}
	m.MoveSyncToActiveMock.callArgs = []*NodeKeeperMockMoveSyncToActiveParams{}

	m.SetCloudHashMock = mNodeKeeperMockSetCloudHash{mock: m}
	m.SetCloudHashMock.callArgs = []*NodeKeeperMockSetCloudHashParams{}

	m.SetInitialSnapshotMock = mNodeKeeperMockSetInitialSnapshot{mock: m}
	m.SetInitialSnapshotMock.callArgs = []*NodeKeeperMockSetInitialSnapshotParams{}

	m.SetIsBootstrappedMock = mNodeKeeperMockSetIsBootstrapped{mock: m}
	m.SetIsBootstrappedMock.callArgs = []*NodeKeeperMockSetIsBootstrappedParams{}

	m.SyncMock = mNodeKeeperMockSync{mock: m}
	m.SyncMock.callArgs = []*NodeKeeperMockSyncParams{}

	return m
}

type mNodeKeeperMockGetAccessor struct {
	mock               *NodeKeeperMock
	defaultExpectation *NodeKeeperMockGetAccessorExpectation
	expectations       []*NodeKeeperMockGetAccessorExpectation
}

// NodeKeeperMockGetAccessorExpectation specifies expectation struct of the NodeKeeper.GetAccessor
type NodeKeeperMockGetAccessorExpectation struct {
	mock *NodeKeeperMock

	results *NodeKeeperMockGetAccessorResults
	Counter uint64
}

// NodeKeeperMockGetAccessorResults contains results of the NodeKeeper.GetAccessor
type NodeKeeperMockGetAccessorResults struct {
	a1 mm_network.Accessor
}

// Expect sets up expected params for NodeKeeper.GetAccessor
func (mmGetAccessor *mNodeKeeperMockGetAccessor) Expect() *mNodeKeeperMockGetAccessor {
	if mmGetAccessor.mock.funcGetAccessor != nil {
		mmGetAccessor.mock.t.Fatalf("NodeKeeperMock.GetAccessor mock is already set by Set")
	}

	if mmGetAccessor.defaultExpectation == nil {
		mmGetAccessor.defaultExpectation = &NodeKeeperMockGetAccessorExpectation{}
	}

	return mmGetAccessor
}

// Inspect accepts an inspector function that has same arguments as the NodeKeeper.GetAccessor
func (mmGetAccessor *mNodeKeeperMockGetAccessor) Inspect(f func()) *mNodeKeeperMockGetAccessor {
	if mmGetAccessor.mock.inspectFuncGetAccessor != nil {
		mmGetAccessor.mock.t.Fatalf("Inspect function is already set for NodeKeeperMock.GetAccessor")
	}

	mmGetAccessor.mock.inspectFuncGetAccessor = f

	return mmGetAccessor
}

// Return sets up results that will be returned by NodeKeeper.GetAccessor
func (mmGetAccessor *mNodeKeeperMockGetAccessor) Return(a1 mm_network.Accessor) *NodeKeeperMock {
	if mmGetAccessor.mock.funcGetAccessor != nil {
		mmGetAccessor.mock.t.Fatalf("NodeKeeperMock.GetAccessor mock is already set by Set")
	}

	if mmGetAccessor.defaultExpectation == nil {
		mmGetAccessor.defaultExpectation = &NodeKeeperMockGetAccessorExpectation{mock: mmGetAccessor.mock}
	}
	mmGetAccessor.defaultExpectation.results = &NodeKeeperMockGetAccessorResults{a1}
	return mmGetAccessor.mock
}

//Set uses given function f to mock the NodeKeeper.GetAccessor method
func (mmGetAccessor *mNodeKeeperMockGetAccessor) Set(f func() (a1 mm_network.Accessor)) *NodeKeeperMock {
	if mmGetAccessor.defaultExpectation != nil {
		mmGetAccessor.mock.t.Fatalf("Default expectation is already set for the NodeKeeper.GetAccessor method")
	}

	if len(mmGetAccessor.expectations) > 0 {
		mmGetAccessor.mock.t.Fatalf("Some expectations are already set for the NodeKeeper.GetAccessor method")
	}

	mmGetAccessor.mock.funcGetAccessor = f
	return mmGetAccessor.mock
}

// GetAccessor implements network.NodeKeeper
func (mmGetAccessor *NodeKeeperMock) GetAccessor() (a1 mm_network.Accessor) {
	mm_atomic.AddUint64(&mmGetAccessor.beforeGetAccessorCounter, 1)
	defer mm_atomic.AddUint64(&mmGetAccessor.afterGetAccessorCounter, 1)

	if mmGetAccessor.inspectFuncGetAccessor != nil {
		mmGetAccessor.inspectFuncGetAccessor()
	}

	if mmGetAccessor.GetAccessorMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&mmGetAccessor.GetAccessorMock.defaultExpectation.Counter, 1)

		results := mmGetAccessor.GetAccessorMock.defaultExpectation.results
		if results == nil {
			mmGetAccessor.t.Fatal("No results are set for the NodeKeeperMock.GetAccessor")
		}
		return (*results).a1
	}
	if mmGetAccessor.funcGetAccessor != nil {
		return mmGetAccessor.funcGetAccessor()
	}
	mmGetAccessor.t.Fatalf("Unexpected call to NodeKeeperMock.GetAccessor.")
	return
}

// GetAccessorAfterCounter returns a count of finished NodeKeeperMock.GetAccessor invocations
func (mmGetAccessor *NodeKeeperMock) GetAccessorAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&mmGetAccessor.afterGetAccessorCounter)
}

// GetAccessorBeforeCounter returns a count of NodeKeeperMock.GetAccessor invocations
func (mmGetAccessor *NodeKeeperMock) GetAccessorBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&mmGetAccessor.beforeGetAccessorCounter)
}

// MinimockGetAccessorDone returns true if the count of the GetAccessor invocations corresponds
// the number of defined expectations
func (m *NodeKeeperMock) MinimockGetAccessorDone() bool {
	for _, e := range m.GetAccessorMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.GetAccessorMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterGetAccessorCounter) < 1 {
		return false
	}
	// if func was set then invocations count should be greater than zero
	if m.funcGetAccessor != nil && mm_atomic.LoadUint64(&m.afterGetAccessorCounter) < 1 {
		return false
	}
	return true
}

// MinimockGetAccessorInspect logs each unmet expectation
func (m *NodeKeeperMock) MinimockGetAccessorInspect() {
	for _, e := range m.GetAccessorMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Error("Expected call to NodeKeeperMock.GetAccessor")
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.GetAccessorMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterGetAccessorCounter) < 1 {
		m.t.Error("Expected call to NodeKeeperMock.GetAccessor")
	}
	// if func was set then invocations count should be greater than zero
	if m.funcGetAccessor != nil && mm_atomic.LoadUint64(&m.afterGetAccessorCounter) < 1 {
		m.t.Error("Expected call to NodeKeeperMock.GetAccessor")
	}
}

type mNodeKeeperMockGetClaimQueue struct {
	mock               *NodeKeeperMock
	defaultExpectation *NodeKeeperMockGetClaimQueueExpectation
	expectations       []*NodeKeeperMockGetClaimQueueExpectation
}

// NodeKeeperMockGetClaimQueueExpectation specifies expectation struct of the NodeKeeper.GetClaimQueue
type NodeKeeperMockGetClaimQueueExpectation struct {
	mock *NodeKeeperMock

	results *NodeKeeperMockGetClaimQueueResults
	Counter uint64
}

// NodeKeeperMockGetClaimQueueResults contains results of the NodeKeeper.GetClaimQueue
type NodeKeeperMockGetClaimQueueResults struct {
	c1 mm_network.ClaimQueue
}

// Expect sets up expected params for NodeKeeper.GetClaimQueue
func (mmGetClaimQueue *mNodeKeeperMockGetClaimQueue) Expect() *mNodeKeeperMockGetClaimQueue {
	if mmGetClaimQueue.mock.funcGetClaimQueue != nil {
		mmGetClaimQueue.mock.t.Fatalf("NodeKeeperMock.GetClaimQueue mock is already set by Set")
	}

	if mmGetClaimQueue.defaultExpectation == nil {
		mmGetClaimQueue.defaultExpectation = &NodeKeeperMockGetClaimQueueExpectation{}
	}

	return mmGetClaimQueue
}

// Inspect accepts an inspector function that has same arguments as the NodeKeeper.GetClaimQueue
func (mmGetClaimQueue *mNodeKeeperMockGetClaimQueue) Inspect(f func()) *mNodeKeeperMockGetClaimQueue {
	if mmGetClaimQueue.mock.inspectFuncGetClaimQueue != nil {
		mmGetClaimQueue.mock.t.Fatalf("Inspect function is already set for NodeKeeperMock.GetClaimQueue")
	}

	mmGetClaimQueue.mock.inspectFuncGetClaimQueue = f

	return mmGetClaimQueue
}

// Return sets up results that will be returned by NodeKeeper.GetClaimQueue
func (mmGetClaimQueue *mNodeKeeperMockGetClaimQueue) Return(c1 mm_network.ClaimQueue) *NodeKeeperMock {
	if mmGetClaimQueue.mock.funcGetClaimQueue != nil {
		mmGetClaimQueue.mock.t.Fatalf("NodeKeeperMock.GetClaimQueue mock is already set by Set")
	}

	if mmGetClaimQueue.defaultExpectation == nil {
		mmGetClaimQueue.defaultExpectation = &NodeKeeperMockGetClaimQueueExpectation{mock: mmGetClaimQueue.mock}
	}
	mmGetClaimQueue.defaultExpectation.results = &NodeKeeperMockGetClaimQueueResults{c1}
	return mmGetClaimQueue.mock
}

//Set uses given function f to mock the NodeKeeper.GetClaimQueue method
func (mmGetClaimQueue *mNodeKeeperMockGetClaimQueue) Set(f func() (c1 mm_network.ClaimQueue)) *NodeKeeperMock {
	if mmGetClaimQueue.defaultExpectation != nil {
		mmGetClaimQueue.mock.t.Fatalf("Default expectation is already set for the NodeKeeper.GetClaimQueue method")
	}

	if len(mmGetClaimQueue.expectations) > 0 {
		mmGetClaimQueue.mock.t.Fatalf("Some expectations are already set for the NodeKeeper.GetClaimQueue method")
	}

	mmGetClaimQueue.mock.funcGetClaimQueue = f
	return mmGetClaimQueue.mock
}

// GetClaimQueue implements network.NodeKeeper
func (mmGetClaimQueue *NodeKeeperMock) GetClaimQueue() (c1 mm_network.ClaimQueue) {
	mm_atomic.AddUint64(&mmGetClaimQueue.beforeGetClaimQueueCounter, 1)
	defer mm_atomic.AddUint64(&mmGetClaimQueue.afterGetClaimQueueCounter, 1)

	if mmGetClaimQueue.inspectFuncGetClaimQueue != nil {
		mmGetClaimQueue.inspectFuncGetClaimQueue()
	}

	if mmGetClaimQueue.GetClaimQueueMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&mmGetClaimQueue.GetClaimQueueMock.defaultExpectation.Counter, 1)

		results := mmGetClaimQueue.GetClaimQueueMock.defaultExpectation.results
		if results == nil {
			mmGetClaimQueue.t.Fatal("No results are set for the NodeKeeperMock.GetClaimQueue")
		}
		return (*results).c1
	}
	if mmGetClaimQueue.funcGetClaimQueue != nil {
		return mmGetClaimQueue.funcGetClaimQueue()
	}
	mmGetClaimQueue.t.Fatalf("Unexpected call to NodeKeeperMock.GetClaimQueue.")
	return
}

// GetClaimQueueAfterCounter returns a count of finished NodeKeeperMock.GetClaimQueue invocations
func (mmGetClaimQueue *NodeKeeperMock) GetClaimQueueAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&mmGetClaimQueue.afterGetClaimQueueCounter)
}

// GetClaimQueueBeforeCounter returns a count of NodeKeeperMock.GetClaimQueue invocations
func (mmGetClaimQueue *NodeKeeperMock) GetClaimQueueBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&mmGetClaimQueue.beforeGetClaimQueueCounter)
}

// MinimockGetClaimQueueDone returns true if the count of the GetClaimQueue invocations corresponds
// the number of defined expectations
func (m *NodeKeeperMock) MinimockGetClaimQueueDone() bool {
	for _, e := range m.GetClaimQueueMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.GetClaimQueueMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterGetClaimQueueCounter) < 1 {
		return false
	}
	// if func was set then invocations count should be greater than zero
	if m.funcGetClaimQueue != nil && mm_atomic.LoadUint64(&m.afterGetClaimQueueCounter) < 1 {
		return false
	}
	return true
}

// MinimockGetClaimQueueInspect logs each unmet expectation
func (m *NodeKeeperMock) MinimockGetClaimQueueInspect() {
	for _, e := range m.GetClaimQueueMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Error("Expected call to NodeKeeperMock.GetClaimQueue")
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.GetClaimQueueMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterGetClaimQueueCounter) < 1 {
		m.t.Error("Expected call to NodeKeeperMock.GetClaimQueue")
	}
	// if func was set then invocations count should be greater than zero
	if m.funcGetClaimQueue != nil && mm_atomic.LoadUint64(&m.afterGetClaimQueueCounter) < 1 {
		m.t.Error("Expected call to NodeKeeperMock.GetClaimQueue")
	}
}

type mNodeKeeperMockGetCloudHash struct {
	mock               *NodeKeeperMock
	defaultExpectation *NodeKeeperMockGetCloudHashExpectation
	expectations       []*NodeKeeperMockGetCloudHashExpectation
}

// NodeKeeperMockGetCloudHashExpectation specifies expectation struct of the NodeKeeper.GetCloudHash
type NodeKeeperMockGetCloudHashExpectation struct {
	mock *NodeKeeperMock

	results *NodeKeeperMockGetCloudHashResults
	Counter uint64
}

// NodeKeeperMockGetCloudHashResults contains results of the NodeKeeper.GetCloudHash
type NodeKeeperMockGetCloudHashResults struct {
	ba1 []byte
}

// Expect sets up expected params for NodeKeeper.GetCloudHash
func (mmGetCloudHash *mNodeKeeperMockGetCloudHash) Expect() *mNodeKeeperMockGetCloudHash {
	if mmGetCloudHash.mock.funcGetCloudHash != nil {
		mmGetCloudHash.mock.t.Fatalf("NodeKeeperMock.GetCloudHash mock is already set by Set")
	}

	if mmGetCloudHash.defaultExpectation == nil {
		mmGetCloudHash.defaultExpectation = &NodeKeeperMockGetCloudHashExpectation{}
	}

	return mmGetCloudHash
}

// Inspect accepts an inspector function that has same arguments as the NodeKeeper.GetCloudHash
func (mmGetCloudHash *mNodeKeeperMockGetCloudHash) Inspect(f func()) *mNodeKeeperMockGetCloudHash {
	if mmGetCloudHash.mock.inspectFuncGetCloudHash != nil {
		mmGetCloudHash.mock.t.Fatalf("Inspect function is already set for NodeKeeperMock.GetCloudHash")
	}

	mmGetCloudHash.mock.inspectFuncGetCloudHash = f

	return mmGetCloudHash
}

// Return sets up results that will be returned by NodeKeeper.GetCloudHash
func (mmGetCloudHash *mNodeKeeperMockGetCloudHash) Return(ba1 []byte) *NodeKeeperMock {
	if mmGetCloudHash.mock.funcGetCloudHash != nil {
		mmGetCloudHash.mock.t.Fatalf("NodeKeeperMock.GetCloudHash mock is already set by Set")
	}

	if mmGetCloudHash.defaultExpectation == nil {
		mmGetCloudHash.defaultExpectation = &NodeKeeperMockGetCloudHashExpectation{mock: mmGetCloudHash.mock}
	}
	mmGetCloudHash.defaultExpectation.results = &NodeKeeperMockGetCloudHashResults{ba1}
	return mmGetCloudHash.mock
}

//Set uses given function f to mock the NodeKeeper.GetCloudHash method
func (mmGetCloudHash *mNodeKeeperMockGetCloudHash) Set(f func() (ba1 []byte)) *NodeKeeperMock {
	if mmGetCloudHash.defaultExpectation != nil {
		mmGetCloudHash.mock.t.Fatalf("Default expectation is already set for the NodeKeeper.GetCloudHash method")
	}

	if len(mmGetCloudHash.expectations) > 0 {
		mmGetCloudHash.mock.t.Fatalf("Some expectations are already set for the NodeKeeper.GetCloudHash method")
	}

	mmGetCloudHash.mock.funcGetCloudHash = f
	return mmGetCloudHash.mock
}

// GetCloudHash implements network.NodeKeeper
func (mmGetCloudHash *NodeKeeperMock) GetCloudHash() (ba1 []byte) {
	mm_atomic.AddUint64(&mmGetCloudHash.beforeGetCloudHashCounter, 1)
	defer mm_atomic.AddUint64(&mmGetCloudHash.afterGetCloudHashCounter, 1)

	if mmGetCloudHash.inspectFuncGetCloudHash != nil {
		mmGetCloudHash.inspectFuncGetCloudHash()
	}

	if mmGetCloudHash.GetCloudHashMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&mmGetCloudHash.GetCloudHashMock.defaultExpectation.Counter, 1)

		results := mmGetCloudHash.GetCloudHashMock.defaultExpectation.results
		if results == nil {
			mmGetCloudHash.t.Fatal("No results are set for the NodeKeeperMock.GetCloudHash")
		}
		return (*results).ba1
	}
	if mmGetCloudHash.funcGetCloudHash != nil {
		return mmGetCloudHash.funcGetCloudHash()
	}
	mmGetCloudHash.t.Fatalf("Unexpected call to NodeKeeperMock.GetCloudHash.")
	return
}

// GetCloudHashAfterCounter returns a count of finished NodeKeeperMock.GetCloudHash invocations
func (mmGetCloudHash *NodeKeeperMock) GetCloudHashAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&mmGetCloudHash.afterGetCloudHashCounter)
}

// GetCloudHashBeforeCounter returns a count of NodeKeeperMock.GetCloudHash invocations
func (mmGetCloudHash *NodeKeeperMock) GetCloudHashBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&mmGetCloudHash.beforeGetCloudHashCounter)
}

// MinimockGetCloudHashDone returns true if the count of the GetCloudHash invocations corresponds
// the number of defined expectations
func (m *NodeKeeperMock) MinimockGetCloudHashDone() bool {
	for _, e := range m.GetCloudHashMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.GetCloudHashMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterGetCloudHashCounter) < 1 {
		return false
	}
	// if func was set then invocations count should be greater than zero
	if m.funcGetCloudHash != nil && mm_atomic.LoadUint64(&m.afterGetCloudHashCounter) < 1 {
		return false
	}
	return true
}

// MinimockGetCloudHashInspect logs each unmet expectation
func (m *NodeKeeperMock) MinimockGetCloudHashInspect() {
	for _, e := range m.GetCloudHashMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Error("Expected call to NodeKeeperMock.GetCloudHash")
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.GetCloudHashMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterGetCloudHashCounter) < 1 {
		m.t.Error("Expected call to NodeKeeperMock.GetCloudHash")
	}
	// if func was set then invocations count should be greater than zero
	if m.funcGetCloudHash != nil && mm_atomic.LoadUint64(&m.afterGetCloudHashCounter) < 1 {
		m.t.Error("Expected call to NodeKeeperMock.GetCloudHash")
	}
}

type mNodeKeeperMockGetConsensusInfo struct {
	mock               *NodeKeeperMock
	defaultExpectation *NodeKeeperMockGetConsensusInfoExpectation
	expectations       []*NodeKeeperMockGetConsensusInfoExpectation
}

// NodeKeeperMockGetConsensusInfoExpectation specifies expectation struct of the NodeKeeper.GetConsensusInfo
type NodeKeeperMockGetConsensusInfoExpectation struct {
	mock *NodeKeeperMock

	results *NodeKeeperMockGetConsensusInfoResults
	Counter uint64
}

// NodeKeeperMockGetConsensusInfoResults contains results of the NodeKeeper.GetConsensusInfo
type NodeKeeperMockGetConsensusInfoResults struct {
	c1 mm_network.ConsensusInfo
}

// Expect sets up expected params for NodeKeeper.GetConsensusInfo
func (mmGetConsensusInfo *mNodeKeeperMockGetConsensusInfo) Expect() *mNodeKeeperMockGetConsensusInfo {
	if mmGetConsensusInfo.mock.funcGetConsensusInfo != nil {
		mmGetConsensusInfo.mock.t.Fatalf("NodeKeeperMock.GetConsensusInfo mock is already set by Set")
	}

	if mmGetConsensusInfo.defaultExpectation == nil {
		mmGetConsensusInfo.defaultExpectation = &NodeKeeperMockGetConsensusInfoExpectation{}
	}

	return mmGetConsensusInfo
}

// Inspect accepts an inspector function that has same arguments as the NodeKeeper.GetConsensusInfo
func (mmGetConsensusInfo *mNodeKeeperMockGetConsensusInfo) Inspect(f func()) *mNodeKeeperMockGetConsensusInfo {
	if mmGetConsensusInfo.mock.inspectFuncGetConsensusInfo != nil {
		mmGetConsensusInfo.mock.t.Fatalf("Inspect function is already set for NodeKeeperMock.GetConsensusInfo")
	}

	mmGetConsensusInfo.mock.inspectFuncGetConsensusInfo = f

	return mmGetConsensusInfo
}

// Return sets up results that will be returned by NodeKeeper.GetConsensusInfo
func (mmGetConsensusInfo *mNodeKeeperMockGetConsensusInfo) Return(c1 mm_network.ConsensusInfo) *NodeKeeperMock {
	if mmGetConsensusInfo.mock.funcGetConsensusInfo != nil {
		mmGetConsensusInfo.mock.t.Fatalf("NodeKeeperMock.GetConsensusInfo mock is already set by Set")
	}

	if mmGetConsensusInfo.defaultExpectation == nil {
		mmGetConsensusInfo.defaultExpectation = &NodeKeeperMockGetConsensusInfoExpectation{mock: mmGetConsensusInfo.mock}
	}
	mmGetConsensusInfo.defaultExpectation.results = &NodeKeeperMockGetConsensusInfoResults{c1}
	return mmGetConsensusInfo.mock
}

//Set uses given function f to mock the NodeKeeper.GetConsensusInfo method
func (mmGetConsensusInfo *mNodeKeeperMockGetConsensusInfo) Set(f func() (c1 mm_network.ConsensusInfo)) *NodeKeeperMock {
	if mmGetConsensusInfo.defaultExpectation != nil {
		mmGetConsensusInfo.mock.t.Fatalf("Default expectation is already set for the NodeKeeper.GetConsensusInfo method")
	}

	if len(mmGetConsensusInfo.expectations) > 0 {
		mmGetConsensusInfo.mock.t.Fatalf("Some expectations are already set for the NodeKeeper.GetConsensusInfo method")
	}

	mmGetConsensusInfo.mock.funcGetConsensusInfo = f
	return mmGetConsensusInfo.mock
}

// GetConsensusInfo implements network.NodeKeeper
func (mmGetConsensusInfo *NodeKeeperMock) GetConsensusInfo() (c1 mm_network.ConsensusInfo) {
	mm_atomic.AddUint64(&mmGetConsensusInfo.beforeGetConsensusInfoCounter, 1)
	defer mm_atomic.AddUint64(&mmGetConsensusInfo.afterGetConsensusInfoCounter, 1)

	if mmGetConsensusInfo.inspectFuncGetConsensusInfo != nil {
		mmGetConsensusInfo.inspectFuncGetConsensusInfo()
	}

	if mmGetConsensusInfo.GetConsensusInfoMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&mmGetConsensusInfo.GetConsensusInfoMock.defaultExpectation.Counter, 1)

		results := mmGetConsensusInfo.GetConsensusInfoMock.defaultExpectation.results
		if results == nil {
			mmGetConsensusInfo.t.Fatal("No results are set for the NodeKeeperMock.GetConsensusInfo")
		}
		return (*results).c1
	}
	if mmGetConsensusInfo.funcGetConsensusInfo != nil {
		return mmGetConsensusInfo.funcGetConsensusInfo()
	}
	mmGetConsensusInfo.t.Fatalf("Unexpected call to NodeKeeperMock.GetConsensusInfo.")
	return
}

// GetConsensusInfoAfterCounter returns a count of finished NodeKeeperMock.GetConsensusInfo invocations
func (mmGetConsensusInfo *NodeKeeperMock) GetConsensusInfoAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&mmGetConsensusInfo.afterGetConsensusInfoCounter)
}

// GetConsensusInfoBeforeCounter returns a count of NodeKeeperMock.GetConsensusInfo invocations
func (mmGetConsensusInfo *NodeKeeperMock) GetConsensusInfoBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&mmGetConsensusInfo.beforeGetConsensusInfoCounter)
}

// MinimockGetConsensusInfoDone returns true if the count of the GetConsensusInfo invocations corresponds
// the number of defined expectations
func (m *NodeKeeperMock) MinimockGetConsensusInfoDone() bool {
	for _, e := range m.GetConsensusInfoMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.GetConsensusInfoMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterGetConsensusInfoCounter) < 1 {
		return false
	}
	// if func was set then invocations count should be greater than zero
	if m.funcGetConsensusInfo != nil && mm_atomic.LoadUint64(&m.afterGetConsensusInfoCounter) < 1 {
		return false
	}
	return true
}

// MinimockGetConsensusInfoInspect logs each unmet expectation
func (m *NodeKeeperMock) MinimockGetConsensusInfoInspect() {
	for _, e := range m.GetConsensusInfoMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Error("Expected call to NodeKeeperMock.GetConsensusInfo")
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.GetConsensusInfoMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterGetConsensusInfoCounter) < 1 {
		m.t.Error("Expected call to NodeKeeperMock.GetConsensusInfo")
	}
	// if func was set then invocations count should be greater than zero
	if m.funcGetConsensusInfo != nil && mm_atomic.LoadUint64(&m.afterGetConsensusInfoCounter) < 1 {
		m.t.Error("Expected call to NodeKeeperMock.GetConsensusInfo")
	}
}

type mNodeKeeperMockGetOrigin struct {
	mock               *NodeKeeperMock
	defaultExpectation *NodeKeeperMockGetOriginExpectation
	expectations       []*NodeKeeperMockGetOriginExpectation
}

// NodeKeeperMockGetOriginExpectation specifies expectation struct of the NodeKeeper.GetOrigin
type NodeKeeperMockGetOriginExpectation struct {
	mock *NodeKeeperMock

	results *NodeKeeperMockGetOriginResults
	Counter uint64
}

// NodeKeeperMockGetOriginResults contains results of the NodeKeeper.GetOrigin
type NodeKeeperMockGetOriginResults struct {
	n1 insolar.NetworkNode
}

// Expect sets up expected params for NodeKeeper.GetOrigin
func (mmGetOrigin *mNodeKeeperMockGetOrigin) Expect() *mNodeKeeperMockGetOrigin {
	if mmGetOrigin.mock.funcGetOrigin != nil {
		mmGetOrigin.mock.t.Fatalf("NodeKeeperMock.GetOrigin mock is already set by Set")
	}

	if mmGetOrigin.defaultExpectation == nil {
		mmGetOrigin.defaultExpectation = &NodeKeeperMockGetOriginExpectation{}
	}

	return mmGetOrigin
}

// Inspect accepts an inspector function that has same arguments as the NodeKeeper.GetOrigin
func (mmGetOrigin *mNodeKeeperMockGetOrigin) Inspect(f func()) *mNodeKeeperMockGetOrigin {
	if mmGetOrigin.mock.inspectFuncGetOrigin != nil {
		mmGetOrigin.mock.t.Fatalf("Inspect function is already set for NodeKeeperMock.GetOrigin")
	}

	mmGetOrigin.mock.inspectFuncGetOrigin = f

	return mmGetOrigin
}

// Return sets up results that will be returned by NodeKeeper.GetOrigin
func (mmGetOrigin *mNodeKeeperMockGetOrigin) Return(n1 insolar.NetworkNode) *NodeKeeperMock {
	if mmGetOrigin.mock.funcGetOrigin != nil {
		mmGetOrigin.mock.t.Fatalf("NodeKeeperMock.GetOrigin mock is already set by Set")
	}

	if mmGetOrigin.defaultExpectation == nil {
		mmGetOrigin.defaultExpectation = &NodeKeeperMockGetOriginExpectation{mock: mmGetOrigin.mock}
	}
	mmGetOrigin.defaultExpectation.results = &NodeKeeperMockGetOriginResults{n1}
	return mmGetOrigin.mock
}

//Set uses given function f to mock the NodeKeeper.GetOrigin method
func (mmGetOrigin *mNodeKeeperMockGetOrigin) Set(f func() (n1 insolar.NetworkNode)) *NodeKeeperMock {
	if mmGetOrigin.defaultExpectation != nil {
		mmGetOrigin.mock.t.Fatalf("Default expectation is already set for the NodeKeeper.GetOrigin method")
	}

	if len(mmGetOrigin.expectations) > 0 {
		mmGetOrigin.mock.t.Fatalf("Some expectations are already set for the NodeKeeper.GetOrigin method")
	}

	mmGetOrigin.mock.funcGetOrigin = f
	return mmGetOrigin.mock
}

// GetOrigin implements network.NodeKeeper
func (mmGetOrigin *NodeKeeperMock) GetOrigin() (n1 insolar.NetworkNode) {
	mm_atomic.AddUint64(&mmGetOrigin.beforeGetOriginCounter, 1)
	defer mm_atomic.AddUint64(&mmGetOrigin.afterGetOriginCounter, 1)

	if mmGetOrigin.inspectFuncGetOrigin != nil {
		mmGetOrigin.inspectFuncGetOrigin()
	}

	if mmGetOrigin.GetOriginMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&mmGetOrigin.GetOriginMock.defaultExpectation.Counter, 1)

		results := mmGetOrigin.GetOriginMock.defaultExpectation.results
		if results == nil {
			mmGetOrigin.t.Fatal("No results are set for the NodeKeeperMock.GetOrigin")
		}
		return (*results).n1
	}
	if mmGetOrigin.funcGetOrigin != nil {
		return mmGetOrigin.funcGetOrigin()
	}
	mmGetOrigin.t.Fatalf("Unexpected call to NodeKeeperMock.GetOrigin.")
	return
}

// GetOriginAfterCounter returns a count of finished NodeKeeperMock.GetOrigin invocations
func (mmGetOrigin *NodeKeeperMock) GetOriginAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&mmGetOrigin.afterGetOriginCounter)
}

// GetOriginBeforeCounter returns a count of NodeKeeperMock.GetOrigin invocations
func (mmGetOrigin *NodeKeeperMock) GetOriginBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&mmGetOrigin.beforeGetOriginCounter)
}

// MinimockGetOriginDone returns true if the count of the GetOrigin invocations corresponds
// the number of defined expectations
func (m *NodeKeeperMock) MinimockGetOriginDone() bool {
	for _, e := range m.GetOriginMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.GetOriginMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterGetOriginCounter) < 1 {
		return false
	}
	// if func was set then invocations count should be greater than zero
	if m.funcGetOrigin != nil && mm_atomic.LoadUint64(&m.afterGetOriginCounter) < 1 {
		return false
	}
	return true
}

// MinimockGetOriginInspect logs each unmet expectation
func (m *NodeKeeperMock) MinimockGetOriginInspect() {
	for _, e := range m.GetOriginMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Error("Expected call to NodeKeeperMock.GetOrigin")
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.GetOriginMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterGetOriginCounter) < 1 {
		m.t.Error("Expected call to NodeKeeperMock.GetOrigin")
	}
	// if func was set then invocations count should be greater than zero
	if m.funcGetOrigin != nil && mm_atomic.LoadUint64(&m.afterGetOriginCounter) < 1 {
		m.t.Error("Expected call to NodeKeeperMock.GetOrigin")
	}
}

type mNodeKeeperMockGetOriginAnnounceClaim struct {
	mock               *NodeKeeperMock
	defaultExpectation *NodeKeeperMockGetOriginAnnounceClaimExpectation
	expectations       []*NodeKeeperMockGetOriginAnnounceClaimExpectation

	callArgs []*NodeKeeperMockGetOriginAnnounceClaimParams
	mutex    sync.RWMutex
}

// NodeKeeperMockGetOriginAnnounceClaimExpectation specifies expectation struct of the NodeKeeper.GetOriginAnnounceClaim
type NodeKeeperMockGetOriginAnnounceClaimExpectation struct {
	mock    *NodeKeeperMock
	params  *NodeKeeperMockGetOriginAnnounceClaimParams
	results *NodeKeeperMockGetOriginAnnounceClaimResults
	Counter uint64
}

// NodeKeeperMockGetOriginAnnounceClaimParams contains parameters of the NodeKeeper.GetOriginAnnounceClaim
type NodeKeeperMockGetOriginAnnounceClaimParams struct {
	mapper packets.BitSetMapper
}

// NodeKeeperMockGetOriginAnnounceClaimResults contains results of the NodeKeeper.GetOriginAnnounceClaim
type NodeKeeperMockGetOriginAnnounceClaimResults struct {
	np1 *packets.NodeAnnounceClaim
	err error
}

// Expect sets up expected params for NodeKeeper.GetOriginAnnounceClaim
func (mmGetOriginAnnounceClaim *mNodeKeeperMockGetOriginAnnounceClaim) Expect(mapper packets.BitSetMapper) *mNodeKeeperMockGetOriginAnnounceClaim {
	if mmGetOriginAnnounceClaim.mock.funcGetOriginAnnounceClaim != nil {
		mmGetOriginAnnounceClaim.mock.t.Fatalf("NodeKeeperMock.GetOriginAnnounceClaim mock is already set by Set")
	}

	if mmGetOriginAnnounceClaim.defaultExpectation == nil {
		mmGetOriginAnnounceClaim.defaultExpectation = &NodeKeeperMockGetOriginAnnounceClaimExpectation{}
	}

	mmGetOriginAnnounceClaim.defaultExpectation.params = &NodeKeeperMockGetOriginAnnounceClaimParams{mapper}
	for _, e := range mmGetOriginAnnounceClaim.expectations {
		if minimock.Equal(e.params, mmGetOriginAnnounceClaim.defaultExpectation.params) {
			mmGetOriginAnnounceClaim.mock.t.Fatalf("Expectation set by When has same params: %#v", *mmGetOriginAnnounceClaim.defaultExpectation.params)
		}
	}

	return mmGetOriginAnnounceClaim
}

// Inspect accepts an inspector function that has same arguments as the NodeKeeper.GetOriginAnnounceClaim
func (mmGetOriginAnnounceClaim *mNodeKeeperMockGetOriginAnnounceClaim) Inspect(f func(mapper packets.BitSetMapper)) *mNodeKeeperMockGetOriginAnnounceClaim {
	if mmGetOriginAnnounceClaim.mock.inspectFuncGetOriginAnnounceClaim != nil {
		mmGetOriginAnnounceClaim.mock.t.Fatalf("Inspect function is already set for NodeKeeperMock.GetOriginAnnounceClaim")
	}

	mmGetOriginAnnounceClaim.mock.inspectFuncGetOriginAnnounceClaim = f

	return mmGetOriginAnnounceClaim
}

// Return sets up results that will be returned by NodeKeeper.GetOriginAnnounceClaim
func (mmGetOriginAnnounceClaim *mNodeKeeperMockGetOriginAnnounceClaim) Return(np1 *packets.NodeAnnounceClaim, err error) *NodeKeeperMock {
	if mmGetOriginAnnounceClaim.mock.funcGetOriginAnnounceClaim != nil {
		mmGetOriginAnnounceClaim.mock.t.Fatalf("NodeKeeperMock.GetOriginAnnounceClaim mock is already set by Set")
	}

	if mmGetOriginAnnounceClaim.defaultExpectation == nil {
		mmGetOriginAnnounceClaim.defaultExpectation = &NodeKeeperMockGetOriginAnnounceClaimExpectation{mock: mmGetOriginAnnounceClaim.mock}
	}
	mmGetOriginAnnounceClaim.defaultExpectation.results = &NodeKeeperMockGetOriginAnnounceClaimResults{np1, err}
	return mmGetOriginAnnounceClaim.mock
}

//Set uses given function f to mock the NodeKeeper.GetOriginAnnounceClaim method
func (mmGetOriginAnnounceClaim *mNodeKeeperMockGetOriginAnnounceClaim) Set(f func(mapper packets.BitSetMapper) (np1 *packets.NodeAnnounceClaim, err error)) *NodeKeeperMock {
	if mmGetOriginAnnounceClaim.defaultExpectation != nil {
		mmGetOriginAnnounceClaim.mock.t.Fatalf("Default expectation is already set for the NodeKeeper.GetOriginAnnounceClaim method")
	}

	if len(mmGetOriginAnnounceClaim.expectations) > 0 {
		mmGetOriginAnnounceClaim.mock.t.Fatalf("Some expectations are already set for the NodeKeeper.GetOriginAnnounceClaim method")
	}

	mmGetOriginAnnounceClaim.mock.funcGetOriginAnnounceClaim = f
	return mmGetOriginAnnounceClaim.mock
}

// When sets expectation for the NodeKeeper.GetOriginAnnounceClaim which will trigger the result defined by the following
// Then helper
func (mmGetOriginAnnounceClaim *mNodeKeeperMockGetOriginAnnounceClaim) When(mapper packets.BitSetMapper) *NodeKeeperMockGetOriginAnnounceClaimExpectation {
	if mmGetOriginAnnounceClaim.mock.funcGetOriginAnnounceClaim != nil {
		mmGetOriginAnnounceClaim.mock.t.Fatalf("NodeKeeperMock.GetOriginAnnounceClaim mock is already set by Set")
	}

	expectation := &NodeKeeperMockGetOriginAnnounceClaimExpectation{
		mock:   mmGetOriginAnnounceClaim.mock,
		params: &NodeKeeperMockGetOriginAnnounceClaimParams{mapper},
	}
	mmGetOriginAnnounceClaim.expectations = append(mmGetOriginAnnounceClaim.expectations, expectation)
	return expectation
}

// Then sets up NodeKeeper.GetOriginAnnounceClaim return parameters for the expectation previously defined by the When method
func (e *NodeKeeperMockGetOriginAnnounceClaimExpectation) Then(np1 *packets.NodeAnnounceClaim, err error) *NodeKeeperMock {
	e.results = &NodeKeeperMockGetOriginAnnounceClaimResults{np1, err}
	return e.mock
}

// GetOriginAnnounceClaim implements network.NodeKeeper
func (mmGetOriginAnnounceClaim *NodeKeeperMock) GetOriginAnnounceClaim(mapper packets.BitSetMapper) (np1 *packets.NodeAnnounceClaim, err error) {
	mm_atomic.AddUint64(&mmGetOriginAnnounceClaim.beforeGetOriginAnnounceClaimCounter, 1)
	defer mm_atomic.AddUint64(&mmGetOriginAnnounceClaim.afterGetOriginAnnounceClaimCounter, 1)

	if mmGetOriginAnnounceClaim.inspectFuncGetOriginAnnounceClaim != nil {
		mmGetOriginAnnounceClaim.inspectFuncGetOriginAnnounceClaim(mapper)
	}

	params := &NodeKeeperMockGetOriginAnnounceClaimParams{mapper}

	// Record call args
	mmGetOriginAnnounceClaim.GetOriginAnnounceClaimMock.mutex.Lock()
	mmGetOriginAnnounceClaim.GetOriginAnnounceClaimMock.callArgs = append(mmGetOriginAnnounceClaim.GetOriginAnnounceClaimMock.callArgs, params)
	mmGetOriginAnnounceClaim.GetOriginAnnounceClaimMock.mutex.Unlock()

	for _, e := range mmGetOriginAnnounceClaim.GetOriginAnnounceClaimMock.expectations {
		if minimock.Equal(e.params, params) {
			mm_atomic.AddUint64(&e.Counter, 1)
			return e.results.np1, e.results.err
		}
	}

	if mmGetOriginAnnounceClaim.GetOriginAnnounceClaimMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&mmGetOriginAnnounceClaim.GetOriginAnnounceClaimMock.defaultExpectation.Counter, 1)
		want := mmGetOriginAnnounceClaim.GetOriginAnnounceClaimMock.defaultExpectation.params
		got := NodeKeeperMockGetOriginAnnounceClaimParams{mapper}
		if want != nil && !minimock.Equal(*want, got) {
			mmGetOriginAnnounceClaim.t.Errorf("NodeKeeperMock.GetOriginAnnounceClaim got unexpected parameters, want: %#v, got: %#v%s\n", *want, got, minimock.Diff(*want, got))
		}

		results := mmGetOriginAnnounceClaim.GetOriginAnnounceClaimMock.defaultExpectation.results
		if results == nil {
			mmGetOriginAnnounceClaim.t.Fatal("No results are set for the NodeKeeperMock.GetOriginAnnounceClaim")
		}
		return (*results).np1, (*results).err
	}
	if mmGetOriginAnnounceClaim.funcGetOriginAnnounceClaim != nil {
		return mmGetOriginAnnounceClaim.funcGetOriginAnnounceClaim(mapper)
	}
	mmGetOriginAnnounceClaim.t.Fatalf("Unexpected call to NodeKeeperMock.GetOriginAnnounceClaim. %v", mapper)
	return
}

// GetOriginAnnounceClaimAfterCounter returns a count of finished NodeKeeperMock.GetOriginAnnounceClaim invocations
func (mmGetOriginAnnounceClaim *NodeKeeperMock) GetOriginAnnounceClaimAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&mmGetOriginAnnounceClaim.afterGetOriginAnnounceClaimCounter)
}

// GetOriginAnnounceClaimBeforeCounter returns a count of NodeKeeperMock.GetOriginAnnounceClaim invocations
func (mmGetOriginAnnounceClaim *NodeKeeperMock) GetOriginAnnounceClaimBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&mmGetOriginAnnounceClaim.beforeGetOriginAnnounceClaimCounter)
}

// Calls returns a list of arguments used in each call to NodeKeeperMock.GetOriginAnnounceClaim.
// The list is in the same order as the calls were made (i.e. recent calls have a higher index)
func (mmGetOriginAnnounceClaim *mNodeKeeperMockGetOriginAnnounceClaim) Calls() []*NodeKeeperMockGetOriginAnnounceClaimParams {
	mmGetOriginAnnounceClaim.mutex.RLock()

	argCopy := make([]*NodeKeeperMockGetOriginAnnounceClaimParams, len(mmGetOriginAnnounceClaim.callArgs))
	copy(argCopy, mmGetOriginAnnounceClaim.callArgs)

	mmGetOriginAnnounceClaim.mutex.RUnlock()

	return argCopy
}

// MinimockGetOriginAnnounceClaimDone returns true if the count of the GetOriginAnnounceClaim invocations corresponds
// the number of defined expectations
func (m *NodeKeeperMock) MinimockGetOriginAnnounceClaimDone() bool {
	for _, e := range m.GetOriginAnnounceClaimMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.GetOriginAnnounceClaimMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterGetOriginAnnounceClaimCounter) < 1 {
		return false
	}
	// if func was set then invocations count should be greater than zero
	if m.funcGetOriginAnnounceClaim != nil && mm_atomic.LoadUint64(&m.afterGetOriginAnnounceClaimCounter) < 1 {
		return false
	}
	return true
}

// MinimockGetOriginAnnounceClaimInspect logs each unmet expectation
func (m *NodeKeeperMock) MinimockGetOriginAnnounceClaimInspect() {
	for _, e := range m.GetOriginAnnounceClaimMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Errorf("Expected call to NodeKeeperMock.GetOriginAnnounceClaim with params: %#v", *e.params)
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.GetOriginAnnounceClaimMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterGetOriginAnnounceClaimCounter) < 1 {
		if m.GetOriginAnnounceClaimMock.defaultExpectation.params == nil {
			m.t.Error("Expected call to NodeKeeperMock.GetOriginAnnounceClaim")
		} else {
			m.t.Errorf("Expected call to NodeKeeperMock.GetOriginAnnounceClaim with params: %#v", *m.GetOriginAnnounceClaimMock.defaultExpectation.params)
		}
	}
	// if func was set then invocations count should be greater than zero
	if m.funcGetOriginAnnounceClaim != nil && mm_atomic.LoadUint64(&m.afterGetOriginAnnounceClaimCounter) < 1 {
		m.t.Error("Expected call to NodeKeeperMock.GetOriginAnnounceClaim")
	}
}

type mNodeKeeperMockGetOriginJoinClaim struct {
	mock               *NodeKeeperMock
	defaultExpectation *NodeKeeperMockGetOriginJoinClaimExpectation
	expectations       []*NodeKeeperMockGetOriginJoinClaimExpectation
}

// NodeKeeperMockGetOriginJoinClaimExpectation specifies expectation struct of the NodeKeeper.GetOriginJoinClaim
type NodeKeeperMockGetOriginJoinClaimExpectation struct {
	mock *NodeKeeperMock

	results *NodeKeeperMockGetOriginJoinClaimResults
	Counter uint64
}

// NodeKeeperMockGetOriginJoinClaimResults contains results of the NodeKeeper.GetOriginJoinClaim
type NodeKeeperMockGetOriginJoinClaimResults struct {
	np1 *packets.NodeJoinClaim
	err error
}

// Expect sets up expected params for NodeKeeper.GetOriginJoinClaim
func (mmGetOriginJoinClaim *mNodeKeeperMockGetOriginJoinClaim) Expect() *mNodeKeeperMockGetOriginJoinClaim {
	if mmGetOriginJoinClaim.mock.funcGetOriginJoinClaim != nil {
		mmGetOriginJoinClaim.mock.t.Fatalf("NodeKeeperMock.GetOriginJoinClaim mock is already set by Set")
	}

	if mmGetOriginJoinClaim.defaultExpectation == nil {
		mmGetOriginJoinClaim.defaultExpectation = &NodeKeeperMockGetOriginJoinClaimExpectation{}
	}

	return mmGetOriginJoinClaim
}

// Inspect accepts an inspector function that has same arguments as the NodeKeeper.GetOriginJoinClaim
func (mmGetOriginJoinClaim *mNodeKeeperMockGetOriginJoinClaim) Inspect(f func()) *mNodeKeeperMockGetOriginJoinClaim {
	if mmGetOriginJoinClaim.mock.inspectFuncGetOriginJoinClaim != nil {
		mmGetOriginJoinClaim.mock.t.Fatalf("Inspect function is already set for NodeKeeperMock.GetOriginJoinClaim")
	}

	mmGetOriginJoinClaim.mock.inspectFuncGetOriginJoinClaim = f

	return mmGetOriginJoinClaim
}

// Return sets up results that will be returned by NodeKeeper.GetOriginJoinClaim
func (mmGetOriginJoinClaim *mNodeKeeperMockGetOriginJoinClaim) Return(np1 *packets.NodeJoinClaim, err error) *NodeKeeperMock {
	if mmGetOriginJoinClaim.mock.funcGetOriginJoinClaim != nil {
		mmGetOriginJoinClaim.mock.t.Fatalf("NodeKeeperMock.GetOriginJoinClaim mock is already set by Set")
	}

	if mmGetOriginJoinClaim.defaultExpectation == nil {
		mmGetOriginJoinClaim.defaultExpectation = &NodeKeeperMockGetOriginJoinClaimExpectation{mock: mmGetOriginJoinClaim.mock}
	}
	mmGetOriginJoinClaim.defaultExpectation.results = &NodeKeeperMockGetOriginJoinClaimResults{np1, err}
	return mmGetOriginJoinClaim.mock
}

//Set uses given function f to mock the NodeKeeper.GetOriginJoinClaim method
func (mmGetOriginJoinClaim *mNodeKeeperMockGetOriginJoinClaim) Set(f func() (np1 *packets.NodeJoinClaim, err error)) *NodeKeeperMock {
	if mmGetOriginJoinClaim.defaultExpectation != nil {
		mmGetOriginJoinClaim.mock.t.Fatalf("Default expectation is already set for the NodeKeeper.GetOriginJoinClaim method")
	}

	if len(mmGetOriginJoinClaim.expectations) > 0 {
		mmGetOriginJoinClaim.mock.t.Fatalf("Some expectations are already set for the NodeKeeper.GetOriginJoinClaim method")
	}

	mmGetOriginJoinClaim.mock.funcGetOriginJoinClaim = f
	return mmGetOriginJoinClaim.mock
}

// GetOriginJoinClaim implements network.NodeKeeper
func (mmGetOriginJoinClaim *NodeKeeperMock) GetOriginJoinClaim() (np1 *packets.NodeJoinClaim, err error) {
	mm_atomic.AddUint64(&mmGetOriginJoinClaim.beforeGetOriginJoinClaimCounter, 1)
	defer mm_atomic.AddUint64(&mmGetOriginJoinClaim.afterGetOriginJoinClaimCounter, 1)

	if mmGetOriginJoinClaim.inspectFuncGetOriginJoinClaim != nil {
		mmGetOriginJoinClaim.inspectFuncGetOriginJoinClaim()
	}

	if mmGetOriginJoinClaim.GetOriginJoinClaimMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&mmGetOriginJoinClaim.GetOriginJoinClaimMock.defaultExpectation.Counter, 1)

		results := mmGetOriginJoinClaim.GetOriginJoinClaimMock.defaultExpectation.results
		if results == nil {
			mmGetOriginJoinClaim.t.Fatal("No results are set for the NodeKeeperMock.GetOriginJoinClaim")
		}
		return (*results).np1, (*results).err
	}
	if mmGetOriginJoinClaim.funcGetOriginJoinClaim != nil {
		return mmGetOriginJoinClaim.funcGetOriginJoinClaim()
	}
	mmGetOriginJoinClaim.t.Fatalf("Unexpected call to NodeKeeperMock.GetOriginJoinClaim.")
	return
}

// GetOriginJoinClaimAfterCounter returns a count of finished NodeKeeperMock.GetOriginJoinClaim invocations
func (mmGetOriginJoinClaim *NodeKeeperMock) GetOriginJoinClaimAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&mmGetOriginJoinClaim.afterGetOriginJoinClaimCounter)
}

// GetOriginJoinClaimBeforeCounter returns a count of NodeKeeperMock.GetOriginJoinClaim invocations
func (mmGetOriginJoinClaim *NodeKeeperMock) GetOriginJoinClaimBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&mmGetOriginJoinClaim.beforeGetOriginJoinClaimCounter)
}

// MinimockGetOriginJoinClaimDone returns true if the count of the GetOriginJoinClaim invocations corresponds
// the number of defined expectations
func (m *NodeKeeperMock) MinimockGetOriginJoinClaimDone() bool {
	for _, e := range m.GetOriginJoinClaimMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.GetOriginJoinClaimMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterGetOriginJoinClaimCounter) < 1 {
		return false
	}
	// if func was set then invocations count should be greater than zero
	if m.funcGetOriginJoinClaim != nil && mm_atomic.LoadUint64(&m.afterGetOriginJoinClaimCounter) < 1 {
		return false
	}
	return true
}

// MinimockGetOriginJoinClaimInspect logs each unmet expectation
func (m *NodeKeeperMock) MinimockGetOriginJoinClaimInspect() {
	for _, e := range m.GetOriginJoinClaimMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Error("Expected call to NodeKeeperMock.GetOriginJoinClaim")
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.GetOriginJoinClaimMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterGetOriginJoinClaimCounter) < 1 {
		m.t.Error("Expected call to NodeKeeperMock.GetOriginJoinClaim")
	}
	// if func was set then invocations count should be greater than zero
	if m.funcGetOriginJoinClaim != nil && mm_atomic.LoadUint64(&m.afterGetOriginJoinClaimCounter) < 1 {
		m.t.Error("Expected call to NodeKeeperMock.GetOriginJoinClaim")
	}
}

type mNodeKeeperMockGetSnapshotCopy struct {
	mock               *NodeKeeperMock
	defaultExpectation *NodeKeeperMockGetSnapshotCopyExpectation
	expectations       []*NodeKeeperMockGetSnapshotCopyExpectation
}

// NodeKeeperMockGetSnapshotCopyExpectation specifies expectation struct of the NodeKeeper.GetSnapshotCopy
type NodeKeeperMockGetSnapshotCopyExpectation struct {
	mock *NodeKeeperMock

	results *NodeKeeperMockGetSnapshotCopyResults
	Counter uint64
}

// NodeKeeperMockGetSnapshotCopyResults contains results of the NodeKeeper.GetSnapshotCopy
type NodeKeeperMockGetSnapshotCopyResults struct {
	sp1 *node.Snapshot
}

// Expect sets up expected params for NodeKeeper.GetSnapshotCopy
func (mmGetSnapshotCopy *mNodeKeeperMockGetSnapshotCopy) Expect() *mNodeKeeperMockGetSnapshotCopy {
	if mmGetSnapshotCopy.mock.funcGetSnapshotCopy != nil {
		mmGetSnapshotCopy.mock.t.Fatalf("NodeKeeperMock.GetSnapshotCopy mock is already set by Set")
	}

	if mmGetSnapshotCopy.defaultExpectation == nil {
		mmGetSnapshotCopy.defaultExpectation = &NodeKeeperMockGetSnapshotCopyExpectation{}
	}

	return mmGetSnapshotCopy
}

// Inspect accepts an inspector function that has same arguments as the NodeKeeper.GetSnapshotCopy
func (mmGetSnapshotCopy *mNodeKeeperMockGetSnapshotCopy) Inspect(f func()) *mNodeKeeperMockGetSnapshotCopy {
	if mmGetSnapshotCopy.mock.inspectFuncGetSnapshotCopy != nil {
		mmGetSnapshotCopy.mock.t.Fatalf("Inspect function is already set for NodeKeeperMock.GetSnapshotCopy")
	}

	mmGetSnapshotCopy.mock.inspectFuncGetSnapshotCopy = f

	return mmGetSnapshotCopy
}

// Return sets up results that will be returned by NodeKeeper.GetSnapshotCopy
func (mmGetSnapshotCopy *mNodeKeeperMockGetSnapshotCopy) Return(sp1 *node.Snapshot) *NodeKeeperMock {
	if mmGetSnapshotCopy.mock.funcGetSnapshotCopy != nil {
		mmGetSnapshotCopy.mock.t.Fatalf("NodeKeeperMock.GetSnapshotCopy mock is already set by Set")
	}

	if mmGetSnapshotCopy.defaultExpectation == nil {
		mmGetSnapshotCopy.defaultExpectation = &NodeKeeperMockGetSnapshotCopyExpectation{mock: mmGetSnapshotCopy.mock}
	}
	mmGetSnapshotCopy.defaultExpectation.results = &NodeKeeperMockGetSnapshotCopyResults{sp1}
	return mmGetSnapshotCopy.mock
}

//Set uses given function f to mock the NodeKeeper.GetSnapshotCopy method
func (mmGetSnapshotCopy *mNodeKeeperMockGetSnapshotCopy) Set(f func() (sp1 *node.Snapshot)) *NodeKeeperMock {
	if mmGetSnapshotCopy.defaultExpectation != nil {
		mmGetSnapshotCopy.mock.t.Fatalf("Default expectation is already set for the NodeKeeper.GetSnapshotCopy method")
	}

	if len(mmGetSnapshotCopy.expectations) > 0 {
		mmGetSnapshotCopy.mock.t.Fatalf("Some expectations are already set for the NodeKeeper.GetSnapshotCopy method")
	}

	mmGetSnapshotCopy.mock.funcGetSnapshotCopy = f
	return mmGetSnapshotCopy.mock
}

// GetSnapshotCopy implements network.NodeKeeper
func (mmGetSnapshotCopy *NodeKeeperMock) GetSnapshotCopy() (sp1 *node.Snapshot) {
	mm_atomic.AddUint64(&mmGetSnapshotCopy.beforeGetSnapshotCopyCounter, 1)
	defer mm_atomic.AddUint64(&mmGetSnapshotCopy.afterGetSnapshotCopyCounter, 1)

	if mmGetSnapshotCopy.inspectFuncGetSnapshotCopy != nil {
		mmGetSnapshotCopy.inspectFuncGetSnapshotCopy()
	}

	if mmGetSnapshotCopy.GetSnapshotCopyMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&mmGetSnapshotCopy.GetSnapshotCopyMock.defaultExpectation.Counter, 1)

		results := mmGetSnapshotCopy.GetSnapshotCopyMock.defaultExpectation.results
		if results == nil {
			mmGetSnapshotCopy.t.Fatal("No results are set for the NodeKeeperMock.GetSnapshotCopy")
		}
		return (*results).sp1
	}
	if mmGetSnapshotCopy.funcGetSnapshotCopy != nil {
		return mmGetSnapshotCopy.funcGetSnapshotCopy()
	}
	mmGetSnapshotCopy.t.Fatalf("Unexpected call to NodeKeeperMock.GetSnapshotCopy.")
	return
}

// GetSnapshotCopyAfterCounter returns a count of finished NodeKeeperMock.GetSnapshotCopy invocations
func (mmGetSnapshotCopy *NodeKeeperMock) GetSnapshotCopyAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&mmGetSnapshotCopy.afterGetSnapshotCopyCounter)
}

// GetSnapshotCopyBeforeCounter returns a count of NodeKeeperMock.GetSnapshotCopy invocations
func (mmGetSnapshotCopy *NodeKeeperMock) GetSnapshotCopyBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&mmGetSnapshotCopy.beforeGetSnapshotCopyCounter)
}

// MinimockGetSnapshotCopyDone returns true if the count of the GetSnapshotCopy invocations corresponds
// the number of defined expectations
func (m *NodeKeeperMock) MinimockGetSnapshotCopyDone() bool {
	for _, e := range m.GetSnapshotCopyMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.GetSnapshotCopyMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterGetSnapshotCopyCounter) < 1 {
		return false
	}
	// if func was set then invocations count should be greater than zero
	if m.funcGetSnapshotCopy != nil && mm_atomic.LoadUint64(&m.afterGetSnapshotCopyCounter) < 1 {
		return false
	}
	return true
}

// MinimockGetSnapshotCopyInspect logs each unmet expectation
func (m *NodeKeeperMock) MinimockGetSnapshotCopyInspect() {
	for _, e := range m.GetSnapshotCopyMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Error("Expected call to NodeKeeperMock.GetSnapshotCopy")
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.GetSnapshotCopyMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterGetSnapshotCopyCounter) < 1 {
		m.t.Error("Expected call to NodeKeeperMock.GetSnapshotCopy")
	}
	// if func was set then invocations count should be greater than zero
	if m.funcGetSnapshotCopy != nil && mm_atomic.LoadUint64(&m.afterGetSnapshotCopyCounter) < 1 {
		m.t.Error("Expected call to NodeKeeperMock.GetSnapshotCopy")
	}
}

type mNodeKeeperMockGetWorkingNode struct {
	mock               *NodeKeeperMock
	defaultExpectation *NodeKeeperMockGetWorkingNodeExpectation
	expectations       []*NodeKeeperMockGetWorkingNodeExpectation

	callArgs []*NodeKeeperMockGetWorkingNodeParams
	mutex    sync.RWMutex
}

// NodeKeeperMockGetWorkingNodeExpectation specifies expectation struct of the NodeKeeper.GetWorkingNode
type NodeKeeperMockGetWorkingNodeExpectation struct {
	mock    *NodeKeeperMock
	params  *NodeKeeperMockGetWorkingNodeParams
	results *NodeKeeperMockGetWorkingNodeResults
	Counter uint64
}

// NodeKeeperMockGetWorkingNodeParams contains parameters of the NodeKeeper.GetWorkingNode
type NodeKeeperMockGetWorkingNodeParams struct {
	ref insolar.Reference
}

// NodeKeeperMockGetWorkingNodeResults contains results of the NodeKeeper.GetWorkingNode
type NodeKeeperMockGetWorkingNodeResults struct {
	n1 insolar.NetworkNode
}

// Expect sets up expected params for NodeKeeper.GetWorkingNode
func (mmGetWorkingNode *mNodeKeeperMockGetWorkingNode) Expect(ref insolar.Reference) *mNodeKeeperMockGetWorkingNode {
	if mmGetWorkingNode.mock.funcGetWorkingNode != nil {
		mmGetWorkingNode.mock.t.Fatalf("NodeKeeperMock.GetWorkingNode mock is already set by Set")
	}

	if mmGetWorkingNode.defaultExpectation == nil {
		mmGetWorkingNode.defaultExpectation = &NodeKeeperMockGetWorkingNodeExpectation{}
	}

	mmGetWorkingNode.defaultExpectation.params = &NodeKeeperMockGetWorkingNodeParams{ref}
	for _, e := range mmGetWorkingNode.expectations {
		if minimock.Equal(e.params, mmGetWorkingNode.defaultExpectation.params) {
			mmGetWorkingNode.mock.t.Fatalf("Expectation set by When has same params: %#v", *mmGetWorkingNode.defaultExpectation.params)
		}
	}

	return mmGetWorkingNode
}

// Inspect accepts an inspector function that has same arguments as the NodeKeeper.GetWorkingNode
func (mmGetWorkingNode *mNodeKeeperMockGetWorkingNode) Inspect(f func(ref insolar.Reference)) *mNodeKeeperMockGetWorkingNode {
	if mmGetWorkingNode.mock.inspectFuncGetWorkingNode != nil {
		mmGetWorkingNode.mock.t.Fatalf("Inspect function is already set for NodeKeeperMock.GetWorkingNode")
	}

	mmGetWorkingNode.mock.inspectFuncGetWorkingNode = f

	return mmGetWorkingNode
}

// Return sets up results that will be returned by NodeKeeper.GetWorkingNode
func (mmGetWorkingNode *mNodeKeeperMockGetWorkingNode) Return(n1 insolar.NetworkNode) *NodeKeeperMock {
	if mmGetWorkingNode.mock.funcGetWorkingNode != nil {
		mmGetWorkingNode.mock.t.Fatalf("NodeKeeperMock.GetWorkingNode mock is already set by Set")
	}

	if mmGetWorkingNode.defaultExpectation == nil {
		mmGetWorkingNode.defaultExpectation = &NodeKeeperMockGetWorkingNodeExpectation{mock: mmGetWorkingNode.mock}
	}
	mmGetWorkingNode.defaultExpectation.results = &NodeKeeperMockGetWorkingNodeResults{n1}
	return mmGetWorkingNode.mock
}

//Set uses given function f to mock the NodeKeeper.GetWorkingNode method
func (mmGetWorkingNode *mNodeKeeperMockGetWorkingNode) Set(f func(ref insolar.Reference) (n1 insolar.NetworkNode)) *NodeKeeperMock {
	if mmGetWorkingNode.defaultExpectation != nil {
		mmGetWorkingNode.mock.t.Fatalf("Default expectation is already set for the NodeKeeper.GetWorkingNode method")
	}

	if len(mmGetWorkingNode.expectations) > 0 {
		mmGetWorkingNode.mock.t.Fatalf("Some expectations are already set for the NodeKeeper.GetWorkingNode method")
	}

	mmGetWorkingNode.mock.funcGetWorkingNode = f
	return mmGetWorkingNode.mock
}

// When sets expectation for the NodeKeeper.GetWorkingNode which will trigger the result defined by the following
// Then helper
func (mmGetWorkingNode *mNodeKeeperMockGetWorkingNode) When(ref insolar.Reference) *NodeKeeperMockGetWorkingNodeExpectation {
	if mmGetWorkingNode.mock.funcGetWorkingNode != nil {
		mmGetWorkingNode.mock.t.Fatalf("NodeKeeperMock.GetWorkingNode mock is already set by Set")
	}

	expectation := &NodeKeeperMockGetWorkingNodeExpectation{
		mock:   mmGetWorkingNode.mock,
		params: &NodeKeeperMockGetWorkingNodeParams{ref},
	}
	mmGetWorkingNode.expectations = append(mmGetWorkingNode.expectations, expectation)
	return expectation
}

// Then sets up NodeKeeper.GetWorkingNode return parameters for the expectation previously defined by the When method
func (e *NodeKeeperMockGetWorkingNodeExpectation) Then(n1 insolar.NetworkNode) *NodeKeeperMock {
	e.results = &NodeKeeperMockGetWorkingNodeResults{n1}
	return e.mock
}

// GetWorkingNode implements network.NodeKeeper
func (mmGetWorkingNode *NodeKeeperMock) GetWorkingNode(ref insolar.Reference) (n1 insolar.NetworkNode) {
	mm_atomic.AddUint64(&mmGetWorkingNode.beforeGetWorkingNodeCounter, 1)
	defer mm_atomic.AddUint64(&mmGetWorkingNode.afterGetWorkingNodeCounter, 1)

	if mmGetWorkingNode.inspectFuncGetWorkingNode != nil {
		mmGetWorkingNode.inspectFuncGetWorkingNode(ref)
	}

	params := &NodeKeeperMockGetWorkingNodeParams{ref}

	// Record call args
	mmGetWorkingNode.GetWorkingNodeMock.mutex.Lock()
	mmGetWorkingNode.GetWorkingNodeMock.callArgs = append(mmGetWorkingNode.GetWorkingNodeMock.callArgs, params)
	mmGetWorkingNode.GetWorkingNodeMock.mutex.Unlock()

	for _, e := range mmGetWorkingNode.GetWorkingNodeMock.expectations {
		if minimock.Equal(e.params, params) {
			mm_atomic.AddUint64(&e.Counter, 1)
			return e.results.n1
		}
	}

	if mmGetWorkingNode.GetWorkingNodeMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&mmGetWorkingNode.GetWorkingNodeMock.defaultExpectation.Counter, 1)
		want := mmGetWorkingNode.GetWorkingNodeMock.defaultExpectation.params
		got := NodeKeeperMockGetWorkingNodeParams{ref}
		if want != nil && !minimock.Equal(*want, got) {
			mmGetWorkingNode.t.Errorf("NodeKeeperMock.GetWorkingNode got unexpected parameters, want: %#v, got: %#v%s\n", *want, got, minimock.Diff(*want, got))
		}

		results := mmGetWorkingNode.GetWorkingNodeMock.defaultExpectation.results
		if results == nil {
			mmGetWorkingNode.t.Fatal("No results are set for the NodeKeeperMock.GetWorkingNode")
		}
		return (*results).n1
	}
	if mmGetWorkingNode.funcGetWorkingNode != nil {
		return mmGetWorkingNode.funcGetWorkingNode(ref)
	}
	mmGetWorkingNode.t.Fatalf("Unexpected call to NodeKeeperMock.GetWorkingNode. %v", ref)
	return
}

// GetWorkingNodeAfterCounter returns a count of finished NodeKeeperMock.GetWorkingNode invocations
func (mmGetWorkingNode *NodeKeeperMock) GetWorkingNodeAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&mmGetWorkingNode.afterGetWorkingNodeCounter)
}

// GetWorkingNodeBeforeCounter returns a count of NodeKeeperMock.GetWorkingNode invocations
func (mmGetWorkingNode *NodeKeeperMock) GetWorkingNodeBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&mmGetWorkingNode.beforeGetWorkingNodeCounter)
}

// Calls returns a list of arguments used in each call to NodeKeeperMock.GetWorkingNode.
// The list is in the same order as the calls were made (i.e. recent calls have a higher index)
func (mmGetWorkingNode *mNodeKeeperMockGetWorkingNode) Calls() []*NodeKeeperMockGetWorkingNodeParams {
	mmGetWorkingNode.mutex.RLock()

	argCopy := make([]*NodeKeeperMockGetWorkingNodeParams, len(mmGetWorkingNode.callArgs))
	copy(argCopy, mmGetWorkingNode.callArgs)

	mmGetWorkingNode.mutex.RUnlock()

	return argCopy
}

// MinimockGetWorkingNodeDone returns true if the count of the GetWorkingNode invocations corresponds
// the number of defined expectations
func (m *NodeKeeperMock) MinimockGetWorkingNodeDone() bool {
	for _, e := range m.GetWorkingNodeMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.GetWorkingNodeMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterGetWorkingNodeCounter) < 1 {
		return false
	}
	// if func was set then invocations count should be greater than zero
	if m.funcGetWorkingNode != nil && mm_atomic.LoadUint64(&m.afterGetWorkingNodeCounter) < 1 {
		return false
	}
	return true
}

// MinimockGetWorkingNodeInspect logs each unmet expectation
func (m *NodeKeeperMock) MinimockGetWorkingNodeInspect() {
	for _, e := range m.GetWorkingNodeMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Errorf("Expected call to NodeKeeperMock.GetWorkingNode with params: %#v", *e.params)
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.GetWorkingNodeMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterGetWorkingNodeCounter) < 1 {
		if m.GetWorkingNodeMock.defaultExpectation.params == nil {
			m.t.Error("Expected call to NodeKeeperMock.GetWorkingNode")
		} else {
			m.t.Errorf("Expected call to NodeKeeperMock.GetWorkingNode with params: %#v", *m.GetWorkingNodeMock.defaultExpectation.params)
		}
	}
	// if func was set then invocations count should be greater than zero
	if m.funcGetWorkingNode != nil && mm_atomic.LoadUint64(&m.afterGetWorkingNodeCounter) < 1 {
		m.t.Error("Expected call to NodeKeeperMock.GetWorkingNode")
	}
}

type mNodeKeeperMockGetWorkingNodes struct {
	mock               *NodeKeeperMock
	defaultExpectation *NodeKeeperMockGetWorkingNodesExpectation
	expectations       []*NodeKeeperMockGetWorkingNodesExpectation
}

// NodeKeeperMockGetWorkingNodesExpectation specifies expectation struct of the NodeKeeper.GetWorkingNodes
type NodeKeeperMockGetWorkingNodesExpectation struct {
	mock *NodeKeeperMock

	results *NodeKeeperMockGetWorkingNodesResults
	Counter uint64
}

// NodeKeeperMockGetWorkingNodesResults contains results of the NodeKeeper.GetWorkingNodes
type NodeKeeperMockGetWorkingNodesResults struct {
	na1 []insolar.NetworkNode
}

// Expect sets up expected params for NodeKeeper.GetWorkingNodes
func (mmGetWorkingNodes *mNodeKeeperMockGetWorkingNodes) Expect() *mNodeKeeperMockGetWorkingNodes {
	if mmGetWorkingNodes.mock.funcGetWorkingNodes != nil {
		mmGetWorkingNodes.mock.t.Fatalf("NodeKeeperMock.GetWorkingNodes mock is already set by Set")
	}

	if mmGetWorkingNodes.defaultExpectation == nil {
		mmGetWorkingNodes.defaultExpectation = &NodeKeeperMockGetWorkingNodesExpectation{}
	}

	return mmGetWorkingNodes
}

// Inspect accepts an inspector function that has same arguments as the NodeKeeper.GetWorkingNodes
func (mmGetWorkingNodes *mNodeKeeperMockGetWorkingNodes) Inspect(f func()) *mNodeKeeperMockGetWorkingNodes {
	if mmGetWorkingNodes.mock.inspectFuncGetWorkingNodes != nil {
		mmGetWorkingNodes.mock.t.Fatalf("Inspect function is already set for NodeKeeperMock.GetWorkingNodes")
	}

	mmGetWorkingNodes.mock.inspectFuncGetWorkingNodes = f

	return mmGetWorkingNodes
}

// Return sets up results that will be returned by NodeKeeper.GetWorkingNodes
func (mmGetWorkingNodes *mNodeKeeperMockGetWorkingNodes) Return(na1 []insolar.NetworkNode) *NodeKeeperMock {
	if mmGetWorkingNodes.mock.funcGetWorkingNodes != nil {
		mmGetWorkingNodes.mock.t.Fatalf("NodeKeeperMock.GetWorkingNodes mock is already set by Set")
	}

	if mmGetWorkingNodes.defaultExpectation == nil {
		mmGetWorkingNodes.defaultExpectation = &NodeKeeperMockGetWorkingNodesExpectation{mock: mmGetWorkingNodes.mock}
	}
	mmGetWorkingNodes.defaultExpectation.results = &NodeKeeperMockGetWorkingNodesResults{na1}
	return mmGetWorkingNodes.mock
}

//Set uses given function f to mock the NodeKeeper.GetWorkingNodes method
func (mmGetWorkingNodes *mNodeKeeperMockGetWorkingNodes) Set(f func() (na1 []insolar.NetworkNode)) *NodeKeeperMock {
	if mmGetWorkingNodes.defaultExpectation != nil {
		mmGetWorkingNodes.mock.t.Fatalf("Default expectation is already set for the NodeKeeper.GetWorkingNodes method")
	}

	if len(mmGetWorkingNodes.expectations) > 0 {
		mmGetWorkingNodes.mock.t.Fatalf("Some expectations are already set for the NodeKeeper.GetWorkingNodes method")
	}

	mmGetWorkingNodes.mock.funcGetWorkingNodes = f
	return mmGetWorkingNodes.mock
}

// GetWorkingNodes implements network.NodeKeeper
func (mmGetWorkingNodes *NodeKeeperMock) GetWorkingNodes() (na1 []insolar.NetworkNode) {
	mm_atomic.AddUint64(&mmGetWorkingNodes.beforeGetWorkingNodesCounter, 1)
	defer mm_atomic.AddUint64(&mmGetWorkingNodes.afterGetWorkingNodesCounter, 1)

	if mmGetWorkingNodes.inspectFuncGetWorkingNodes != nil {
		mmGetWorkingNodes.inspectFuncGetWorkingNodes()
	}

	if mmGetWorkingNodes.GetWorkingNodesMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&mmGetWorkingNodes.GetWorkingNodesMock.defaultExpectation.Counter, 1)

		results := mmGetWorkingNodes.GetWorkingNodesMock.defaultExpectation.results
		if results == nil {
			mmGetWorkingNodes.t.Fatal("No results are set for the NodeKeeperMock.GetWorkingNodes")
		}
		return (*results).na1
	}
	if mmGetWorkingNodes.funcGetWorkingNodes != nil {
		return mmGetWorkingNodes.funcGetWorkingNodes()
	}
	mmGetWorkingNodes.t.Fatalf("Unexpected call to NodeKeeperMock.GetWorkingNodes.")
	return
}

// GetWorkingNodesAfterCounter returns a count of finished NodeKeeperMock.GetWorkingNodes invocations
func (mmGetWorkingNodes *NodeKeeperMock) GetWorkingNodesAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&mmGetWorkingNodes.afterGetWorkingNodesCounter)
}

// GetWorkingNodesBeforeCounter returns a count of NodeKeeperMock.GetWorkingNodes invocations
func (mmGetWorkingNodes *NodeKeeperMock) GetWorkingNodesBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&mmGetWorkingNodes.beforeGetWorkingNodesCounter)
}

// MinimockGetWorkingNodesDone returns true if the count of the GetWorkingNodes invocations corresponds
// the number of defined expectations
func (m *NodeKeeperMock) MinimockGetWorkingNodesDone() bool {
	for _, e := range m.GetWorkingNodesMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.GetWorkingNodesMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterGetWorkingNodesCounter) < 1 {
		return false
	}
	// if func was set then invocations count should be greater than zero
	if m.funcGetWorkingNodes != nil && mm_atomic.LoadUint64(&m.afterGetWorkingNodesCounter) < 1 {
		return false
	}
	return true
}

// MinimockGetWorkingNodesInspect logs each unmet expectation
func (m *NodeKeeperMock) MinimockGetWorkingNodesInspect() {
	for _, e := range m.GetWorkingNodesMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Error("Expected call to NodeKeeperMock.GetWorkingNodes")
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.GetWorkingNodesMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterGetWorkingNodesCounter) < 1 {
		m.t.Error("Expected call to NodeKeeperMock.GetWorkingNodes")
	}
	// if func was set then invocations count should be greater than zero
	if m.funcGetWorkingNodes != nil && mm_atomic.LoadUint64(&m.afterGetWorkingNodesCounter) < 1 {
		m.t.Error("Expected call to NodeKeeperMock.GetWorkingNodes")
	}
}

type mNodeKeeperMockGetWorkingNodesByRole struct {
	mock               *NodeKeeperMock
	defaultExpectation *NodeKeeperMockGetWorkingNodesByRoleExpectation
	expectations       []*NodeKeeperMockGetWorkingNodesByRoleExpectation

	callArgs []*NodeKeeperMockGetWorkingNodesByRoleParams
	mutex    sync.RWMutex
}

// NodeKeeperMockGetWorkingNodesByRoleExpectation specifies expectation struct of the NodeKeeper.GetWorkingNodesByRole
type NodeKeeperMockGetWorkingNodesByRoleExpectation struct {
	mock    *NodeKeeperMock
	params  *NodeKeeperMockGetWorkingNodesByRoleParams
	results *NodeKeeperMockGetWorkingNodesByRoleResults
	Counter uint64
}

// NodeKeeperMockGetWorkingNodesByRoleParams contains parameters of the NodeKeeper.GetWorkingNodesByRole
type NodeKeeperMockGetWorkingNodesByRoleParams struct {
	role insolar.DynamicRole
}

// NodeKeeperMockGetWorkingNodesByRoleResults contains results of the NodeKeeper.GetWorkingNodesByRole
type NodeKeeperMockGetWorkingNodesByRoleResults struct {
	ra1 []insolar.Reference
}

// Expect sets up expected params for NodeKeeper.GetWorkingNodesByRole
func (mmGetWorkingNodesByRole *mNodeKeeperMockGetWorkingNodesByRole) Expect(role insolar.DynamicRole) *mNodeKeeperMockGetWorkingNodesByRole {
	if mmGetWorkingNodesByRole.mock.funcGetWorkingNodesByRole != nil {
		mmGetWorkingNodesByRole.mock.t.Fatalf("NodeKeeperMock.GetWorkingNodesByRole mock is already set by Set")
	}

	if mmGetWorkingNodesByRole.defaultExpectation == nil {
		mmGetWorkingNodesByRole.defaultExpectation = &NodeKeeperMockGetWorkingNodesByRoleExpectation{}
	}

	mmGetWorkingNodesByRole.defaultExpectation.params = &NodeKeeperMockGetWorkingNodesByRoleParams{role}
	for _, e := range mmGetWorkingNodesByRole.expectations {
		if minimock.Equal(e.params, mmGetWorkingNodesByRole.defaultExpectation.params) {
			mmGetWorkingNodesByRole.mock.t.Fatalf("Expectation set by When has same params: %#v", *mmGetWorkingNodesByRole.defaultExpectation.params)
		}
	}

	return mmGetWorkingNodesByRole
}

// Inspect accepts an inspector function that has same arguments as the NodeKeeper.GetWorkingNodesByRole
func (mmGetWorkingNodesByRole *mNodeKeeperMockGetWorkingNodesByRole) Inspect(f func(role insolar.DynamicRole)) *mNodeKeeperMockGetWorkingNodesByRole {
	if mmGetWorkingNodesByRole.mock.inspectFuncGetWorkingNodesByRole != nil {
		mmGetWorkingNodesByRole.mock.t.Fatalf("Inspect function is already set for NodeKeeperMock.GetWorkingNodesByRole")
	}

	mmGetWorkingNodesByRole.mock.inspectFuncGetWorkingNodesByRole = f

	return mmGetWorkingNodesByRole
}

// Return sets up results that will be returned by NodeKeeper.GetWorkingNodesByRole
func (mmGetWorkingNodesByRole *mNodeKeeperMockGetWorkingNodesByRole) Return(ra1 []insolar.Reference) *NodeKeeperMock {
	if mmGetWorkingNodesByRole.mock.funcGetWorkingNodesByRole != nil {
		mmGetWorkingNodesByRole.mock.t.Fatalf("NodeKeeperMock.GetWorkingNodesByRole mock is already set by Set")
	}

	if mmGetWorkingNodesByRole.defaultExpectation == nil {
		mmGetWorkingNodesByRole.defaultExpectation = &NodeKeeperMockGetWorkingNodesByRoleExpectation{mock: mmGetWorkingNodesByRole.mock}
	}
	mmGetWorkingNodesByRole.defaultExpectation.results = &NodeKeeperMockGetWorkingNodesByRoleResults{ra1}
	return mmGetWorkingNodesByRole.mock
}

//Set uses given function f to mock the NodeKeeper.GetWorkingNodesByRole method
func (mmGetWorkingNodesByRole *mNodeKeeperMockGetWorkingNodesByRole) Set(f func(role insolar.DynamicRole) (ra1 []insolar.Reference)) *NodeKeeperMock {
	if mmGetWorkingNodesByRole.defaultExpectation != nil {
		mmGetWorkingNodesByRole.mock.t.Fatalf("Default expectation is already set for the NodeKeeper.GetWorkingNodesByRole method")
	}

	if len(mmGetWorkingNodesByRole.expectations) > 0 {
		mmGetWorkingNodesByRole.mock.t.Fatalf("Some expectations are already set for the NodeKeeper.GetWorkingNodesByRole method")
	}

	mmGetWorkingNodesByRole.mock.funcGetWorkingNodesByRole = f
	return mmGetWorkingNodesByRole.mock
}

// When sets expectation for the NodeKeeper.GetWorkingNodesByRole which will trigger the result defined by the following
// Then helper
func (mmGetWorkingNodesByRole *mNodeKeeperMockGetWorkingNodesByRole) When(role insolar.DynamicRole) *NodeKeeperMockGetWorkingNodesByRoleExpectation {
	if mmGetWorkingNodesByRole.mock.funcGetWorkingNodesByRole != nil {
		mmGetWorkingNodesByRole.mock.t.Fatalf("NodeKeeperMock.GetWorkingNodesByRole mock is already set by Set")
	}

	expectation := &NodeKeeperMockGetWorkingNodesByRoleExpectation{
		mock:   mmGetWorkingNodesByRole.mock,
		params: &NodeKeeperMockGetWorkingNodesByRoleParams{role},
	}
	mmGetWorkingNodesByRole.expectations = append(mmGetWorkingNodesByRole.expectations, expectation)
	return expectation
}

// Then sets up NodeKeeper.GetWorkingNodesByRole return parameters for the expectation previously defined by the When method
func (e *NodeKeeperMockGetWorkingNodesByRoleExpectation) Then(ra1 []insolar.Reference) *NodeKeeperMock {
	e.results = &NodeKeeperMockGetWorkingNodesByRoleResults{ra1}
	return e.mock
}

// GetWorkingNodesByRole implements network.NodeKeeper
func (mmGetWorkingNodesByRole *NodeKeeperMock) GetWorkingNodesByRole(role insolar.DynamicRole) (ra1 []insolar.Reference) {
	mm_atomic.AddUint64(&mmGetWorkingNodesByRole.beforeGetWorkingNodesByRoleCounter, 1)
	defer mm_atomic.AddUint64(&mmGetWorkingNodesByRole.afterGetWorkingNodesByRoleCounter, 1)

	if mmGetWorkingNodesByRole.inspectFuncGetWorkingNodesByRole != nil {
		mmGetWorkingNodesByRole.inspectFuncGetWorkingNodesByRole(role)
	}

	params := &NodeKeeperMockGetWorkingNodesByRoleParams{role}

	// Record call args
	mmGetWorkingNodesByRole.GetWorkingNodesByRoleMock.mutex.Lock()
	mmGetWorkingNodesByRole.GetWorkingNodesByRoleMock.callArgs = append(mmGetWorkingNodesByRole.GetWorkingNodesByRoleMock.callArgs, params)
	mmGetWorkingNodesByRole.GetWorkingNodesByRoleMock.mutex.Unlock()

	for _, e := range mmGetWorkingNodesByRole.GetWorkingNodesByRoleMock.expectations {
		if minimock.Equal(e.params, params) {
			mm_atomic.AddUint64(&e.Counter, 1)
			return e.results.ra1
		}
	}

	if mmGetWorkingNodesByRole.GetWorkingNodesByRoleMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&mmGetWorkingNodesByRole.GetWorkingNodesByRoleMock.defaultExpectation.Counter, 1)
		want := mmGetWorkingNodesByRole.GetWorkingNodesByRoleMock.defaultExpectation.params
		got := NodeKeeperMockGetWorkingNodesByRoleParams{role}
		if want != nil && !minimock.Equal(*want, got) {
			mmGetWorkingNodesByRole.t.Errorf("NodeKeeperMock.GetWorkingNodesByRole got unexpected parameters, want: %#v, got: %#v%s\n", *want, got, minimock.Diff(*want, got))
		}

		results := mmGetWorkingNodesByRole.GetWorkingNodesByRoleMock.defaultExpectation.results
		if results == nil {
			mmGetWorkingNodesByRole.t.Fatal("No results are set for the NodeKeeperMock.GetWorkingNodesByRole")
		}
		return (*results).ra1
	}
	if mmGetWorkingNodesByRole.funcGetWorkingNodesByRole != nil {
		return mmGetWorkingNodesByRole.funcGetWorkingNodesByRole(role)
	}
	mmGetWorkingNodesByRole.t.Fatalf("Unexpected call to NodeKeeperMock.GetWorkingNodesByRole. %v", role)
	return
}

// GetWorkingNodesByRoleAfterCounter returns a count of finished NodeKeeperMock.GetWorkingNodesByRole invocations
func (mmGetWorkingNodesByRole *NodeKeeperMock) GetWorkingNodesByRoleAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&mmGetWorkingNodesByRole.afterGetWorkingNodesByRoleCounter)
}

// GetWorkingNodesByRoleBeforeCounter returns a count of NodeKeeperMock.GetWorkingNodesByRole invocations
func (mmGetWorkingNodesByRole *NodeKeeperMock) GetWorkingNodesByRoleBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&mmGetWorkingNodesByRole.beforeGetWorkingNodesByRoleCounter)
}

// Calls returns a list of arguments used in each call to NodeKeeperMock.GetWorkingNodesByRole.
// The list is in the same order as the calls were made (i.e. recent calls have a higher index)
func (mmGetWorkingNodesByRole *mNodeKeeperMockGetWorkingNodesByRole) Calls() []*NodeKeeperMockGetWorkingNodesByRoleParams {
	mmGetWorkingNodesByRole.mutex.RLock()

	argCopy := make([]*NodeKeeperMockGetWorkingNodesByRoleParams, len(mmGetWorkingNodesByRole.callArgs))
	copy(argCopy, mmGetWorkingNodesByRole.callArgs)

	mmGetWorkingNodesByRole.mutex.RUnlock()

	return argCopy
}

// MinimockGetWorkingNodesByRoleDone returns true if the count of the GetWorkingNodesByRole invocations corresponds
// the number of defined expectations
func (m *NodeKeeperMock) MinimockGetWorkingNodesByRoleDone() bool {
	for _, e := range m.GetWorkingNodesByRoleMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.GetWorkingNodesByRoleMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterGetWorkingNodesByRoleCounter) < 1 {
		return false
	}
	// if func was set then invocations count should be greater than zero
	if m.funcGetWorkingNodesByRole != nil && mm_atomic.LoadUint64(&m.afterGetWorkingNodesByRoleCounter) < 1 {
		return false
	}
	return true
}

// MinimockGetWorkingNodesByRoleInspect logs each unmet expectation
func (m *NodeKeeperMock) MinimockGetWorkingNodesByRoleInspect() {
	for _, e := range m.GetWorkingNodesByRoleMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Errorf("Expected call to NodeKeeperMock.GetWorkingNodesByRole with params: %#v", *e.params)
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.GetWorkingNodesByRoleMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterGetWorkingNodesByRoleCounter) < 1 {
		if m.GetWorkingNodesByRoleMock.defaultExpectation.params == nil {
			m.t.Error("Expected call to NodeKeeperMock.GetWorkingNodesByRole")
		} else {
			m.t.Errorf("Expected call to NodeKeeperMock.GetWorkingNodesByRole with params: %#v", *m.GetWorkingNodesByRoleMock.defaultExpectation.params)
		}
	}
	// if func was set then invocations count should be greater than zero
	if m.funcGetWorkingNodesByRole != nil && mm_atomic.LoadUint64(&m.afterGetWorkingNodesByRoleCounter) < 1 {
		m.t.Error("Expected call to NodeKeeperMock.GetWorkingNodesByRole")
	}
}

type mNodeKeeperMockIsBootstrapped struct {
	mock               *NodeKeeperMock
	defaultExpectation *NodeKeeperMockIsBootstrappedExpectation
	expectations       []*NodeKeeperMockIsBootstrappedExpectation
}

// NodeKeeperMockIsBootstrappedExpectation specifies expectation struct of the NodeKeeper.IsBootstrapped
type NodeKeeperMockIsBootstrappedExpectation struct {
	mock *NodeKeeperMock

	results *NodeKeeperMockIsBootstrappedResults
	Counter uint64
}

// NodeKeeperMockIsBootstrappedResults contains results of the NodeKeeper.IsBootstrapped
type NodeKeeperMockIsBootstrappedResults struct {
	b1 bool
}

// Expect sets up expected params for NodeKeeper.IsBootstrapped
func (mmIsBootstrapped *mNodeKeeperMockIsBootstrapped) Expect() *mNodeKeeperMockIsBootstrapped {
	if mmIsBootstrapped.mock.funcIsBootstrapped != nil {
		mmIsBootstrapped.mock.t.Fatalf("NodeKeeperMock.IsBootstrapped mock is already set by Set")
	}

	if mmIsBootstrapped.defaultExpectation == nil {
		mmIsBootstrapped.defaultExpectation = &NodeKeeperMockIsBootstrappedExpectation{}
	}

	return mmIsBootstrapped
}

// Inspect accepts an inspector function that has same arguments as the NodeKeeper.IsBootstrapped
func (mmIsBootstrapped *mNodeKeeperMockIsBootstrapped) Inspect(f func()) *mNodeKeeperMockIsBootstrapped {
	if mmIsBootstrapped.mock.inspectFuncIsBootstrapped != nil {
		mmIsBootstrapped.mock.t.Fatalf("Inspect function is already set for NodeKeeperMock.IsBootstrapped")
	}

	mmIsBootstrapped.mock.inspectFuncIsBootstrapped = f

	return mmIsBootstrapped
}

// Return sets up results that will be returned by NodeKeeper.IsBootstrapped
func (mmIsBootstrapped *mNodeKeeperMockIsBootstrapped) Return(b1 bool) *NodeKeeperMock {
	if mmIsBootstrapped.mock.funcIsBootstrapped != nil {
		mmIsBootstrapped.mock.t.Fatalf("NodeKeeperMock.IsBootstrapped mock is already set by Set")
	}

	if mmIsBootstrapped.defaultExpectation == nil {
		mmIsBootstrapped.defaultExpectation = &NodeKeeperMockIsBootstrappedExpectation{mock: mmIsBootstrapped.mock}
	}
	mmIsBootstrapped.defaultExpectation.results = &NodeKeeperMockIsBootstrappedResults{b1}
	return mmIsBootstrapped.mock
}

//Set uses given function f to mock the NodeKeeper.IsBootstrapped method
func (mmIsBootstrapped *mNodeKeeperMockIsBootstrapped) Set(f func() (b1 bool)) *NodeKeeperMock {
	if mmIsBootstrapped.defaultExpectation != nil {
		mmIsBootstrapped.mock.t.Fatalf("Default expectation is already set for the NodeKeeper.IsBootstrapped method")
	}

	if len(mmIsBootstrapped.expectations) > 0 {
		mmIsBootstrapped.mock.t.Fatalf("Some expectations are already set for the NodeKeeper.IsBootstrapped method")
	}

	mmIsBootstrapped.mock.funcIsBootstrapped = f
	return mmIsBootstrapped.mock
}

// IsBootstrapped implements network.NodeKeeper
func (mmIsBootstrapped *NodeKeeperMock) IsBootstrapped() (b1 bool) {
	mm_atomic.AddUint64(&mmIsBootstrapped.beforeIsBootstrappedCounter, 1)
	defer mm_atomic.AddUint64(&mmIsBootstrapped.afterIsBootstrappedCounter, 1)

	if mmIsBootstrapped.inspectFuncIsBootstrapped != nil {
		mmIsBootstrapped.inspectFuncIsBootstrapped()
	}

	if mmIsBootstrapped.IsBootstrappedMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&mmIsBootstrapped.IsBootstrappedMock.defaultExpectation.Counter, 1)

		results := mmIsBootstrapped.IsBootstrappedMock.defaultExpectation.results
		if results == nil {
			mmIsBootstrapped.t.Fatal("No results are set for the NodeKeeperMock.IsBootstrapped")
		}
		return (*results).b1
	}
	if mmIsBootstrapped.funcIsBootstrapped != nil {
		return mmIsBootstrapped.funcIsBootstrapped()
	}
	mmIsBootstrapped.t.Fatalf("Unexpected call to NodeKeeperMock.IsBootstrapped.")
	return
}

// IsBootstrappedAfterCounter returns a count of finished NodeKeeperMock.IsBootstrapped invocations
func (mmIsBootstrapped *NodeKeeperMock) IsBootstrappedAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&mmIsBootstrapped.afterIsBootstrappedCounter)
}

// IsBootstrappedBeforeCounter returns a count of NodeKeeperMock.IsBootstrapped invocations
func (mmIsBootstrapped *NodeKeeperMock) IsBootstrappedBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&mmIsBootstrapped.beforeIsBootstrappedCounter)
}

// MinimockIsBootstrappedDone returns true if the count of the IsBootstrapped invocations corresponds
// the number of defined expectations
func (m *NodeKeeperMock) MinimockIsBootstrappedDone() bool {
	for _, e := range m.IsBootstrappedMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.IsBootstrappedMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterIsBootstrappedCounter) < 1 {
		return false
	}
	// if func was set then invocations count should be greater than zero
	if m.funcIsBootstrapped != nil && mm_atomic.LoadUint64(&m.afterIsBootstrappedCounter) < 1 {
		return false
	}
	return true
}

// MinimockIsBootstrappedInspect logs each unmet expectation
func (m *NodeKeeperMock) MinimockIsBootstrappedInspect() {
	for _, e := range m.IsBootstrappedMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Error("Expected call to NodeKeeperMock.IsBootstrapped")
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.IsBootstrappedMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterIsBootstrappedCounter) < 1 {
		m.t.Error("Expected call to NodeKeeperMock.IsBootstrapped")
	}
	// if func was set then invocations count should be greater than zero
	if m.funcIsBootstrapped != nil && mm_atomic.LoadUint64(&m.afterIsBootstrappedCounter) < 1 {
		m.t.Error("Expected call to NodeKeeperMock.IsBootstrapped")
	}
}

type mNodeKeeperMockMoveSyncToActive struct {
	mock               *NodeKeeperMock
	defaultExpectation *NodeKeeperMockMoveSyncToActiveExpectation
	expectations       []*NodeKeeperMockMoveSyncToActiveExpectation

	callArgs []*NodeKeeperMockMoveSyncToActiveParams
	mutex    sync.RWMutex
}

// NodeKeeperMockMoveSyncToActiveExpectation specifies expectation struct of the NodeKeeper.MoveSyncToActive
type NodeKeeperMockMoveSyncToActiveExpectation struct {
	mock    *NodeKeeperMock
	params  *NodeKeeperMockMoveSyncToActiveParams
	results *NodeKeeperMockMoveSyncToActiveResults
	Counter uint64
}

// NodeKeeperMockMoveSyncToActiveParams contains parameters of the NodeKeeper.MoveSyncToActive
type NodeKeeperMockMoveSyncToActiveParams struct {
	ctx    context.Context
	number insolar.PulseNumber
}

// NodeKeeperMockMoveSyncToActiveResults contains results of the NodeKeeper.MoveSyncToActive
type NodeKeeperMockMoveSyncToActiveResults struct {
	err error
}

// Expect sets up expected params for NodeKeeper.MoveSyncToActive
func (mmMoveSyncToActive *mNodeKeeperMockMoveSyncToActive) Expect(ctx context.Context, number insolar.PulseNumber) *mNodeKeeperMockMoveSyncToActive {
	if mmMoveSyncToActive.mock.funcMoveSyncToActive != nil {
		mmMoveSyncToActive.mock.t.Fatalf("NodeKeeperMock.MoveSyncToActive mock is already set by Set")
	}

	if mmMoveSyncToActive.defaultExpectation == nil {
		mmMoveSyncToActive.defaultExpectation = &NodeKeeperMockMoveSyncToActiveExpectation{}
	}

	mmMoveSyncToActive.defaultExpectation.params = &NodeKeeperMockMoveSyncToActiveParams{ctx, number}
	for _, e := range mmMoveSyncToActive.expectations {
		if minimock.Equal(e.params, mmMoveSyncToActive.defaultExpectation.params) {
			mmMoveSyncToActive.mock.t.Fatalf("Expectation set by When has same params: %#v", *mmMoveSyncToActive.defaultExpectation.params)
		}
	}

	return mmMoveSyncToActive
}

// Inspect accepts an inspector function that has same arguments as the NodeKeeper.MoveSyncToActive
func (mmMoveSyncToActive *mNodeKeeperMockMoveSyncToActive) Inspect(f func(ctx context.Context, number insolar.PulseNumber)) *mNodeKeeperMockMoveSyncToActive {
	if mmMoveSyncToActive.mock.inspectFuncMoveSyncToActive != nil {
		mmMoveSyncToActive.mock.t.Fatalf("Inspect function is already set for NodeKeeperMock.MoveSyncToActive")
	}

	mmMoveSyncToActive.mock.inspectFuncMoveSyncToActive = f

	return mmMoveSyncToActive
}

// Return sets up results that will be returned by NodeKeeper.MoveSyncToActive
func (mmMoveSyncToActive *mNodeKeeperMockMoveSyncToActive) Return(err error) *NodeKeeperMock {
	if mmMoveSyncToActive.mock.funcMoveSyncToActive != nil {
		mmMoveSyncToActive.mock.t.Fatalf("NodeKeeperMock.MoveSyncToActive mock is already set by Set")
	}

	if mmMoveSyncToActive.defaultExpectation == nil {
		mmMoveSyncToActive.defaultExpectation = &NodeKeeperMockMoveSyncToActiveExpectation{mock: mmMoveSyncToActive.mock}
	}
	mmMoveSyncToActive.defaultExpectation.results = &NodeKeeperMockMoveSyncToActiveResults{err}
	return mmMoveSyncToActive.mock
}

//Set uses given function f to mock the NodeKeeper.MoveSyncToActive method
func (mmMoveSyncToActive *mNodeKeeperMockMoveSyncToActive) Set(f func(ctx context.Context, number insolar.PulseNumber) (err error)) *NodeKeeperMock {
	if mmMoveSyncToActive.defaultExpectation != nil {
		mmMoveSyncToActive.mock.t.Fatalf("Default expectation is already set for the NodeKeeper.MoveSyncToActive method")
	}

	if len(mmMoveSyncToActive.expectations) > 0 {
		mmMoveSyncToActive.mock.t.Fatalf("Some expectations are already set for the NodeKeeper.MoveSyncToActive method")
	}

	mmMoveSyncToActive.mock.funcMoveSyncToActive = f
	return mmMoveSyncToActive.mock
}

// When sets expectation for the NodeKeeper.MoveSyncToActive which will trigger the result defined by the following
// Then helper
func (mmMoveSyncToActive *mNodeKeeperMockMoveSyncToActive) When(ctx context.Context, number insolar.PulseNumber) *NodeKeeperMockMoveSyncToActiveExpectation {
	if mmMoveSyncToActive.mock.funcMoveSyncToActive != nil {
		mmMoveSyncToActive.mock.t.Fatalf("NodeKeeperMock.MoveSyncToActive mock is already set by Set")
	}

	expectation := &NodeKeeperMockMoveSyncToActiveExpectation{
		mock:   mmMoveSyncToActive.mock,
		params: &NodeKeeperMockMoveSyncToActiveParams{ctx, number},
	}
	mmMoveSyncToActive.expectations = append(mmMoveSyncToActive.expectations, expectation)
	return expectation
}

// Then sets up NodeKeeper.MoveSyncToActive return parameters for the expectation previously defined by the When method
func (e *NodeKeeperMockMoveSyncToActiveExpectation) Then(err error) *NodeKeeperMock {
	e.results = &NodeKeeperMockMoveSyncToActiveResults{err}
	return e.mock
}

// MoveSyncToActive implements network.NodeKeeper
func (mmMoveSyncToActive *NodeKeeperMock) MoveSyncToActive(ctx context.Context, number insolar.PulseNumber) (err error) {
	mm_atomic.AddUint64(&mmMoveSyncToActive.beforeMoveSyncToActiveCounter, 1)
	defer mm_atomic.AddUint64(&mmMoveSyncToActive.afterMoveSyncToActiveCounter, 1)

	if mmMoveSyncToActive.inspectFuncMoveSyncToActive != nil {
		mmMoveSyncToActive.inspectFuncMoveSyncToActive(ctx, number)
	}

	params := &NodeKeeperMockMoveSyncToActiveParams{ctx, number}

	// Record call args
	mmMoveSyncToActive.MoveSyncToActiveMock.mutex.Lock()
	mmMoveSyncToActive.MoveSyncToActiveMock.callArgs = append(mmMoveSyncToActive.MoveSyncToActiveMock.callArgs, params)
	mmMoveSyncToActive.MoveSyncToActiveMock.mutex.Unlock()

	for _, e := range mmMoveSyncToActive.MoveSyncToActiveMock.expectations {
		if minimock.Equal(e.params, params) {
			mm_atomic.AddUint64(&e.Counter, 1)
			return e.results.err
		}
	}

	if mmMoveSyncToActive.MoveSyncToActiveMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&mmMoveSyncToActive.MoveSyncToActiveMock.defaultExpectation.Counter, 1)
		want := mmMoveSyncToActive.MoveSyncToActiveMock.defaultExpectation.params
		got := NodeKeeperMockMoveSyncToActiveParams{ctx, number}
		if want != nil && !minimock.Equal(*want, got) {
			mmMoveSyncToActive.t.Errorf("NodeKeeperMock.MoveSyncToActive got unexpected parameters, want: %#v, got: %#v%s\n", *want, got, minimock.Diff(*want, got))
		}

		results := mmMoveSyncToActive.MoveSyncToActiveMock.defaultExpectation.results
		if results == nil {
			mmMoveSyncToActive.t.Fatal("No results are set for the NodeKeeperMock.MoveSyncToActive")
		}
		return (*results).err
	}
	if mmMoveSyncToActive.funcMoveSyncToActive != nil {
		return mmMoveSyncToActive.funcMoveSyncToActive(ctx, number)
	}
	mmMoveSyncToActive.t.Fatalf("Unexpected call to NodeKeeperMock.MoveSyncToActive. %v %v", ctx, number)
	return
}

// MoveSyncToActiveAfterCounter returns a count of finished NodeKeeperMock.MoveSyncToActive invocations
func (mmMoveSyncToActive *NodeKeeperMock) MoveSyncToActiveAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&mmMoveSyncToActive.afterMoveSyncToActiveCounter)
}

// MoveSyncToActiveBeforeCounter returns a count of NodeKeeperMock.MoveSyncToActive invocations
func (mmMoveSyncToActive *NodeKeeperMock) MoveSyncToActiveBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&mmMoveSyncToActive.beforeMoveSyncToActiveCounter)
}

// Calls returns a list of arguments used in each call to NodeKeeperMock.MoveSyncToActive.
// The list is in the same order as the calls were made (i.e. recent calls have a higher index)
func (mmMoveSyncToActive *mNodeKeeperMockMoveSyncToActive) Calls() []*NodeKeeperMockMoveSyncToActiveParams {
	mmMoveSyncToActive.mutex.RLock()

	argCopy := make([]*NodeKeeperMockMoveSyncToActiveParams, len(mmMoveSyncToActive.callArgs))
	copy(argCopy, mmMoveSyncToActive.callArgs)

	mmMoveSyncToActive.mutex.RUnlock()

	return argCopy
}

// MinimockMoveSyncToActiveDone returns true if the count of the MoveSyncToActive invocations corresponds
// the number of defined expectations
func (m *NodeKeeperMock) MinimockMoveSyncToActiveDone() bool {
	for _, e := range m.MoveSyncToActiveMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.MoveSyncToActiveMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterMoveSyncToActiveCounter) < 1 {
		return false
	}
	// if func was set then invocations count should be greater than zero
	if m.funcMoveSyncToActive != nil && mm_atomic.LoadUint64(&m.afterMoveSyncToActiveCounter) < 1 {
		return false
	}
	return true
}

// MinimockMoveSyncToActiveInspect logs each unmet expectation
func (m *NodeKeeperMock) MinimockMoveSyncToActiveInspect() {
	for _, e := range m.MoveSyncToActiveMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Errorf("Expected call to NodeKeeperMock.MoveSyncToActive with params: %#v", *e.params)
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.MoveSyncToActiveMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterMoveSyncToActiveCounter) < 1 {
		if m.MoveSyncToActiveMock.defaultExpectation.params == nil {
			m.t.Error("Expected call to NodeKeeperMock.MoveSyncToActive")
		} else {
			m.t.Errorf("Expected call to NodeKeeperMock.MoveSyncToActive with params: %#v", *m.MoveSyncToActiveMock.defaultExpectation.params)
		}
	}
	// if func was set then invocations count should be greater than zero
	if m.funcMoveSyncToActive != nil && mm_atomic.LoadUint64(&m.afterMoveSyncToActiveCounter) < 1 {
		m.t.Error("Expected call to NodeKeeperMock.MoveSyncToActive")
	}
}

type mNodeKeeperMockSetCloudHash struct {
	mock               *NodeKeeperMock
	defaultExpectation *NodeKeeperMockSetCloudHashExpectation
	expectations       []*NodeKeeperMockSetCloudHashExpectation

	callArgs []*NodeKeeperMockSetCloudHashParams
	mutex    sync.RWMutex
}

// NodeKeeperMockSetCloudHashExpectation specifies expectation struct of the NodeKeeper.SetCloudHash
type NodeKeeperMockSetCloudHashExpectation struct {
	mock   *NodeKeeperMock
	params *NodeKeeperMockSetCloudHashParams

	Counter uint64
}

// NodeKeeperMockSetCloudHashParams contains parameters of the NodeKeeper.SetCloudHash
type NodeKeeperMockSetCloudHashParams struct {
	ba1 []byte
}

// Expect sets up expected params for NodeKeeper.SetCloudHash
func (mmSetCloudHash *mNodeKeeperMockSetCloudHash) Expect(ba1 []byte) *mNodeKeeperMockSetCloudHash {
	if mmSetCloudHash.mock.funcSetCloudHash != nil {
		mmSetCloudHash.mock.t.Fatalf("NodeKeeperMock.SetCloudHash mock is already set by Set")
	}

	if mmSetCloudHash.defaultExpectation == nil {
		mmSetCloudHash.defaultExpectation = &NodeKeeperMockSetCloudHashExpectation{}
	}

	mmSetCloudHash.defaultExpectation.params = &NodeKeeperMockSetCloudHashParams{ba1}
	for _, e := range mmSetCloudHash.expectations {
		if minimock.Equal(e.params, mmSetCloudHash.defaultExpectation.params) {
			mmSetCloudHash.mock.t.Fatalf("Expectation set by When has same params: %#v", *mmSetCloudHash.defaultExpectation.params)
		}
	}

	return mmSetCloudHash
}

// Inspect accepts an inspector function that has same arguments as the NodeKeeper.SetCloudHash
func (mmSetCloudHash *mNodeKeeperMockSetCloudHash) Inspect(f func(ba1 []byte)) *mNodeKeeperMockSetCloudHash {
	if mmSetCloudHash.mock.inspectFuncSetCloudHash != nil {
		mmSetCloudHash.mock.t.Fatalf("Inspect function is already set for NodeKeeperMock.SetCloudHash")
	}

	mmSetCloudHash.mock.inspectFuncSetCloudHash = f

	return mmSetCloudHash
}

// Return sets up results that will be returned by NodeKeeper.SetCloudHash
func (mmSetCloudHash *mNodeKeeperMockSetCloudHash) Return() *NodeKeeperMock {
	if mmSetCloudHash.mock.funcSetCloudHash != nil {
		mmSetCloudHash.mock.t.Fatalf("NodeKeeperMock.SetCloudHash mock is already set by Set")
	}

	if mmSetCloudHash.defaultExpectation == nil {
		mmSetCloudHash.defaultExpectation = &NodeKeeperMockSetCloudHashExpectation{mock: mmSetCloudHash.mock}
	}

	return mmSetCloudHash.mock
}

//Set uses given function f to mock the NodeKeeper.SetCloudHash method
func (mmSetCloudHash *mNodeKeeperMockSetCloudHash) Set(f func(ba1 []byte)) *NodeKeeperMock {
	if mmSetCloudHash.defaultExpectation != nil {
		mmSetCloudHash.mock.t.Fatalf("Default expectation is already set for the NodeKeeper.SetCloudHash method")
	}

	if len(mmSetCloudHash.expectations) > 0 {
		mmSetCloudHash.mock.t.Fatalf("Some expectations are already set for the NodeKeeper.SetCloudHash method")
	}

	mmSetCloudHash.mock.funcSetCloudHash = f
	return mmSetCloudHash.mock
}

// SetCloudHash implements network.NodeKeeper
func (mmSetCloudHash *NodeKeeperMock) SetCloudHash(ba1 []byte) {
	mm_atomic.AddUint64(&mmSetCloudHash.beforeSetCloudHashCounter, 1)
	defer mm_atomic.AddUint64(&mmSetCloudHash.afterSetCloudHashCounter, 1)

	if mmSetCloudHash.inspectFuncSetCloudHash != nil {
		mmSetCloudHash.inspectFuncSetCloudHash(ba1)
	}

	params := &NodeKeeperMockSetCloudHashParams{ba1}

	// Record call args
	mmSetCloudHash.SetCloudHashMock.mutex.Lock()
	mmSetCloudHash.SetCloudHashMock.callArgs = append(mmSetCloudHash.SetCloudHashMock.callArgs, params)
	mmSetCloudHash.SetCloudHashMock.mutex.Unlock()

	for _, e := range mmSetCloudHash.SetCloudHashMock.expectations {
		if minimock.Equal(e.params, params) {
			mm_atomic.AddUint64(&e.Counter, 1)
			return
		}
	}

	if mmSetCloudHash.SetCloudHashMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&mmSetCloudHash.SetCloudHashMock.defaultExpectation.Counter, 1)
		want := mmSetCloudHash.SetCloudHashMock.defaultExpectation.params
		got := NodeKeeperMockSetCloudHashParams{ba1}
		if want != nil && !minimock.Equal(*want, got) {
			mmSetCloudHash.t.Errorf("NodeKeeperMock.SetCloudHash got unexpected parameters, want: %#v, got: %#v%s\n", *want, got, minimock.Diff(*want, got))
		}

		return

	}
	if mmSetCloudHash.funcSetCloudHash != nil {
		mmSetCloudHash.funcSetCloudHash(ba1)
		return
	}
	mmSetCloudHash.t.Fatalf("Unexpected call to NodeKeeperMock.SetCloudHash. %v", ba1)

}

// SetCloudHashAfterCounter returns a count of finished NodeKeeperMock.SetCloudHash invocations
func (mmSetCloudHash *NodeKeeperMock) SetCloudHashAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&mmSetCloudHash.afterSetCloudHashCounter)
}

// SetCloudHashBeforeCounter returns a count of NodeKeeperMock.SetCloudHash invocations
func (mmSetCloudHash *NodeKeeperMock) SetCloudHashBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&mmSetCloudHash.beforeSetCloudHashCounter)
}

// Calls returns a list of arguments used in each call to NodeKeeperMock.SetCloudHash.
// The list is in the same order as the calls were made (i.e. recent calls have a higher index)
func (mmSetCloudHash *mNodeKeeperMockSetCloudHash) Calls() []*NodeKeeperMockSetCloudHashParams {
	mmSetCloudHash.mutex.RLock()

	argCopy := make([]*NodeKeeperMockSetCloudHashParams, len(mmSetCloudHash.callArgs))
	copy(argCopy, mmSetCloudHash.callArgs)

	mmSetCloudHash.mutex.RUnlock()

	return argCopy
}

// MinimockSetCloudHashDone returns true if the count of the SetCloudHash invocations corresponds
// the number of defined expectations
func (m *NodeKeeperMock) MinimockSetCloudHashDone() bool {
	for _, e := range m.SetCloudHashMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.SetCloudHashMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterSetCloudHashCounter) < 1 {
		return false
	}
	// if func was set then invocations count should be greater than zero
	if m.funcSetCloudHash != nil && mm_atomic.LoadUint64(&m.afterSetCloudHashCounter) < 1 {
		return false
	}
	return true
}

// MinimockSetCloudHashInspect logs each unmet expectation
func (m *NodeKeeperMock) MinimockSetCloudHashInspect() {
	for _, e := range m.SetCloudHashMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Errorf("Expected call to NodeKeeperMock.SetCloudHash with params: %#v", *e.params)
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.SetCloudHashMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterSetCloudHashCounter) < 1 {
		if m.SetCloudHashMock.defaultExpectation.params == nil {
			m.t.Error("Expected call to NodeKeeperMock.SetCloudHash")
		} else {
			m.t.Errorf("Expected call to NodeKeeperMock.SetCloudHash with params: %#v", *m.SetCloudHashMock.defaultExpectation.params)
		}
	}
	// if func was set then invocations count should be greater than zero
	if m.funcSetCloudHash != nil && mm_atomic.LoadUint64(&m.afterSetCloudHashCounter) < 1 {
		m.t.Error("Expected call to NodeKeeperMock.SetCloudHash")
	}
}

type mNodeKeeperMockSetInitialSnapshot struct {
	mock               *NodeKeeperMock
	defaultExpectation *NodeKeeperMockSetInitialSnapshotExpectation
	expectations       []*NodeKeeperMockSetInitialSnapshotExpectation

	callArgs []*NodeKeeperMockSetInitialSnapshotParams
	mutex    sync.RWMutex
}

// NodeKeeperMockSetInitialSnapshotExpectation specifies expectation struct of the NodeKeeper.SetInitialSnapshot
type NodeKeeperMockSetInitialSnapshotExpectation struct {
	mock   *NodeKeeperMock
	params *NodeKeeperMockSetInitialSnapshotParams

	Counter uint64
}

// NodeKeeperMockSetInitialSnapshotParams contains parameters of the NodeKeeper.SetInitialSnapshot
type NodeKeeperMockSetInitialSnapshotParams struct {
	nodes []insolar.NetworkNode
}

// Expect sets up expected params for NodeKeeper.SetInitialSnapshot
func (mmSetInitialSnapshot *mNodeKeeperMockSetInitialSnapshot) Expect(nodes []insolar.NetworkNode) *mNodeKeeperMockSetInitialSnapshot {
	if mmSetInitialSnapshot.mock.funcSetInitialSnapshot != nil {
		mmSetInitialSnapshot.mock.t.Fatalf("NodeKeeperMock.SetInitialSnapshot mock is already set by Set")
	}

	if mmSetInitialSnapshot.defaultExpectation == nil {
		mmSetInitialSnapshot.defaultExpectation = &NodeKeeperMockSetInitialSnapshotExpectation{}
	}

	mmSetInitialSnapshot.defaultExpectation.params = &NodeKeeperMockSetInitialSnapshotParams{nodes}
	for _, e := range mmSetInitialSnapshot.expectations {
		if minimock.Equal(e.params, mmSetInitialSnapshot.defaultExpectation.params) {
			mmSetInitialSnapshot.mock.t.Fatalf("Expectation set by When has same params: %#v", *mmSetInitialSnapshot.defaultExpectation.params)
		}
	}

	return mmSetInitialSnapshot
}

// Inspect accepts an inspector function that has same arguments as the NodeKeeper.SetInitialSnapshot
func (mmSetInitialSnapshot *mNodeKeeperMockSetInitialSnapshot) Inspect(f func(nodes []insolar.NetworkNode)) *mNodeKeeperMockSetInitialSnapshot {
	if mmSetInitialSnapshot.mock.inspectFuncSetInitialSnapshot != nil {
		mmSetInitialSnapshot.mock.t.Fatalf("Inspect function is already set for NodeKeeperMock.SetInitialSnapshot")
	}

	mmSetInitialSnapshot.mock.inspectFuncSetInitialSnapshot = f

	return mmSetInitialSnapshot
}

// Return sets up results that will be returned by NodeKeeper.SetInitialSnapshot
func (mmSetInitialSnapshot *mNodeKeeperMockSetInitialSnapshot) Return() *NodeKeeperMock {
	if mmSetInitialSnapshot.mock.funcSetInitialSnapshot != nil {
		mmSetInitialSnapshot.mock.t.Fatalf("NodeKeeperMock.SetInitialSnapshot mock is already set by Set")
	}

	if mmSetInitialSnapshot.defaultExpectation == nil {
		mmSetInitialSnapshot.defaultExpectation = &NodeKeeperMockSetInitialSnapshotExpectation{mock: mmSetInitialSnapshot.mock}
	}

	return mmSetInitialSnapshot.mock
}

//Set uses given function f to mock the NodeKeeper.SetInitialSnapshot method
func (mmSetInitialSnapshot *mNodeKeeperMockSetInitialSnapshot) Set(f func(nodes []insolar.NetworkNode)) *NodeKeeperMock {
	if mmSetInitialSnapshot.defaultExpectation != nil {
		mmSetInitialSnapshot.mock.t.Fatalf("Default expectation is already set for the NodeKeeper.SetInitialSnapshot method")
	}

	if len(mmSetInitialSnapshot.expectations) > 0 {
		mmSetInitialSnapshot.mock.t.Fatalf("Some expectations are already set for the NodeKeeper.SetInitialSnapshot method")
	}

	mmSetInitialSnapshot.mock.funcSetInitialSnapshot = f
	return mmSetInitialSnapshot.mock
}

// SetInitialSnapshot implements network.NodeKeeper
func (mmSetInitialSnapshot *NodeKeeperMock) SetInitialSnapshot(nodes []insolar.NetworkNode) {
	mm_atomic.AddUint64(&mmSetInitialSnapshot.beforeSetInitialSnapshotCounter, 1)
	defer mm_atomic.AddUint64(&mmSetInitialSnapshot.afterSetInitialSnapshotCounter, 1)

	if mmSetInitialSnapshot.inspectFuncSetInitialSnapshot != nil {
		mmSetInitialSnapshot.inspectFuncSetInitialSnapshot(nodes)
	}

	params := &NodeKeeperMockSetInitialSnapshotParams{nodes}

	// Record call args
	mmSetInitialSnapshot.SetInitialSnapshotMock.mutex.Lock()
	mmSetInitialSnapshot.SetInitialSnapshotMock.callArgs = append(mmSetInitialSnapshot.SetInitialSnapshotMock.callArgs, params)
	mmSetInitialSnapshot.SetInitialSnapshotMock.mutex.Unlock()

	for _, e := range mmSetInitialSnapshot.SetInitialSnapshotMock.expectations {
		if minimock.Equal(e.params, params) {
			mm_atomic.AddUint64(&e.Counter, 1)
			return
		}
	}

	if mmSetInitialSnapshot.SetInitialSnapshotMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&mmSetInitialSnapshot.SetInitialSnapshotMock.defaultExpectation.Counter, 1)
		want := mmSetInitialSnapshot.SetInitialSnapshotMock.defaultExpectation.params
		got := NodeKeeperMockSetInitialSnapshotParams{nodes}
		if want != nil && !minimock.Equal(*want, got) {
			mmSetInitialSnapshot.t.Errorf("NodeKeeperMock.SetInitialSnapshot got unexpected parameters, want: %#v, got: %#v%s\n", *want, got, minimock.Diff(*want, got))
		}

		return

	}
	if mmSetInitialSnapshot.funcSetInitialSnapshot != nil {
		mmSetInitialSnapshot.funcSetInitialSnapshot(nodes)
		return
	}
	mmSetInitialSnapshot.t.Fatalf("Unexpected call to NodeKeeperMock.SetInitialSnapshot. %v", nodes)

}

// SetInitialSnapshotAfterCounter returns a count of finished NodeKeeperMock.SetInitialSnapshot invocations
func (mmSetInitialSnapshot *NodeKeeperMock) SetInitialSnapshotAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&mmSetInitialSnapshot.afterSetInitialSnapshotCounter)
}

// SetInitialSnapshotBeforeCounter returns a count of NodeKeeperMock.SetInitialSnapshot invocations
func (mmSetInitialSnapshot *NodeKeeperMock) SetInitialSnapshotBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&mmSetInitialSnapshot.beforeSetInitialSnapshotCounter)
}

// Calls returns a list of arguments used in each call to NodeKeeperMock.SetInitialSnapshot.
// The list is in the same order as the calls were made (i.e. recent calls have a higher index)
func (mmSetInitialSnapshot *mNodeKeeperMockSetInitialSnapshot) Calls() []*NodeKeeperMockSetInitialSnapshotParams {
	mmSetInitialSnapshot.mutex.RLock()

	argCopy := make([]*NodeKeeperMockSetInitialSnapshotParams, len(mmSetInitialSnapshot.callArgs))
	copy(argCopy, mmSetInitialSnapshot.callArgs)

	mmSetInitialSnapshot.mutex.RUnlock()

	return argCopy
}

// MinimockSetInitialSnapshotDone returns true if the count of the SetInitialSnapshot invocations corresponds
// the number of defined expectations
func (m *NodeKeeperMock) MinimockSetInitialSnapshotDone() bool {
	for _, e := range m.SetInitialSnapshotMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.SetInitialSnapshotMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterSetInitialSnapshotCounter) < 1 {
		return false
	}
	// if func was set then invocations count should be greater than zero
	if m.funcSetInitialSnapshot != nil && mm_atomic.LoadUint64(&m.afterSetInitialSnapshotCounter) < 1 {
		return false
	}
	return true
}

// MinimockSetInitialSnapshotInspect logs each unmet expectation
func (m *NodeKeeperMock) MinimockSetInitialSnapshotInspect() {
	for _, e := range m.SetInitialSnapshotMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Errorf("Expected call to NodeKeeperMock.SetInitialSnapshot with params: %#v", *e.params)
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.SetInitialSnapshotMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterSetInitialSnapshotCounter) < 1 {
		if m.SetInitialSnapshotMock.defaultExpectation.params == nil {
			m.t.Error("Expected call to NodeKeeperMock.SetInitialSnapshot")
		} else {
			m.t.Errorf("Expected call to NodeKeeperMock.SetInitialSnapshot with params: %#v", *m.SetInitialSnapshotMock.defaultExpectation.params)
		}
	}
	// if func was set then invocations count should be greater than zero
	if m.funcSetInitialSnapshot != nil && mm_atomic.LoadUint64(&m.afterSetInitialSnapshotCounter) < 1 {
		m.t.Error("Expected call to NodeKeeperMock.SetInitialSnapshot")
	}
}

type mNodeKeeperMockSetIsBootstrapped struct {
	mock               *NodeKeeperMock
	defaultExpectation *NodeKeeperMockSetIsBootstrappedExpectation
	expectations       []*NodeKeeperMockSetIsBootstrappedExpectation

	callArgs []*NodeKeeperMockSetIsBootstrappedParams
	mutex    sync.RWMutex
}

// NodeKeeperMockSetIsBootstrappedExpectation specifies expectation struct of the NodeKeeper.SetIsBootstrapped
type NodeKeeperMockSetIsBootstrappedExpectation struct {
	mock   *NodeKeeperMock
	params *NodeKeeperMockSetIsBootstrappedParams

	Counter uint64
}

// NodeKeeperMockSetIsBootstrappedParams contains parameters of the NodeKeeper.SetIsBootstrapped
type NodeKeeperMockSetIsBootstrappedParams struct {
	isBootstrap bool
}

// Expect sets up expected params for NodeKeeper.SetIsBootstrapped
func (mmSetIsBootstrapped *mNodeKeeperMockSetIsBootstrapped) Expect(isBootstrap bool) *mNodeKeeperMockSetIsBootstrapped {
	if mmSetIsBootstrapped.mock.funcSetIsBootstrapped != nil {
		mmSetIsBootstrapped.mock.t.Fatalf("NodeKeeperMock.SetIsBootstrapped mock is already set by Set")
	}

	if mmSetIsBootstrapped.defaultExpectation == nil {
		mmSetIsBootstrapped.defaultExpectation = &NodeKeeperMockSetIsBootstrappedExpectation{}
	}

	mmSetIsBootstrapped.defaultExpectation.params = &NodeKeeperMockSetIsBootstrappedParams{isBootstrap}
	for _, e := range mmSetIsBootstrapped.expectations {
		if minimock.Equal(e.params, mmSetIsBootstrapped.defaultExpectation.params) {
			mmSetIsBootstrapped.mock.t.Fatalf("Expectation set by When has same params: %#v", *mmSetIsBootstrapped.defaultExpectation.params)
		}
	}

	return mmSetIsBootstrapped
}

// Inspect accepts an inspector function that has same arguments as the NodeKeeper.SetIsBootstrapped
func (mmSetIsBootstrapped *mNodeKeeperMockSetIsBootstrapped) Inspect(f func(isBootstrap bool)) *mNodeKeeperMockSetIsBootstrapped {
	if mmSetIsBootstrapped.mock.inspectFuncSetIsBootstrapped != nil {
		mmSetIsBootstrapped.mock.t.Fatalf("Inspect function is already set for NodeKeeperMock.SetIsBootstrapped")
	}

	mmSetIsBootstrapped.mock.inspectFuncSetIsBootstrapped = f

	return mmSetIsBootstrapped
}

// Return sets up results that will be returned by NodeKeeper.SetIsBootstrapped
func (mmSetIsBootstrapped *mNodeKeeperMockSetIsBootstrapped) Return() *NodeKeeperMock {
	if mmSetIsBootstrapped.mock.funcSetIsBootstrapped != nil {
		mmSetIsBootstrapped.mock.t.Fatalf("NodeKeeperMock.SetIsBootstrapped mock is already set by Set")
	}

	if mmSetIsBootstrapped.defaultExpectation == nil {
		mmSetIsBootstrapped.defaultExpectation = &NodeKeeperMockSetIsBootstrappedExpectation{mock: mmSetIsBootstrapped.mock}
	}

	return mmSetIsBootstrapped.mock
}

//Set uses given function f to mock the NodeKeeper.SetIsBootstrapped method
func (mmSetIsBootstrapped *mNodeKeeperMockSetIsBootstrapped) Set(f func(isBootstrap bool)) *NodeKeeperMock {
	if mmSetIsBootstrapped.defaultExpectation != nil {
		mmSetIsBootstrapped.mock.t.Fatalf("Default expectation is already set for the NodeKeeper.SetIsBootstrapped method")
	}

	if len(mmSetIsBootstrapped.expectations) > 0 {
		mmSetIsBootstrapped.mock.t.Fatalf("Some expectations are already set for the NodeKeeper.SetIsBootstrapped method")
	}

	mmSetIsBootstrapped.mock.funcSetIsBootstrapped = f
	return mmSetIsBootstrapped.mock
}

// SetIsBootstrapped implements network.NodeKeeper
func (mmSetIsBootstrapped *NodeKeeperMock) SetIsBootstrapped(isBootstrap bool) {
	mm_atomic.AddUint64(&mmSetIsBootstrapped.beforeSetIsBootstrappedCounter, 1)
	defer mm_atomic.AddUint64(&mmSetIsBootstrapped.afterSetIsBootstrappedCounter, 1)

	if mmSetIsBootstrapped.inspectFuncSetIsBootstrapped != nil {
		mmSetIsBootstrapped.inspectFuncSetIsBootstrapped(isBootstrap)
	}

	params := &NodeKeeperMockSetIsBootstrappedParams{isBootstrap}

	// Record call args
	mmSetIsBootstrapped.SetIsBootstrappedMock.mutex.Lock()
	mmSetIsBootstrapped.SetIsBootstrappedMock.callArgs = append(mmSetIsBootstrapped.SetIsBootstrappedMock.callArgs, params)
	mmSetIsBootstrapped.SetIsBootstrappedMock.mutex.Unlock()

	for _, e := range mmSetIsBootstrapped.SetIsBootstrappedMock.expectations {
		if minimock.Equal(e.params, params) {
			mm_atomic.AddUint64(&e.Counter, 1)
			return
		}
	}

	if mmSetIsBootstrapped.SetIsBootstrappedMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&mmSetIsBootstrapped.SetIsBootstrappedMock.defaultExpectation.Counter, 1)
		want := mmSetIsBootstrapped.SetIsBootstrappedMock.defaultExpectation.params
		got := NodeKeeperMockSetIsBootstrappedParams{isBootstrap}
		if want != nil && !minimock.Equal(*want, got) {
			mmSetIsBootstrapped.t.Errorf("NodeKeeperMock.SetIsBootstrapped got unexpected parameters, want: %#v, got: %#v%s\n", *want, got, minimock.Diff(*want, got))
		}

		return

	}
	if mmSetIsBootstrapped.funcSetIsBootstrapped != nil {
		mmSetIsBootstrapped.funcSetIsBootstrapped(isBootstrap)
		return
	}
	mmSetIsBootstrapped.t.Fatalf("Unexpected call to NodeKeeperMock.SetIsBootstrapped. %v", isBootstrap)

}

// SetIsBootstrappedAfterCounter returns a count of finished NodeKeeperMock.SetIsBootstrapped invocations
func (mmSetIsBootstrapped *NodeKeeperMock) SetIsBootstrappedAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&mmSetIsBootstrapped.afterSetIsBootstrappedCounter)
}

// SetIsBootstrappedBeforeCounter returns a count of NodeKeeperMock.SetIsBootstrapped invocations
func (mmSetIsBootstrapped *NodeKeeperMock) SetIsBootstrappedBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&mmSetIsBootstrapped.beforeSetIsBootstrappedCounter)
}

// Calls returns a list of arguments used in each call to NodeKeeperMock.SetIsBootstrapped.
// The list is in the same order as the calls were made (i.e. recent calls have a higher index)
func (mmSetIsBootstrapped *mNodeKeeperMockSetIsBootstrapped) Calls() []*NodeKeeperMockSetIsBootstrappedParams {
	mmSetIsBootstrapped.mutex.RLock()

	argCopy := make([]*NodeKeeperMockSetIsBootstrappedParams, len(mmSetIsBootstrapped.callArgs))
	copy(argCopy, mmSetIsBootstrapped.callArgs)

	mmSetIsBootstrapped.mutex.RUnlock()

	return argCopy
}

// MinimockSetIsBootstrappedDone returns true if the count of the SetIsBootstrapped invocations corresponds
// the number of defined expectations
func (m *NodeKeeperMock) MinimockSetIsBootstrappedDone() bool {
	for _, e := range m.SetIsBootstrappedMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.SetIsBootstrappedMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterSetIsBootstrappedCounter) < 1 {
		return false
	}
	// if func was set then invocations count should be greater than zero
	if m.funcSetIsBootstrapped != nil && mm_atomic.LoadUint64(&m.afterSetIsBootstrappedCounter) < 1 {
		return false
	}
	return true
}

// MinimockSetIsBootstrappedInspect logs each unmet expectation
func (m *NodeKeeperMock) MinimockSetIsBootstrappedInspect() {
	for _, e := range m.SetIsBootstrappedMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Errorf("Expected call to NodeKeeperMock.SetIsBootstrapped with params: %#v", *e.params)
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.SetIsBootstrappedMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterSetIsBootstrappedCounter) < 1 {
		if m.SetIsBootstrappedMock.defaultExpectation.params == nil {
			m.t.Error("Expected call to NodeKeeperMock.SetIsBootstrapped")
		} else {
			m.t.Errorf("Expected call to NodeKeeperMock.SetIsBootstrapped with params: %#v", *m.SetIsBootstrappedMock.defaultExpectation.params)
		}
	}
	// if func was set then invocations count should be greater than zero
	if m.funcSetIsBootstrapped != nil && mm_atomic.LoadUint64(&m.afterSetIsBootstrappedCounter) < 1 {
		m.t.Error("Expected call to NodeKeeperMock.SetIsBootstrapped")
	}
}

type mNodeKeeperMockSync struct {
	mock               *NodeKeeperMock
	defaultExpectation *NodeKeeperMockSyncExpectation
	expectations       []*NodeKeeperMockSyncExpectation

	callArgs []*NodeKeeperMockSyncParams
	mutex    sync.RWMutex
}

// NodeKeeperMockSyncExpectation specifies expectation struct of the NodeKeeper.Sync
type NodeKeeperMockSyncExpectation struct {
	mock    *NodeKeeperMock
	params  *NodeKeeperMockSyncParams
	results *NodeKeeperMockSyncResults
	Counter uint64
}

// NodeKeeperMockSyncParams contains parameters of the NodeKeeper.Sync
type NodeKeeperMockSyncParams struct {
	ctx context.Context
	na1 []insolar.NetworkNode
	ra1 []packets.ReferendumClaim
}

// NodeKeeperMockSyncResults contains results of the NodeKeeper.Sync
type NodeKeeperMockSyncResults struct {
	err error
}

// Expect sets up expected params for NodeKeeper.Sync
func (mmSync *mNodeKeeperMockSync) Expect(ctx context.Context, na1 []insolar.NetworkNode, ra1 []packets.ReferendumClaim) *mNodeKeeperMockSync {
	if mmSync.mock.funcSync != nil {
		mmSync.mock.t.Fatalf("NodeKeeperMock.Sync mock is already set by Set")
	}

	if mmSync.defaultExpectation == nil {
		mmSync.defaultExpectation = &NodeKeeperMockSyncExpectation{}
	}

	mmSync.defaultExpectation.params = &NodeKeeperMockSyncParams{ctx, na1, ra1}
	for _, e := range mmSync.expectations {
		if minimock.Equal(e.params, mmSync.defaultExpectation.params) {
			mmSync.mock.t.Fatalf("Expectation set by When has same params: %#v", *mmSync.defaultExpectation.params)
		}
	}

	return mmSync
}

// Inspect accepts an inspector function that has same arguments as the NodeKeeper.Sync
func (mmSync *mNodeKeeperMockSync) Inspect(f func(ctx context.Context, na1 []insolar.NetworkNode, ra1 []packets.ReferendumClaim)) *mNodeKeeperMockSync {
	if mmSync.mock.inspectFuncSync != nil {
		mmSync.mock.t.Fatalf("Inspect function is already set for NodeKeeperMock.Sync")
	}

	mmSync.mock.inspectFuncSync = f

	return mmSync
}

// Return sets up results that will be returned by NodeKeeper.Sync
func (mmSync *mNodeKeeperMockSync) Return(err error) *NodeKeeperMock {
	if mmSync.mock.funcSync != nil {
		mmSync.mock.t.Fatalf("NodeKeeperMock.Sync mock is already set by Set")
	}

	if mmSync.defaultExpectation == nil {
		mmSync.defaultExpectation = &NodeKeeperMockSyncExpectation{mock: mmSync.mock}
	}
	mmSync.defaultExpectation.results = &NodeKeeperMockSyncResults{err}
	return mmSync.mock
}

//Set uses given function f to mock the NodeKeeper.Sync method
func (mmSync *mNodeKeeperMockSync) Set(f func(ctx context.Context, na1 []insolar.NetworkNode, ra1 []packets.ReferendumClaim) (err error)) *NodeKeeperMock {
	if mmSync.defaultExpectation != nil {
		mmSync.mock.t.Fatalf("Default expectation is already set for the NodeKeeper.Sync method")
	}

	if len(mmSync.expectations) > 0 {
		mmSync.mock.t.Fatalf("Some expectations are already set for the NodeKeeper.Sync method")
	}

	mmSync.mock.funcSync = f
	return mmSync.mock
}

// When sets expectation for the NodeKeeper.Sync which will trigger the result defined by the following
// Then helper
func (mmSync *mNodeKeeperMockSync) When(ctx context.Context, na1 []insolar.NetworkNode, ra1 []packets.ReferendumClaim) *NodeKeeperMockSyncExpectation {
	if mmSync.mock.funcSync != nil {
		mmSync.mock.t.Fatalf("NodeKeeperMock.Sync mock is already set by Set")
	}

	expectation := &NodeKeeperMockSyncExpectation{
		mock:   mmSync.mock,
		params: &NodeKeeperMockSyncParams{ctx, na1, ra1},
	}
	mmSync.expectations = append(mmSync.expectations, expectation)
	return expectation
}

// Then sets up NodeKeeper.Sync return parameters for the expectation previously defined by the When method
func (e *NodeKeeperMockSyncExpectation) Then(err error) *NodeKeeperMock {
	e.results = &NodeKeeperMockSyncResults{err}
	return e.mock
}

// Sync implements network.NodeKeeper
func (mmSync *NodeKeeperMock) Sync(ctx context.Context, na1 []insolar.NetworkNode, ra1 []packets.ReferendumClaim) (err error) {
	mm_atomic.AddUint64(&mmSync.beforeSyncCounter, 1)
	defer mm_atomic.AddUint64(&mmSync.afterSyncCounter, 1)

	if mmSync.inspectFuncSync != nil {
		mmSync.inspectFuncSync(ctx, na1, ra1)
	}

	params := &NodeKeeperMockSyncParams{ctx, na1, ra1}

	// Record call args
	mmSync.SyncMock.mutex.Lock()
	mmSync.SyncMock.callArgs = append(mmSync.SyncMock.callArgs, params)
	mmSync.SyncMock.mutex.Unlock()

	for _, e := range mmSync.SyncMock.expectations {
		if minimock.Equal(e.params, params) {
			mm_atomic.AddUint64(&e.Counter, 1)
			return e.results.err
		}
	}

	if mmSync.SyncMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&mmSync.SyncMock.defaultExpectation.Counter, 1)
		want := mmSync.SyncMock.defaultExpectation.params
		got := NodeKeeperMockSyncParams{ctx, na1, ra1}
		if want != nil && !minimock.Equal(*want, got) {
			mmSync.t.Errorf("NodeKeeperMock.Sync got unexpected parameters, want: %#v, got: %#v%s\n", *want, got, minimock.Diff(*want, got))
		}

		results := mmSync.SyncMock.defaultExpectation.results
		if results == nil {
			mmSync.t.Fatal("No results are set for the NodeKeeperMock.Sync")
		}
		return (*results).err
	}
	if mmSync.funcSync != nil {
		return mmSync.funcSync(ctx, na1, ra1)
	}
	mmSync.t.Fatalf("Unexpected call to NodeKeeperMock.Sync. %v %v %v", ctx, na1, ra1)
	return
}

// SyncAfterCounter returns a count of finished NodeKeeperMock.Sync invocations
func (mmSync *NodeKeeperMock) SyncAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&mmSync.afterSyncCounter)
}

// SyncBeforeCounter returns a count of NodeKeeperMock.Sync invocations
func (mmSync *NodeKeeperMock) SyncBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&mmSync.beforeSyncCounter)
}

// Calls returns a list of arguments used in each call to NodeKeeperMock.Sync.
// The list is in the same order as the calls were made (i.e. recent calls have a higher index)
func (mmSync *mNodeKeeperMockSync) Calls() []*NodeKeeperMockSyncParams {
	mmSync.mutex.RLock()

	argCopy := make([]*NodeKeeperMockSyncParams, len(mmSync.callArgs))
	copy(argCopy, mmSync.callArgs)

	mmSync.mutex.RUnlock()

	return argCopy
}

// MinimockSyncDone returns true if the count of the Sync invocations corresponds
// the number of defined expectations
func (m *NodeKeeperMock) MinimockSyncDone() bool {
	for _, e := range m.SyncMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.SyncMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterSyncCounter) < 1 {
		return false
	}
	// if func was set then invocations count should be greater than zero
	if m.funcSync != nil && mm_atomic.LoadUint64(&m.afterSyncCounter) < 1 {
		return false
	}
	return true
}

// MinimockSyncInspect logs each unmet expectation
func (m *NodeKeeperMock) MinimockSyncInspect() {
	for _, e := range m.SyncMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Errorf("Expected call to NodeKeeperMock.Sync with params: %#v", *e.params)
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.SyncMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterSyncCounter) < 1 {
		if m.SyncMock.defaultExpectation.params == nil {
			m.t.Error("Expected call to NodeKeeperMock.Sync")
		} else {
			m.t.Errorf("Expected call to NodeKeeperMock.Sync with params: %#v", *m.SyncMock.defaultExpectation.params)
		}
	}
	// if func was set then invocations count should be greater than zero
	if m.funcSync != nil && mm_atomic.LoadUint64(&m.afterSyncCounter) < 1 {
		m.t.Error("Expected call to NodeKeeperMock.Sync")
	}
}

// MinimockFinish checks that all mocked methods have been called the expected number of times
func (m *NodeKeeperMock) MinimockFinish() {
	if !m.minimockDone() {
		m.MinimockGetAccessorInspect()

		m.MinimockGetClaimQueueInspect()

		m.MinimockGetCloudHashInspect()

		m.MinimockGetConsensusInfoInspect()

		m.MinimockGetOriginInspect()

		m.MinimockGetOriginAnnounceClaimInspect()

		m.MinimockGetOriginJoinClaimInspect()

		m.MinimockGetSnapshotCopyInspect()

		m.MinimockGetWorkingNodeInspect()

		m.MinimockGetWorkingNodesInspect()

		m.MinimockGetWorkingNodesByRoleInspect()

		m.MinimockIsBootstrappedInspect()

		m.MinimockMoveSyncToActiveInspect()

		m.MinimockSetCloudHashInspect()

		m.MinimockSetInitialSnapshotInspect()

		m.MinimockSetIsBootstrappedInspect()

		m.MinimockSyncInspect()
		m.t.FailNow()
	}
}

// MinimockWait waits for all mocked methods to be called the expected number of times
func (m *NodeKeeperMock) MinimockWait(timeout mm_time.Duration) {
	timeoutCh := mm_time.After(timeout)
	for {
		if m.minimockDone() {
			return
		}
		select {
		case <-timeoutCh:
			m.MinimockFinish()
			return
		case <-mm_time.After(10 * mm_time.Millisecond):
		}
	}
}

func (m *NodeKeeperMock) minimockDone() bool {
	done := true
	return done &&
		m.MinimockGetAccessorDone() &&
		m.MinimockGetClaimQueueDone() &&
		m.MinimockGetCloudHashDone() &&
		m.MinimockGetConsensusInfoDone() &&
		m.MinimockGetOriginDone() &&
		m.MinimockGetOriginAnnounceClaimDone() &&
		m.MinimockGetOriginJoinClaimDone() &&
		m.MinimockGetSnapshotCopyDone() &&
		m.MinimockGetWorkingNodeDone() &&
		m.MinimockGetWorkingNodesDone() &&
		m.MinimockGetWorkingNodesByRoleDone() &&
		m.MinimockIsBootstrappedDone() &&
		m.MinimockMoveSyncToActiveDone() &&
		m.MinimockSetCloudHashDone() &&
		m.MinimockSetInitialSnapshotDone() &&
		m.MinimockSetIsBootstrappedDone() &&
		m.MinimockSyncDone()
}
