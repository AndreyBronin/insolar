package network

// Code generated by http://github.com/gojuno/minimock (dev). DO NOT EDIT.

import (
	"context"
	"sync"
	mm_atomic "sync/atomic"
	mm_time "time"

	"github.com/gojuno/minimock"
	"github.com/insolar/insolar/insolar"
	mm_network "github.com/insolar/insolar/network"
	"github.com/insolar/insolar/network/node"
)

// NodeKeeperMock implements network.NodeKeeper
type NodeKeeperMock struct {
	t minimock.Tester

	funcGetAccessor          func() (a1 mm_network.Accessor)
	inspectFuncGetAccessor   func()
	afterGetAccessorCounter  uint64
	beforeGetAccessorCounter uint64
	GetAccessorMock          mNodeKeeperMockGetAccessor

	funcGetCloudHash          func() (ba1 []byte)
	inspectFuncGetCloudHash   func()
	afterGetCloudHashCounter  uint64
	beforeGetCloudHashCounter uint64
	GetCloudHashMock          mNodeKeeperMockGetCloudHash

	funcGetOrigin          func() (n1 insolar.NetworkNode)
	inspectFuncGetOrigin   func()
	afterGetOriginCounter  uint64
	beforeGetOriginCounter uint64
	GetOriginMock          mNodeKeeperMockGetOrigin

	funcGetSnapshotCopy          func() (sp1 *node.Snapshot)
	inspectFuncGetSnapshotCopy   func()
	afterGetSnapshotCopyCounter  uint64
	beforeGetSnapshotCopyCounter uint64
	GetSnapshotCopyMock          mNodeKeeperMockGetSnapshotCopy

	funcGetWorkingNode          func(ref insolar.Reference) (n1 insolar.NetworkNode)
	inspectFuncGetWorkingNode   func(ref insolar.Reference)
	afterGetWorkingNodeCounter  uint64
	beforeGetWorkingNodeCounter uint64
	GetWorkingNodeMock          mNodeKeeperMockGetWorkingNode

	funcGetWorkingNodes          func() (na1 []insolar.NetworkNode)
	inspectFuncGetWorkingNodes   func()
	afterGetWorkingNodesCounter  uint64
	beforeGetWorkingNodesCounter uint64
	GetWorkingNodesMock          mNodeKeeperMockGetWorkingNodes

	funcMoveSyncToActive          func(ctx context.Context, number insolar.PulseNumber)
	inspectFuncMoveSyncToActive   func(ctx context.Context, number insolar.PulseNumber)
	afterMoveSyncToActiveCounter  uint64
	beforeMoveSyncToActiveCounter uint64
	MoveSyncToActiveMock          mNodeKeeperMockMoveSyncToActive

	funcSetCloudHash          func(ba1 []byte)
	inspectFuncSetCloudHash   func(ba1 []byte)
	afterSetCloudHashCounter  uint64
	beforeSetCloudHashCounter uint64
	SetCloudHashMock          mNodeKeeperMockSetCloudHash

	funcSetInitialSnapshot          func(nodes []insolar.NetworkNode)
	inspectFuncSetInitialSnapshot   func(nodes []insolar.NetworkNode)
	afterSetInitialSnapshotCounter  uint64
	beforeSetInitialSnapshotCounter uint64
	SetInitialSnapshotMock          mNodeKeeperMockSetInitialSnapshot

	funcSync          func(ctx context.Context, na1 []insolar.NetworkNode)
	inspectFuncSync   func(ctx context.Context, na1 []insolar.NetworkNode)
	afterSyncCounter  uint64
	beforeSyncCounter uint64
	SyncMock          mNodeKeeperMockSync
}

// NewNodeKeeperMock returns a mock for network.NodeKeeper
func NewNodeKeeperMock(t minimock.Tester) *NodeKeeperMock {
	m := &NodeKeeperMock{t: t}
	if controller, ok := t.(minimock.MockController); ok {
		controller.RegisterMocker(m)
	}

	m.GetAccessorMock = mNodeKeeperMockGetAccessor{mock: m}

	m.GetCloudHashMock = mNodeKeeperMockGetCloudHash{mock: m}

	m.GetOriginMock = mNodeKeeperMockGetOrigin{mock: m}

	m.GetSnapshotCopyMock = mNodeKeeperMockGetSnapshotCopy{mock: m}

	m.GetWorkingNodeMock = mNodeKeeperMockGetWorkingNode{mock: m}
	m.GetWorkingNodeMock.callArgs = []*NodeKeeperMockGetWorkingNodeParams{}

	m.GetWorkingNodesMock = mNodeKeeperMockGetWorkingNodes{mock: m}

	m.MoveSyncToActiveMock = mNodeKeeperMockMoveSyncToActive{mock: m}
	m.MoveSyncToActiveMock.callArgs = []*NodeKeeperMockMoveSyncToActiveParams{}

	m.SetCloudHashMock = mNodeKeeperMockSetCloudHash{mock: m}
	m.SetCloudHashMock.callArgs = []*NodeKeeperMockSetCloudHashParams{}

	m.SetInitialSnapshotMock = mNodeKeeperMockSetInitialSnapshot{mock: m}
	m.SetInitialSnapshotMock.callArgs = []*NodeKeeperMockSetInitialSnapshotParams{}

	m.SyncMock = mNodeKeeperMockSync{mock: m}
	m.SyncMock.callArgs = []*NodeKeeperMockSyncParams{}

	return m
}

type mNodeKeeperMockGetAccessor struct {
	mock               *NodeKeeperMock
	defaultExpectation *NodeKeeperMockGetAccessorExpectation
	expectations       []*NodeKeeperMockGetAccessorExpectation
}

// NodeKeeperMockGetAccessorExpectation specifies expectation struct of the NodeKeeper.GetAccessor
type NodeKeeperMockGetAccessorExpectation struct {
	mock *NodeKeeperMock

	results *NodeKeeperMockGetAccessorResults
	Counter uint64
}

// NodeKeeperMockGetAccessorResults contains results of the NodeKeeper.GetAccessor
type NodeKeeperMockGetAccessorResults struct {
	a1 mm_network.Accessor
}

// Expect sets up expected params for NodeKeeper.GetAccessor
func (mmGetAccessor *mNodeKeeperMockGetAccessor) Expect() *mNodeKeeperMockGetAccessor {
	if mmGetAccessor.mock.funcGetAccessor != nil {
		mmGetAccessor.mock.t.Fatalf("NodeKeeperMock.GetAccessor mock is already set by Set")
	}

	if mmGetAccessor.defaultExpectation == nil {
		mmGetAccessor.defaultExpectation = &NodeKeeperMockGetAccessorExpectation{}
	}

	return mmGetAccessor
}

// Inspect accepts an inspector function that has same arguments as the NodeKeeper.GetAccessor
func (mmGetAccessor *mNodeKeeperMockGetAccessor) Inspect(f func()) *mNodeKeeperMockGetAccessor {
	if mmGetAccessor.mock.inspectFuncGetAccessor != nil {
		mmGetAccessor.mock.t.Fatalf("Inspect function is already set for NodeKeeperMock.GetAccessor")
	}

	mmGetAccessor.mock.inspectFuncGetAccessor = f

	return mmGetAccessor
}

// Return sets up results that will be returned by NodeKeeper.GetAccessor
func (mmGetAccessor *mNodeKeeperMockGetAccessor) Return(a1 mm_network.Accessor) *NodeKeeperMock {
	if mmGetAccessor.mock.funcGetAccessor != nil {
		mmGetAccessor.mock.t.Fatalf("NodeKeeperMock.GetAccessor mock is already set by Set")
	}

	if mmGetAccessor.defaultExpectation == nil {
		mmGetAccessor.defaultExpectation = &NodeKeeperMockGetAccessorExpectation{mock: mmGetAccessor.mock}
	}
	mmGetAccessor.defaultExpectation.results = &NodeKeeperMockGetAccessorResults{a1}
	return mmGetAccessor.mock
}

//Set uses given function f to mock the NodeKeeper.GetAccessor method
func (mmGetAccessor *mNodeKeeperMockGetAccessor) Set(f func() (a1 mm_network.Accessor)) *NodeKeeperMock {
	if mmGetAccessor.defaultExpectation != nil {
		mmGetAccessor.mock.t.Fatalf("Default expectation is already set for the NodeKeeper.GetAccessor method")
	}

	if len(mmGetAccessor.expectations) > 0 {
		mmGetAccessor.mock.t.Fatalf("Some expectations are already set for the NodeKeeper.GetAccessor method")
	}

	mmGetAccessor.mock.funcGetAccessor = f
	return mmGetAccessor.mock
}

// GetAccessor implements network.NodeKeeper
func (mmGetAccessor *NodeKeeperMock) GetAccessor() (a1 mm_network.Accessor) {
	mm_atomic.AddUint64(&mmGetAccessor.beforeGetAccessorCounter, 1)
	defer mm_atomic.AddUint64(&mmGetAccessor.afterGetAccessorCounter, 1)

	if mmGetAccessor.inspectFuncGetAccessor != nil {
		mmGetAccessor.inspectFuncGetAccessor()
	}

	if mmGetAccessor.GetAccessorMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&mmGetAccessor.GetAccessorMock.defaultExpectation.Counter, 1)

		results := mmGetAccessor.GetAccessorMock.defaultExpectation.results
		if results == nil {
			mmGetAccessor.t.Fatal("No results are set for the NodeKeeperMock.GetAccessor")
		}
		return (*results).a1
	}
	if mmGetAccessor.funcGetAccessor != nil {
		return mmGetAccessor.funcGetAccessor()
	}
	mmGetAccessor.t.Fatalf("Unexpected call to NodeKeeperMock.GetAccessor.")
	return
}

// GetAccessorAfterCounter returns a count of finished NodeKeeperMock.GetAccessor invocations
func (mmGetAccessor *NodeKeeperMock) GetAccessorAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&mmGetAccessor.afterGetAccessorCounter)
}

// GetAccessorBeforeCounter returns a count of NodeKeeperMock.GetAccessor invocations
func (mmGetAccessor *NodeKeeperMock) GetAccessorBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&mmGetAccessor.beforeGetAccessorCounter)
}

// MinimockGetAccessorDone returns true if the count of the GetAccessor invocations corresponds
// the number of defined expectations
func (m *NodeKeeperMock) MinimockGetAccessorDone() bool {
	for _, e := range m.GetAccessorMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.GetAccessorMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterGetAccessorCounter) < 1 {
		return false
	}
	// if func was set then invocations count should be greater than zero
	if m.funcGetAccessor != nil && mm_atomic.LoadUint64(&m.afterGetAccessorCounter) < 1 {
		return false
	}
	return true
}

// MinimockGetAccessorInspect logs each unmet expectation
func (m *NodeKeeperMock) MinimockGetAccessorInspect() {
	for _, e := range m.GetAccessorMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Error("Expected call to NodeKeeperMock.GetAccessor")
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.GetAccessorMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterGetAccessorCounter) < 1 {
		m.t.Error("Expected call to NodeKeeperMock.GetAccessor")
	}
	// if func was set then invocations count should be greater than zero
	if m.funcGetAccessor != nil && mm_atomic.LoadUint64(&m.afterGetAccessorCounter) < 1 {
		m.t.Error("Expected call to NodeKeeperMock.GetAccessor")
	}
}

type mNodeKeeperMockGetCloudHash struct {
	mock               *NodeKeeperMock
	defaultExpectation *NodeKeeperMockGetCloudHashExpectation
	expectations       []*NodeKeeperMockGetCloudHashExpectation
}

// NodeKeeperMockGetCloudHashExpectation specifies expectation struct of the NodeKeeper.GetCloudHash
type NodeKeeperMockGetCloudHashExpectation struct {
	mock *NodeKeeperMock

	results *NodeKeeperMockGetCloudHashResults
	Counter uint64
}

// NodeKeeperMockGetCloudHashResults contains results of the NodeKeeper.GetCloudHash
type NodeKeeperMockGetCloudHashResults struct {
	ba1 []byte
}

// Expect sets up expected params for NodeKeeper.GetCloudHash
func (mmGetCloudHash *mNodeKeeperMockGetCloudHash) Expect() *mNodeKeeperMockGetCloudHash {
	if mmGetCloudHash.mock.funcGetCloudHash != nil {
		mmGetCloudHash.mock.t.Fatalf("NodeKeeperMock.GetCloudHash mock is already set by Set")
	}

	if mmGetCloudHash.defaultExpectation == nil {
		mmGetCloudHash.defaultExpectation = &NodeKeeperMockGetCloudHashExpectation{}
	}

	return mmGetCloudHash
}

// Inspect accepts an inspector function that has same arguments as the NodeKeeper.GetCloudHash
func (mmGetCloudHash *mNodeKeeperMockGetCloudHash) Inspect(f func()) *mNodeKeeperMockGetCloudHash {
	if mmGetCloudHash.mock.inspectFuncGetCloudHash != nil {
		mmGetCloudHash.mock.t.Fatalf("Inspect function is already set for NodeKeeperMock.GetCloudHash")
	}

	mmGetCloudHash.mock.inspectFuncGetCloudHash = f

	return mmGetCloudHash
}

// Return sets up results that will be returned by NodeKeeper.GetCloudHash
func (mmGetCloudHash *mNodeKeeperMockGetCloudHash) Return(ba1 []byte) *NodeKeeperMock {
	if mmGetCloudHash.mock.funcGetCloudHash != nil {
		mmGetCloudHash.mock.t.Fatalf("NodeKeeperMock.GetCloudHash mock is already set by Set")
	}

	if mmGetCloudHash.defaultExpectation == nil {
		mmGetCloudHash.defaultExpectation = &NodeKeeperMockGetCloudHashExpectation{mock: mmGetCloudHash.mock}
	}
	mmGetCloudHash.defaultExpectation.results = &NodeKeeperMockGetCloudHashResults{ba1}
	return mmGetCloudHash.mock
}

//Set uses given function f to mock the NodeKeeper.GetCloudHash method
func (mmGetCloudHash *mNodeKeeperMockGetCloudHash) Set(f func() (ba1 []byte)) *NodeKeeperMock {
	if mmGetCloudHash.defaultExpectation != nil {
		mmGetCloudHash.mock.t.Fatalf("Default expectation is already set for the NodeKeeper.GetCloudHash method")
	}

	if len(mmGetCloudHash.expectations) > 0 {
		mmGetCloudHash.mock.t.Fatalf("Some expectations are already set for the NodeKeeper.GetCloudHash method")
	}

	mmGetCloudHash.mock.funcGetCloudHash = f
	return mmGetCloudHash.mock
}

// GetCloudHash implements network.NodeKeeper
func (mmGetCloudHash *NodeKeeperMock) GetCloudHash() (ba1 []byte) {
	mm_atomic.AddUint64(&mmGetCloudHash.beforeGetCloudHashCounter, 1)
	defer mm_atomic.AddUint64(&mmGetCloudHash.afterGetCloudHashCounter, 1)

	if mmGetCloudHash.inspectFuncGetCloudHash != nil {
		mmGetCloudHash.inspectFuncGetCloudHash()
	}

	if mmGetCloudHash.GetCloudHashMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&mmGetCloudHash.GetCloudHashMock.defaultExpectation.Counter, 1)

		results := mmGetCloudHash.GetCloudHashMock.defaultExpectation.results
		if results == nil {
			mmGetCloudHash.t.Fatal("No results are set for the NodeKeeperMock.GetCloudHash")
		}
		return (*results).ba1
	}
	if mmGetCloudHash.funcGetCloudHash != nil {
		return mmGetCloudHash.funcGetCloudHash()
	}
	mmGetCloudHash.t.Fatalf("Unexpected call to NodeKeeperMock.GetCloudHash.")
	return
}

// GetCloudHashAfterCounter returns a count of finished NodeKeeperMock.GetCloudHash invocations
func (mmGetCloudHash *NodeKeeperMock) GetCloudHashAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&mmGetCloudHash.afterGetCloudHashCounter)
}

// GetCloudHashBeforeCounter returns a count of NodeKeeperMock.GetCloudHash invocations
func (mmGetCloudHash *NodeKeeperMock) GetCloudHashBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&mmGetCloudHash.beforeGetCloudHashCounter)
}

// MinimockGetCloudHashDone returns true if the count of the GetCloudHash invocations corresponds
// the number of defined expectations
func (m *NodeKeeperMock) MinimockGetCloudHashDone() bool {
	for _, e := range m.GetCloudHashMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.GetCloudHashMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterGetCloudHashCounter) < 1 {
		return false
	}
	// if func was set then invocations count should be greater than zero
	if m.funcGetCloudHash != nil && mm_atomic.LoadUint64(&m.afterGetCloudHashCounter) < 1 {
		return false
	}
	return true
}

// MinimockGetCloudHashInspect logs each unmet expectation
func (m *NodeKeeperMock) MinimockGetCloudHashInspect() {
	for _, e := range m.GetCloudHashMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Error("Expected call to NodeKeeperMock.GetCloudHash")
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.GetCloudHashMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterGetCloudHashCounter) < 1 {
		m.t.Error("Expected call to NodeKeeperMock.GetCloudHash")
	}
	// if func was set then invocations count should be greater than zero
	if m.funcGetCloudHash != nil && mm_atomic.LoadUint64(&m.afterGetCloudHashCounter) < 1 {
		m.t.Error("Expected call to NodeKeeperMock.GetCloudHash")
	}
}

type mNodeKeeperMockGetOrigin struct {
	mock               *NodeKeeperMock
	defaultExpectation *NodeKeeperMockGetOriginExpectation
	expectations       []*NodeKeeperMockGetOriginExpectation
}

// NodeKeeperMockGetOriginExpectation specifies expectation struct of the NodeKeeper.GetOrigin
type NodeKeeperMockGetOriginExpectation struct {
	mock *NodeKeeperMock

	results *NodeKeeperMockGetOriginResults
	Counter uint64
}

// NodeKeeperMockGetOriginResults contains results of the NodeKeeper.GetOrigin
type NodeKeeperMockGetOriginResults struct {
	n1 insolar.NetworkNode
}

// Expect sets up expected params for NodeKeeper.GetOrigin
func (mmGetOrigin *mNodeKeeperMockGetOrigin) Expect() *mNodeKeeperMockGetOrigin {
	if mmGetOrigin.mock.funcGetOrigin != nil {
		mmGetOrigin.mock.t.Fatalf("NodeKeeperMock.GetOrigin mock is already set by Set")
	}

	if mmGetOrigin.defaultExpectation == nil {
		mmGetOrigin.defaultExpectation = &NodeKeeperMockGetOriginExpectation{}
	}

	return mmGetOrigin
}

// Inspect accepts an inspector function that has same arguments as the NodeKeeper.GetOrigin
func (mmGetOrigin *mNodeKeeperMockGetOrigin) Inspect(f func()) *mNodeKeeperMockGetOrigin {
	if mmGetOrigin.mock.inspectFuncGetOrigin != nil {
		mmGetOrigin.mock.t.Fatalf("Inspect function is already set for NodeKeeperMock.GetOrigin")
	}

	mmGetOrigin.mock.inspectFuncGetOrigin = f

	return mmGetOrigin
}

// Return sets up results that will be returned by NodeKeeper.GetOrigin
func (mmGetOrigin *mNodeKeeperMockGetOrigin) Return(n1 insolar.NetworkNode) *NodeKeeperMock {
	if mmGetOrigin.mock.funcGetOrigin != nil {
		mmGetOrigin.mock.t.Fatalf("NodeKeeperMock.GetOrigin mock is already set by Set")
	}

	if mmGetOrigin.defaultExpectation == nil {
		mmGetOrigin.defaultExpectation = &NodeKeeperMockGetOriginExpectation{mock: mmGetOrigin.mock}
	}
	mmGetOrigin.defaultExpectation.results = &NodeKeeperMockGetOriginResults{n1}
	return mmGetOrigin.mock
}

//Set uses given function f to mock the NodeKeeper.GetOrigin method
func (mmGetOrigin *mNodeKeeperMockGetOrigin) Set(f func() (n1 insolar.NetworkNode)) *NodeKeeperMock {
	if mmGetOrigin.defaultExpectation != nil {
		mmGetOrigin.mock.t.Fatalf("Default expectation is already set for the NodeKeeper.GetOrigin method")
	}

	if len(mmGetOrigin.expectations) > 0 {
		mmGetOrigin.mock.t.Fatalf("Some expectations are already set for the NodeKeeper.GetOrigin method")
	}

	mmGetOrigin.mock.funcGetOrigin = f
	return mmGetOrigin.mock
}

// GetOrigin implements network.NodeKeeper
func (mmGetOrigin *NodeKeeperMock) GetOrigin() (n1 insolar.NetworkNode) {
	mm_atomic.AddUint64(&mmGetOrigin.beforeGetOriginCounter, 1)
	defer mm_atomic.AddUint64(&mmGetOrigin.afterGetOriginCounter, 1)

	if mmGetOrigin.inspectFuncGetOrigin != nil {
		mmGetOrigin.inspectFuncGetOrigin()
	}

	if mmGetOrigin.GetOriginMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&mmGetOrigin.GetOriginMock.defaultExpectation.Counter, 1)

		results := mmGetOrigin.GetOriginMock.defaultExpectation.results
		if results == nil {
			mmGetOrigin.t.Fatal("No results are set for the NodeKeeperMock.GetOrigin")
		}
		return (*results).n1
	}
	if mmGetOrigin.funcGetOrigin != nil {
		return mmGetOrigin.funcGetOrigin()
	}
	mmGetOrigin.t.Fatalf("Unexpected call to NodeKeeperMock.GetOrigin.")
	return
}

// GetOriginAfterCounter returns a count of finished NodeKeeperMock.GetOrigin invocations
func (mmGetOrigin *NodeKeeperMock) GetOriginAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&mmGetOrigin.afterGetOriginCounter)
}

// GetOriginBeforeCounter returns a count of NodeKeeperMock.GetOrigin invocations
func (mmGetOrigin *NodeKeeperMock) GetOriginBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&mmGetOrigin.beforeGetOriginCounter)
}

// MinimockGetOriginDone returns true if the count of the GetOrigin invocations corresponds
// the number of defined expectations
func (m *NodeKeeperMock) MinimockGetOriginDone() bool {
	for _, e := range m.GetOriginMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.GetOriginMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterGetOriginCounter) < 1 {
		return false
	}
	// if func was set then invocations count should be greater than zero
	if m.funcGetOrigin != nil && mm_atomic.LoadUint64(&m.afterGetOriginCounter) < 1 {
		return false
	}
	return true
}

// MinimockGetOriginInspect logs each unmet expectation
func (m *NodeKeeperMock) MinimockGetOriginInspect() {
	for _, e := range m.GetOriginMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Error("Expected call to NodeKeeperMock.GetOrigin")
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.GetOriginMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterGetOriginCounter) < 1 {
		m.t.Error("Expected call to NodeKeeperMock.GetOrigin")
	}
	// if func was set then invocations count should be greater than zero
	if m.funcGetOrigin != nil && mm_atomic.LoadUint64(&m.afterGetOriginCounter) < 1 {
		m.t.Error("Expected call to NodeKeeperMock.GetOrigin")
	}
}

type mNodeKeeperMockGetSnapshotCopy struct {
	mock               *NodeKeeperMock
	defaultExpectation *NodeKeeperMockGetSnapshotCopyExpectation
	expectations       []*NodeKeeperMockGetSnapshotCopyExpectation
}

// NodeKeeperMockGetSnapshotCopyExpectation specifies expectation struct of the NodeKeeper.GetSnapshotCopy
type NodeKeeperMockGetSnapshotCopyExpectation struct {
	mock *NodeKeeperMock

	results *NodeKeeperMockGetSnapshotCopyResults
	Counter uint64
}

// NodeKeeperMockGetSnapshotCopyResults contains results of the NodeKeeper.GetSnapshotCopy
type NodeKeeperMockGetSnapshotCopyResults struct {
	sp1 *node.Snapshot
}

// Expect sets up expected params for NodeKeeper.GetSnapshotCopy
func (mmGetSnapshotCopy *mNodeKeeperMockGetSnapshotCopy) Expect() *mNodeKeeperMockGetSnapshotCopy {
	if mmGetSnapshotCopy.mock.funcGetSnapshotCopy != nil {
		mmGetSnapshotCopy.mock.t.Fatalf("NodeKeeperMock.GetSnapshotCopy mock is already set by Set")
	}

	if mmGetSnapshotCopy.defaultExpectation == nil {
		mmGetSnapshotCopy.defaultExpectation = &NodeKeeperMockGetSnapshotCopyExpectation{}
	}

	return mmGetSnapshotCopy
}

// Inspect accepts an inspector function that has same arguments as the NodeKeeper.GetSnapshotCopy
func (mmGetSnapshotCopy *mNodeKeeperMockGetSnapshotCopy) Inspect(f func()) *mNodeKeeperMockGetSnapshotCopy {
	if mmGetSnapshotCopy.mock.inspectFuncGetSnapshotCopy != nil {
		mmGetSnapshotCopy.mock.t.Fatalf("Inspect function is already set for NodeKeeperMock.GetSnapshotCopy")
	}

	mmGetSnapshotCopy.mock.inspectFuncGetSnapshotCopy = f

	return mmGetSnapshotCopy
}

// Return sets up results that will be returned by NodeKeeper.GetSnapshotCopy
func (mmGetSnapshotCopy *mNodeKeeperMockGetSnapshotCopy) Return(sp1 *node.Snapshot) *NodeKeeperMock {
	if mmGetSnapshotCopy.mock.funcGetSnapshotCopy != nil {
		mmGetSnapshotCopy.mock.t.Fatalf("NodeKeeperMock.GetSnapshotCopy mock is already set by Set")
	}

	if mmGetSnapshotCopy.defaultExpectation == nil {
		mmGetSnapshotCopy.defaultExpectation = &NodeKeeperMockGetSnapshotCopyExpectation{mock: mmGetSnapshotCopy.mock}
	}
	mmGetSnapshotCopy.defaultExpectation.results = &NodeKeeperMockGetSnapshotCopyResults{sp1}
	return mmGetSnapshotCopy.mock
}

//Set uses given function f to mock the NodeKeeper.GetSnapshotCopy method
func (mmGetSnapshotCopy *mNodeKeeperMockGetSnapshotCopy) Set(f func() (sp1 *node.Snapshot)) *NodeKeeperMock {
	if mmGetSnapshotCopy.defaultExpectation != nil {
		mmGetSnapshotCopy.mock.t.Fatalf("Default expectation is already set for the NodeKeeper.GetSnapshotCopy method")
	}

	if len(mmGetSnapshotCopy.expectations) > 0 {
		mmGetSnapshotCopy.mock.t.Fatalf("Some expectations are already set for the NodeKeeper.GetSnapshotCopy method")
	}

	mmGetSnapshotCopy.mock.funcGetSnapshotCopy = f
	return mmGetSnapshotCopy.mock
}

// GetSnapshotCopy implements network.NodeKeeper
func (mmGetSnapshotCopy *NodeKeeperMock) GetSnapshotCopy() (sp1 *node.Snapshot) {
	mm_atomic.AddUint64(&mmGetSnapshotCopy.beforeGetSnapshotCopyCounter, 1)
	defer mm_atomic.AddUint64(&mmGetSnapshotCopy.afterGetSnapshotCopyCounter, 1)

	if mmGetSnapshotCopy.inspectFuncGetSnapshotCopy != nil {
		mmGetSnapshotCopy.inspectFuncGetSnapshotCopy()
	}

	if mmGetSnapshotCopy.GetSnapshotCopyMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&mmGetSnapshotCopy.GetSnapshotCopyMock.defaultExpectation.Counter, 1)

		results := mmGetSnapshotCopy.GetSnapshotCopyMock.defaultExpectation.results
		if results == nil {
			mmGetSnapshotCopy.t.Fatal("No results are set for the NodeKeeperMock.GetSnapshotCopy")
		}
		return (*results).sp1
	}
	if mmGetSnapshotCopy.funcGetSnapshotCopy != nil {
		return mmGetSnapshotCopy.funcGetSnapshotCopy()
	}
	mmGetSnapshotCopy.t.Fatalf("Unexpected call to NodeKeeperMock.GetSnapshotCopy.")
	return
}

// GetSnapshotCopyAfterCounter returns a count of finished NodeKeeperMock.GetSnapshotCopy invocations
func (mmGetSnapshotCopy *NodeKeeperMock) GetSnapshotCopyAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&mmGetSnapshotCopy.afterGetSnapshotCopyCounter)
}

// GetSnapshotCopyBeforeCounter returns a count of NodeKeeperMock.GetSnapshotCopy invocations
func (mmGetSnapshotCopy *NodeKeeperMock) GetSnapshotCopyBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&mmGetSnapshotCopy.beforeGetSnapshotCopyCounter)
}

// MinimockGetSnapshotCopyDone returns true if the count of the GetSnapshotCopy invocations corresponds
// the number of defined expectations
func (m *NodeKeeperMock) MinimockGetSnapshotCopyDone() bool {
	for _, e := range m.GetSnapshotCopyMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.GetSnapshotCopyMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterGetSnapshotCopyCounter) < 1 {
		return false
	}
	// if func was set then invocations count should be greater than zero
	if m.funcGetSnapshotCopy != nil && mm_atomic.LoadUint64(&m.afterGetSnapshotCopyCounter) < 1 {
		return false
	}
	return true
}

// MinimockGetSnapshotCopyInspect logs each unmet expectation
func (m *NodeKeeperMock) MinimockGetSnapshotCopyInspect() {
	for _, e := range m.GetSnapshotCopyMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Error("Expected call to NodeKeeperMock.GetSnapshotCopy")
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.GetSnapshotCopyMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterGetSnapshotCopyCounter) < 1 {
		m.t.Error("Expected call to NodeKeeperMock.GetSnapshotCopy")
	}
	// if func was set then invocations count should be greater than zero
	if m.funcGetSnapshotCopy != nil && mm_atomic.LoadUint64(&m.afterGetSnapshotCopyCounter) < 1 {
		m.t.Error("Expected call to NodeKeeperMock.GetSnapshotCopy")
	}
}

type mNodeKeeperMockGetWorkingNode struct {
	mock               *NodeKeeperMock
	defaultExpectation *NodeKeeperMockGetWorkingNodeExpectation
	expectations       []*NodeKeeperMockGetWorkingNodeExpectation

	callArgs []*NodeKeeperMockGetWorkingNodeParams
	mutex    sync.RWMutex
}

// NodeKeeperMockGetWorkingNodeExpectation specifies expectation struct of the NodeKeeper.GetWorkingNode
type NodeKeeperMockGetWorkingNodeExpectation struct {
	mock    *NodeKeeperMock
	params  *NodeKeeperMockGetWorkingNodeParams
	results *NodeKeeperMockGetWorkingNodeResults
	Counter uint64
}

// NodeKeeperMockGetWorkingNodeParams contains parameters of the NodeKeeper.GetWorkingNode
type NodeKeeperMockGetWorkingNodeParams struct {
	ref insolar.Reference
}

// NodeKeeperMockGetWorkingNodeResults contains results of the NodeKeeper.GetWorkingNode
type NodeKeeperMockGetWorkingNodeResults struct {
	n1 insolar.NetworkNode
}

// Expect sets up expected params for NodeKeeper.GetWorkingNode
func (mmGetWorkingNode *mNodeKeeperMockGetWorkingNode) Expect(ref insolar.Reference) *mNodeKeeperMockGetWorkingNode {
	if mmGetWorkingNode.mock.funcGetWorkingNode != nil {
		mmGetWorkingNode.mock.t.Fatalf("NodeKeeperMock.GetWorkingNode mock is already set by Set")
	}

	if mmGetWorkingNode.defaultExpectation == nil {
		mmGetWorkingNode.defaultExpectation = &NodeKeeperMockGetWorkingNodeExpectation{}
	}

	mmGetWorkingNode.defaultExpectation.params = &NodeKeeperMockGetWorkingNodeParams{ref}
	for _, e := range mmGetWorkingNode.expectations {
		if minimock.Equal(e.params, mmGetWorkingNode.defaultExpectation.params) {
			mmGetWorkingNode.mock.t.Fatalf("Expectation set by When has same params: %#v", *mmGetWorkingNode.defaultExpectation.params)
		}
	}

	return mmGetWorkingNode
}

// Inspect accepts an inspector function that has same arguments as the NodeKeeper.GetWorkingNode
func (mmGetWorkingNode *mNodeKeeperMockGetWorkingNode) Inspect(f func(ref insolar.Reference)) *mNodeKeeperMockGetWorkingNode {
	if mmGetWorkingNode.mock.inspectFuncGetWorkingNode != nil {
		mmGetWorkingNode.mock.t.Fatalf("Inspect function is already set for NodeKeeperMock.GetWorkingNode")
	}

	mmGetWorkingNode.mock.inspectFuncGetWorkingNode = f

	return mmGetWorkingNode
}

// Return sets up results that will be returned by NodeKeeper.GetWorkingNode
func (mmGetWorkingNode *mNodeKeeperMockGetWorkingNode) Return(n1 insolar.NetworkNode) *NodeKeeperMock {
	if mmGetWorkingNode.mock.funcGetWorkingNode != nil {
		mmGetWorkingNode.mock.t.Fatalf("NodeKeeperMock.GetWorkingNode mock is already set by Set")
	}

	if mmGetWorkingNode.defaultExpectation == nil {
		mmGetWorkingNode.defaultExpectation = &NodeKeeperMockGetWorkingNodeExpectation{mock: mmGetWorkingNode.mock}
	}
	mmGetWorkingNode.defaultExpectation.results = &NodeKeeperMockGetWorkingNodeResults{n1}
	return mmGetWorkingNode.mock
}

//Set uses given function f to mock the NodeKeeper.GetWorkingNode method
func (mmGetWorkingNode *mNodeKeeperMockGetWorkingNode) Set(f func(ref insolar.Reference) (n1 insolar.NetworkNode)) *NodeKeeperMock {
	if mmGetWorkingNode.defaultExpectation != nil {
		mmGetWorkingNode.mock.t.Fatalf("Default expectation is already set for the NodeKeeper.GetWorkingNode method")
	}

	if len(mmGetWorkingNode.expectations) > 0 {
		mmGetWorkingNode.mock.t.Fatalf("Some expectations are already set for the NodeKeeper.GetWorkingNode method")
	}

	mmGetWorkingNode.mock.funcGetWorkingNode = f
	return mmGetWorkingNode.mock
}

// When sets expectation for the NodeKeeper.GetWorkingNode which will trigger the result defined by the following
// Then helper
func (mmGetWorkingNode *mNodeKeeperMockGetWorkingNode) When(ref insolar.Reference) *NodeKeeperMockGetWorkingNodeExpectation {
	if mmGetWorkingNode.mock.funcGetWorkingNode != nil {
		mmGetWorkingNode.mock.t.Fatalf("NodeKeeperMock.GetWorkingNode mock is already set by Set")
	}

	expectation := &NodeKeeperMockGetWorkingNodeExpectation{
		mock:   mmGetWorkingNode.mock,
		params: &NodeKeeperMockGetWorkingNodeParams{ref},
	}
	mmGetWorkingNode.expectations = append(mmGetWorkingNode.expectations, expectation)
	return expectation
}

// Then sets up NodeKeeper.GetWorkingNode return parameters for the expectation previously defined by the When method
func (e *NodeKeeperMockGetWorkingNodeExpectation) Then(n1 insolar.NetworkNode) *NodeKeeperMock {
	e.results = &NodeKeeperMockGetWorkingNodeResults{n1}
	return e.mock
}

// GetWorkingNode implements network.NodeKeeper
func (mmGetWorkingNode *NodeKeeperMock) GetWorkingNode(ref insolar.Reference) (n1 insolar.NetworkNode) {
	mm_atomic.AddUint64(&mmGetWorkingNode.beforeGetWorkingNodeCounter, 1)
	defer mm_atomic.AddUint64(&mmGetWorkingNode.afterGetWorkingNodeCounter, 1)

	if mmGetWorkingNode.inspectFuncGetWorkingNode != nil {
		mmGetWorkingNode.inspectFuncGetWorkingNode(ref)
	}

	params := &NodeKeeperMockGetWorkingNodeParams{ref}

	// Record call args
	mmGetWorkingNode.GetWorkingNodeMock.mutex.Lock()
	mmGetWorkingNode.GetWorkingNodeMock.callArgs = append(mmGetWorkingNode.GetWorkingNodeMock.callArgs, params)
	mmGetWorkingNode.GetWorkingNodeMock.mutex.Unlock()

	for _, e := range mmGetWorkingNode.GetWorkingNodeMock.expectations {
		if minimock.Equal(e.params, params) {
			mm_atomic.AddUint64(&e.Counter, 1)
			return e.results.n1
		}
	}

	if mmGetWorkingNode.GetWorkingNodeMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&mmGetWorkingNode.GetWorkingNodeMock.defaultExpectation.Counter, 1)
		want := mmGetWorkingNode.GetWorkingNodeMock.defaultExpectation.params
		got := NodeKeeperMockGetWorkingNodeParams{ref}
		if want != nil && !minimock.Equal(*want, got) {
			mmGetWorkingNode.t.Errorf("NodeKeeperMock.GetWorkingNode got unexpected parameters, want: %#v, got: %#v%s\n", *want, got, minimock.Diff(*want, got))
		}

		results := mmGetWorkingNode.GetWorkingNodeMock.defaultExpectation.results
		if results == nil {
			mmGetWorkingNode.t.Fatal("No results are set for the NodeKeeperMock.GetWorkingNode")
		}
		return (*results).n1
	}
	if mmGetWorkingNode.funcGetWorkingNode != nil {
		return mmGetWorkingNode.funcGetWorkingNode(ref)
	}
	mmGetWorkingNode.t.Fatalf("Unexpected call to NodeKeeperMock.GetWorkingNode. %v", ref)
	return
}

// GetWorkingNodeAfterCounter returns a count of finished NodeKeeperMock.GetWorkingNode invocations
func (mmGetWorkingNode *NodeKeeperMock) GetWorkingNodeAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&mmGetWorkingNode.afterGetWorkingNodeCounter)
}

// GetWorkingNodeBeforeCounter returns a count of NodeKeeperMock.GetWorkingNode invocations
func (mmGetWorkingNode *NodeKeeperMock) GetWorkingNodeBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&mmGetWorkingNode.beforeGetWorkingNodeCounter)
}

// Calls returns a list of arguments used in each call to NodeKeeperMock.GetWorkingNode.
// The list is in the same order as the calls were made (i.e. recent calls have a higher index)
func (mmGetWorkingNode *mNodeKeeperMockGetWorkingNode) Calls() []*NodeKeeperMockGetWorkingNodeParams {
	mmGetWorkingNode.mutex.RLock()

	argCopy := make([]*NodeKeeperMockGetWorkingNodeParams, len(mmGetWorkingNode.callArgs))
	copy(argCopy, mmGetWorkingNode.callArgs)

	mmGetWorkingNode.mutex.RUnlock()

	return argCopy
}

// MinimockGetWorkingNodeDone returns true if the count of the GetWorkingNode invocations corresponds
// the number of defined expectations
func (m *NodeKeeperMock) MinimockGetWorkingNodeDone() bool {
	for _, e := range m.GetWorkingNodeMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.GetWorkingNodeMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterGetWorkingNodeCounter) < 1 {
		return false
	}
	// if func was set then invocations count should be greater than zero
	if m.funcGetWorkingNode != nil && mm_atomic.LoadUint64(&m.afterGetWorkingNodeCounter) < 1 {
		return false
	}
	return true
}

// MinimockGetWorkingNodeInspect logs each unmet expectation
func (m *NodeKeeperMock) MinimockGetWorkingNodeInspect() {
	for _, e := range m.GetWorkingNodeMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Errorf("Expected call to NodeKeeperMock.GetWorkingNode with params: %#v", *e.params)
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.GetWorkingNodeMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterGetWorkingNodeCounter) < 1 {
		if m.GetWorkingNodeMock.defaultExpectation.params == nil {
			m.t.Error("Expected call to NodeKeeperMock.GetWorkingNode")
		} else {
			m.t.Errorf("Expected call to NodeKeeperMock.GetWorkingNode with params: %#v", *m.GetWorkingNodeMock.defaultExpectation.params)
		}
	}
	// if func was set then invocations count should be greater than zero
	if m.funcGetWorkingNode != nil && mm_atomic.LoadUint64(&m.afterGetWorkingNodeCounter) < 1 {
		m.t.Error("Expected call to NodeKeeperMock.GetWorkingNode")
	}
}

type mNodeKeeperMockGetWorkingNodes struct {
	mock               *NodeKeeperMock
	defaultExpectation *NodeKeeperMockGetWorkingNodesExpectation
	expectations       []*NodeKeeperMockGetWorkingNodesExpectation
}

// NodeKeeperMockGetWorkingNodesExpectation specifies expectation struct of the NodeKeeper.GetWorkingNodes
type NodeKeeperMockGetWorkingNodesExpectation struct {
	mock *NodeKeeperMock

	results *NodeKeeperMockGetWorkingNodesResults
	Counter uint64
}

// NodeKeeperMockGetWorkingNodesResults contains results of the NodeKeeper.GetWorkingNodes
type NodeKeeperMockGetWorkingNodesResults struct {
	na1 []insolar.NetworkNode
}

// Expect sets up expected params for NodeKeeper.GetWorkingNodes
func (mmGetWorkingNodes *mNodeKeeperMockGetWorkingNodes) Expect() *mNodeKeeperMockGetWorkingNodes {
	if mmGetWorkingNodes.mock.funcGetWorkingNodes != nil {
		mmGetWorkingNodes.mock.t.Fatalf("NodeKeeperMock.GetWorkingNodes mock is already set by Set")
	}

	if mmGetWorkingNodes.defaultExpectation == nil {
		mmGetWorkingNodes.defaultExpectation = &NodeKeeperMockGetWorkingNodesExpectation{}
	}

	return mmGetWorkingNodes
}

// Inspect accepts an inspector function that has same arguments as the NodeKeeper.GetWorkingNodes
func (mmGetWorkingNodes *mNodeKeeperMockGetWorkingNodes) Inspect(f func()) *mNodeKeeperMockGetWorkingNodes {
	if mmGetWorkingNodes.mock.inspectFuncGetWorkingNodes != nil {
		mmGetWorkingNodes.mock.t.Fatalf("Inspect function is already set for NodeKeeperMock.GetWorkingNodes")
	}

	mmGetWorkingNodes.mock.inspectFuncGetWorkingNodes = f

	return mmGetWorkingNodes
}

// Return sets up results that will be returned by NodeKeeper.GetWorkingNodes
func (mmGetWorkingNodes *mNodeKeeperMockGetWorkingNodes) Return(na1 []insolar.NetworkNode) *NodeKeeperMock {
	if mmGetWorkingNodes.mock.funcGetWorkingNodes != nil {
		mmGetWorkingNodes.mock.t.Fatalf("NodeKeeperMock.GetWorkingNodes mock is already set by Set")
	}

	if mmGetWorkingNodes.defaultExpectation == nil {
		mmGetWorkingNodes.defaultExpectation = &NodeKeeperMockGetWorkingNodesExpectation{mock: mmGetWorkingNodes.mock}
	}
	mmGetWorkingNodes.defaultExpectation.results = &NodeKeeperMockGetWorkingNodesResults{na1}
	return mmGetWorkingNodes.mock
}

//Set uses given function f to mock the NodeKeeper.GetWorkingNodes method
func (mmGetWorkingNodes *mNodeKeeperMockGetWorkingNodes) Set(f func() (na1 []insolar.NetworkNode)) *NodeKeeperMock {
	if mmGetWorkingNodes.defaultExpectation != nil {
		mmGetWorkingNodes.mock.t.Fatalf("Default expectation is already set for the NodeKeeper.GetWorkingNodes method")
	}

	if len(mmGetWorkingNodes.expectations) > 0 {
		mmGetWorkingNodes.mock.t.Fatalf("Some expectations are already set for the NodeKeeper.GetWorkingNodes method")
	}

	mmGetWorkingNodes.mock.funcGetWorkingNodes = f
	return mmGetWorkingNodes.mock
}

// GetWorkingNodes implements network.NodeKeeper
func (mmGetWorkingNodes *NodeKeeperMock) GetWorkingNodes() (na1 []insolar.NetworkNode) {
	mm_atomic.AddUint64(&mmGetWorkingNodes.beforeGetWorkingNodesCounter, 1)
	defer mm_atomic.AddUint64(&mmGetWorkingNodes.afterGetWorkingNodesCounter, 1)

	if mmGetWorkingNodes.inspectFuncGetWorkingNodes != nil {
		mmGetWorkingNodes.inspectFuncGetWorkingNodes()
	}

	if mmGetWorkingNodes.GetWorkingNodesMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&mmGetWorkingNodes.GetWorkingNodesMock.defaultExpectation.Counter, 1)

		results := mmGetWorkingNodes.GetWorkingNodesMock.defaultExpectation.results
		if results == nil {
			mmGetWorkingNodes.t.Fatal("No results are set for the NodeKeeperMock.GetWorkingNodes")
		}
		return (*results).na1
	}
	if mmGetWorkingNodes.funcGetWorkingNodes != nil {
		return mmGetWorkingNodes.funcGetWorkingNodes()
	}
	mmGetWorkingNodes.t.Fatalf("Unexpected call to NodeKeeperMock.GetWorkingNodes.")
	return
}

// GetWorkingNodesAfterCounter returns a count of finished NodeKeeperMock.GetWorkingNodes invocations
func (mmGetWorkingNodes *NodeKeeperMock) GetWorkingNodesAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&mmGetWorkingNodes.afterGetWorkingNodesCounter)
}

// GetWorkingNodesBeforeCounter returns a count of NodeKeeperMock.GetWorkingNodes invocations
func (mmGetWorkingNodes *NodeKeeperMock) GetWorkingNodesBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&mmGetWorkingNodes.beforeGetWorkingNodesCounter)
}

// MinimockGetWorkingNodesDone returns true if the count of the GetWorkingNodes invocations corresponds
// the number of defined expectations
func (m *NodeKeeperMock) MinimockGetWorkingNodesDone() bool {
	for _, e := range m.GetWorkingNodesMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.GetWorkingNodesMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterGetWorkingNodesCounter) < 1 {
		return false
	}
	// if func was set then invocations count should be greater than zero
	if m.funcGetWorkingNodes != nil && mm_atomic.LoadUint64(&m.afterGetWorkingNodesCounter) < 1 {
		return false
	}
	return true
}

// MinimockGetWorkingNodesInspect logs each unmet expectation
func (m *NodeKeeperMock) MinimockGetWorkingNodesInspect() {
	for _, e := range m.GetWorkingNodesMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Error("Expected call to NodeKeeperMock.GetWorkingNodes")
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.GetWorkingNodesMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterGetWorkingNodesCounter) < 1 {
		m.t.Error("Expected call to NodeKeeperMock.GetWorkingNodes")
	}
	// if func was set then invocations count should be greater than zero
	if m.funcGetWorkingNodes != nil && mm_atomic.LoadUint64(&m.afterGetWorkingNodesCounter) < 1 {
		m.t.Error("Expected call to NodeKeeperMock.GetWorkingNodes")
	}
}

type mNodeKeeperMockMoveSyncToActive struct {
	mock               *NodeKeeperMock
	defaultExpectation *NodeKeeperMockMoveSyncToActiveExpectation
	expectations       []*NodeKeeperMockMoveSyncToActiveExpectation

	callArgs []*NodeKeeperMockMoveSyncToActiveParams
	mutex    sync.RWMutex
}

// NodeKeeperMockMoveSyncToActiveExpectation specifies expectation struct of the NodeKeeper.MoveSyncToActive
type NodeKeeperMockMoveSyncToActiveExpectation struct {
	mock   *NodeKeeperMock
	params *NodeKeeperMockMoveSyncToActiveParams

	Counter uint64
}

// NodeKeeperMockMoveSyncToActiveParams contains parameters of the NodeKeeper.MoveSyncToActive
type NodeKeeperMockMoveSyncToActiveParams struct {
	ctx    context.Context
	number insolar.PulseNumber
}

// Expect sets up expected params for NodeKeeper.MoveSyncToActive
func (mmMoveSyncToActive *mNodeKeeperMockMoveSyncToActive) Expect(ctx context.Context, number insolar.PulseNumber) *mNodeKeeperMockMoveSyncToActive {
	if mmMoveSyncToActive.mock.funcMoveSyncToActive != nil {
		mmMoveSyncToActive.mock.t.Fatalf("NodeKeeperMock.MoveSyncToActive mock is already set by Set")
	}

	if mmMoveSyncToActive.defaultExpectation == nil {
		mmMoveSyncToActive.defaultExpectation = &NodeKeeperMockMoveSyncToActiveExpectation{}
	}

	mmMoveSyncToActive.defaultExpectation.params = &NodeKeeperMockMoveSyncToActiveParams{ctx, number}
	for _, e := range mmMoveSyncToActive.expectations {
		if minimock.Equal(e.params, mmMoveSyncToActive.defaultExpectation.params) {
			mmMoveSyncToActive.mock.t.Fatalf("Expectation set by When has same params: %#v", *mmMoveSyncToActive.defaultExpectation.params)
		}
	}

	return mmMoveSyncToActive
}

// Inspect accepts an inspector function that has same arguments as the NodeKeeper.MoveSyncToActive
func (mmMoveSyncToActive *mNodeKeeperMockMoveSyncToActive) Inspect(f func(ctx context.Context, number insolar.PulseNumber)) *mNodeKeeperMockMoveSyncToActive {
	if mmMoveSyncToActive.mock.inspectFuncMoveSyncToActive != nil {
		mmMoveSyncToActive.mock.t.Fatalf("Inspect function is already set for NodeKeeperMock.MoveSyncToActive")
	}

	mmMoveSyncToActive.mock.inspectFuncMoveSyncToActive = f

	return mmMoveSyncToActive
}

// Return sets up results that will be returned by NodeKeeper.MoveSyncToActive
func (mmMoveSyncToActive *mNodeKeeperMockMoveSyncToActive) Return() *NodeKeeperMock {
	if mmMoveSyncToActive.mock.funcMoveSyncToActive != nil {
		mmMoveSyncToActive.mock.t.Fatalf("NodeKeeperMock.MoveSyncToActive mock is already set by Set")
	}

	if mmMoveSyncToActive.defaultExpectation == nil {
		mmMoveSyncToActive.defaultExpectation = &NodeKeeperMockMoveSyncToActiveExpectation{mock: mmMoveSyncToActive.mock}
	}

	return mmMoveSyncToActive.mock
}

//Set uses given function f to mock the NodeKeeper.MoveSyncToActive method
func (mmMoveSyncToActive *mNodeKeeperMockMoveSyncToActive) Set(f func(ctx context.Context, number insolar.PulseNumber)) *NodeKeeperMock {
	if mmMoveSyncToActive.defaultExpectation != nil {
		mmMoveSyncToActive.mock.t.Fatalf("Default expectation is already set for the NodeKeeper.MoveSyncToActive method")
	}

	if len(mmMoveSyncToActive.expectations) > 0 {
		mmMoveSyncToActive.mock.t.Fatalf("Some expectations are already set for the NodeKeeper.MoveSyncToActive method")
	}

	mmMoveSyncToActive.mock.funcMoveSyncToActive = f
	return mmMoveSyncToActive.mock
}

// MoveSyncToActive implements network.NodeKeeper
func (mmMoveSyncToActive *NodeKeeperMock) MoveSyncToActive(ctx context.Context, number insolar.PulseNumber) {
	mm_atomic.AddUint64(&mmMoveSyncToActive.beforeMoveSyncToActiveCounter, 1)
	defer mm_atomic.AddUint64(&mmMoveSyncToActive.afterMoveSyncToActiveCounter, 1)

	if mmMoveSyncToActive.inspectFuncMoveSyncToActive != nil {
		mmMoveSyncToActive.inspectFuncMoveSyncToActive(ctx, number)
	}

	params := &NodeKeeperMockMoveSyncToActiveParams{ctx, number}

	// Record call args
	mmMoveSyncToActive.MoveSyncToActiveMock.mutex.Lock()
	mmMoveSyncToActive.MoveSyncToActiveMock.callArgs = append(mmMoveSyncToActive.MoveSyncToActiveMock.callArgs, params)
	mmMoveSyncToActive.MoveSyncToActiveMock.mutex.Unlock()

	for _, e := range mmMoveSyncToActive.MoveSyncToActiveMock.expectations {
		if minimock.Equal(e.params, params) {
			mm_atomic.AddUint64(&e.Counter, 1)
			return
		}
	}

	if mmMoveSyncToActive.MoveSyncToActiveMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&mmMoveSyncToActive.MoveSyncToActiveMock.defaultExpectation.Counter, 1)
		want := mmMoveSyncToActive.MoveSyncToActiveMock.defaultExpectation.params
		got := NodeKeeperMockMoveSyncToActiveParams{ctx, number}
		if want != nil && !minimock.Equal(*want, got) {
			mmMoveSyncToActive.t.Errorf("NodeKeeperMock.MoveSyncToActive got unexpected parameters, want: %#v, got: %#v%s\n", *want, got, minimock.Diff(*want, got))
		}

		return

	}
	if mmMoveSyncToActive.funcMoveSyncToActive != nil {
		mmMoveSyncToActive.funcMoveSyncToActive(ctx, number)
		return
	}
	mmMoveSyncToActive.t.Fatalf("Unexpected call to NodeKeeperMock.MoveSyncToActive. %v %v", ctx, number)

}

// MoveSyncToActiveAfterCounter returns a count of finished NodeKeeperMock.MoveSyncToActive invocations
func (mmMoveSyncToActive *NodeKeeperMock) MoveSyncToActiveAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&mmMoveSyncToActive.afterMoveSyncToActiveCounter)
}

// MoveSyncToActiveBeforeCounter returns a count of NodeKeeperMock.MoveSyncToActive invocations
func (mmMoveSyncToActive *NodeKeeperMock) MoveSyncToActiveBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&mmMoveSyncToActive.beforeMoveSyncToActiveCounter)
}

// Calls returns a list of arguments used in each call to NodeKeeperMock.MoveSyncToActive.
// The list is in the same order as the calls were made (i.e. recent calls have a higher index)
func (mmMoveSyncToActive *mNodeKeeperMockMoveSyncToActive) Calls() []*NodeKeeperMockMoveSyncToActiveParams {
	mmMoveSyncToActive.mutex.RLock()

	argCopy := make([]*NodeKeeperMockMoveSyncToActiveParams, len(mmMoveSyncToActive.callArgs))
	copy(argCopy, mmMoveSyncToActive.callArgs)

	mmMoveSyncToActive.mutex.RUnlock()

	return argCopy
}

// MinimockMoveSyncToActiveDone returns true if the count of the MoveSyncToActive invocations corresponds
// the number of defined expectations
func (m *NodeKeeperMock) MinimockMoveSyncToActiveDone() bool {
	for _, e := range m.MoveSyncToActiveMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.MoveSyncToActiveMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterMoveSyncToActiveCounter) < 1 {
		return false
	}
	// if func was set then invocations count should be greater than zero
	if m.funcMoveSyncToActive != nil && mm_atomic.LoadUint64(&m.afterMoveSyncToActiveCounter) < 1 {
		return false
	}
	return true
}

// MinimockMoveSyncToActiveInspect logs each unmet expectation
func (m *NodeKeeperMock) MinimockMoveSyncToActiveInspect() {
	for _, e := range m.MoveSyncToActiveMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Errorf("Expected call to NodeKeeperMock.MoveSyncToActive with params: %#v", *e.params)
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.MoveSyncToActiveMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterMoveSyncToActiveCounter) < 1 {
		if m.MoveSyncToActiveMock.defaultExpectation.params == nil {
			m.t.Error("Expected call to NodeKeeperMock.MoveSyncToActive")
		} else {
			m.t.Errorf("Expected call to NodeKeeperMock.MoveSyncToActive with params: %#v", *m.MoveSyncToActiveMock.defaultExpectation.params)
		}
	}
	// if func was set then invocations count should be greater than zero
	if m.funcMoveSyncToActive != nil && mm_atomic.LoadUint64(&m.afterMoveSyncToActiveCounter) < 1 {
		m.t.Error("Expected call to NodeKeeperMock.MoveSyncToActive")
	}
}

type mNodeKeeperMockSetCloudHash struct {
	mock               *NodeKeeperMock
	defaultExpectation *NodeKeeperMockSetCloudHashExpectation
	expectations       []*NodeKeeperMockSetCloudHashExpectation

	callArgs []*NodeKeeperMockSetCloudHashParams
	mutex    sync.RWMutex
}

// NodeKeeperMockSetCloudHashExpectation specifies expectation struct of the NodeKeeper.SetCloudHash
type NodeKeeperMockSetCloudHashExpectation struct {
	mock   *NodeKeeperMock
	params *NodeKeeperMockSetCloudHashParams

	Counter uint64
}

// NodeKeeperMockSetCloudHashParams contains parameters of the NodeKeeper.SetCloudHash
type NodeKeeperMockSetCloudHashParams struct {
	ba1 []byte
}

// Expect sets up expected params for NodeKeeper.SetCloudHash
func (mmSetCloudHash *mNodeKeeperMockSetCloudHash) Expect(ba1 []byte) *mNodeKeeperMockSetCloudHash {
	if mmSetCloudHash.mock.funcSetCloudHash != nil {
		mmSetCloudHash.mock.t.Fatalf("NodeKeeperMock.SetCloudHash mock is already set by Set")
	}

	if mmSetCloudHash.defaultExpectation == nil {
		mmSetCloudHash.defaultExpectation = &NodeKeeperMockSetCloudHashExpectation{}
	}

	mmSetCloudHash.defaultExpectation.params = &NodeKeeperMockSetCloudHashParams{ba1}
	for _, e := range mmSetCloudHash.expectations {
		if minimock.Equal(e.params, mmSetCloudHash.defaultExpectation.params) {
			mmSetCloudHash.mock.t.Fatalf("Expectation set by When has same params: %#v", *mmSetCloudHash.defaultExpectation.params)
		}
	}

	return mmSetCloudHash
}

// Inspect accepts an inspector function that has same arguments as the NodeKeeper.SetCloudHash
func (mmSetCloudHash *mNodeKeeperMockSetCloudHash) Inspect(f func(ba1 []byte)) *mNodeKeeperMockSetCloudHash {
	if mmSetCloudHash.mock.inspectFuncSetCloudHash != nil {
		mmSetCloudHash.mock.t.Fatalf("Inspect function is already set for NodeKeeperMock.SetCloudHash")
	}

	mmSetCloudHash.mock.inspectFuncSetCloudHash = f

	return mmSetCloudHash
}

// Return sets up results that will be returned by NodeKeeper.SetCloudHash
func (mmSetCloudHash *mNodeKeeperMockSetCloudHash) Return() *NodeKeeperMock {
	if mmSetCloudHash.mock.funcSetCloudHash != nil {
		mmSetCloudHash.mock.t.Fatalf("NodeKeeperMock.SetCloudHash mock is already set by Set")
	}

	if mmSetCloudHash.defaultExpectation == nil {
		mmSetCloudHash.defaultExpectation = &NodeKeeperMockSetCloudHashExpectation{mock: mmSetCloudHash.mock}
	}

	return mmSetCloudHash.mock
}

//Set uses given function f to mock the NodeKeeper.SetCloudHash method
func (mmSetCloudHash *mNodeKeeperMockSetCloudHash) Set(f func(ba1 []byte)) *NodeKeeperMock {
	if mmSetCloudHash.defaultExpectation != nil {
		mmSetCloudHash.mock.t.Fatalf("Default expectation is already set for the NodeKeeper.SetCloudHash method")
	}

	if len(mmSetCloudHash.expectations) > 0 {
		mmSetCloudHash.mock.t.Fatalf("Some expectations are already set for the NodeKeeper.SetCloudHash method")
	}

	mmSetCloudHash.mock.funcSetCloudHash = f
	return mmSetCloudHash.mock
}

// SetCloudHash implements network.NodeKeeper
func (mmSetCloudHash *NodeKeeperMock) SetCloudHash(ba1 []byte) {
	mm_atomic.AddUint64(&mmSetCloudHash.beforeSetCloudHashCounter, 1)
	defer mm_atomic.AddUint64(&mmSetCloudHash.afterSetCloudHashCounter, 1)

	if mmSetCloudHash.inspectFuncSetCloudHash != nil {
		mmSetCloudHash.inspectFuncSetCloudHash(ba1)
	}

	params := &NodeKeeperMockSetCloudHashParams{ba1}

	// Record call args
	mmSetCloudHash.SetCloudHashMock.mutex.Lock()
	mmSetCloudHash.SetCloudHashMock.callArgs = append(mmSetCloudHash.SetCloudHashMock.callArgs, params)
	mmSetCloudHash.SetCloudHashMock.mutex.Unlock()

	for _, e := range mmSetCloudHash.SetCloudHashMock.expectations {
		if minimock.Equal(e.params, params) {
			mm_atomic.AddUint64(&e.Counter, 1)
			return
		}
	}

	if mmSetCloudHash.SetCloudHashMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&mmSetCloudHash.SetCloudHashMock.defaultExpectation.Counter, 1)
		want := mmSetCloudHash.SetCloudHashMock.defaultExpectation.params
		got := NodeKeeperMockSetCloudHashParams{ba1}
		if want != nil && !minimock.Equal(*want, got) {
			mmSetCloudHash.t.Errorf("NodeKeeperMock.SetCloudHash got unexpected parameters, want: %#v, got: %#v%s\n", *want, got, minimock.Diff(*want, got))
		}

		return

	}
	if mmSetCloudHash.funcSetCloudHash != nil {
		mmSetCloudHash.funcSetCloudHash(ba1)
		return
	}
	mmSetCloudHash.t.Fatalf("Unexpected call to NodeKeeperMock.SetCloudHash. %v", ba1)

}

// SetCloudHashAfterCounter returns a count of finished NodeKeeperMock.SetCloudHash invocations
func (mmSetCloudHash *NodeKeeperMock) SetCloudHashAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&mmSetCloudHash.afterSetCloudHashCounter)
}

// SetCloudHashBeforeCounter returns a count of NodeKeeperMock.SetCloudHash invocations
func (mmSetCloudHash *NodeKeeperMock) SetCloudHashBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&mmSetCloudHash.beforeSetCloudHashCounter)
}

// Calls returns a list of arguments used in each call to NodeKeeperMock.SetCloudHash.
// The list is in the same order as the calls were made (i.e. recent calls have a higher index)
func (mmSetCloudHash *mNodeKeeperMockSetCloudHash) Calls() []*NodeKeeperMockSetCloudHashParams {
	mmSetCloudHash.mutex.RLock()

	argCopy := make([]*NodeKeeperMockSetCloudHashParams, len(mmSetCloudHash.callArgs))
	copy(argCopy, mmSetCloudHash.callArgs)

	mmSetCloudHash.mutex.RUnlock()

	return argCopy
}

// MinimockSetCloudHashDone returns true if the count of the SetCloudHash invocations corresponds
// the number of defined expectations
func (m *NodeKeeperMock) MinimockSetCloudHashDone() bool {
	for _, e := range m.SetCloudHashMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.SetCloudHashMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterSetCloudHashCounter) < 1 {
		return false
	}
	// if func was set then invocations count should be greater than zero
	if m.funcSetCloudHash != nil && mm_atomic.LoadUint64(&m.afterSetCloudHashCounter) < 1 {
		return false
	}
	return true
}

// MinimockSetCloudHashInspect logs each unmet expectation
func (m *NodeKeeperMock) MinimockSetCloudHashInspect() {
	for _, e := range m.SetCloudHashMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Errorf("Expected call to NodeKeeperMock.SetCloudHash with params: %#v", *e.params)
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.SetCloudHashMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterSetCloudHashCounter) < 1 {
		if m.SetCloudHashMock.defaultExpectation.params == nil {
			m.t.Error("Expected call to NodeKeeperMock.SetCloudHash")
		} else {
			m.t.Errorf("Expected call to NodeKeeperMock.SetCloudHash with params: %#v", *m.SetCloudHashMock.defaultExpectation.params)
		}
	}
	// if func was set then invocations count should be greater than zero
	if m.funcSetCloudHash != nil && mm_atomic.LoadUint64(&m.afterSetCloudHashCounter) < 1 {
		m.t.Error("Expected call to NodeKeeperMock.SetCloudHash")
	}
}

type mNodeKeeperMockSetInitialSnapshot struct {
	mock               *NodeKeeperMock
	defaultExpectation *NodeKeeperMockSetInitialSnapshotExpectation
	expectations       []*NodeKeeperMockSetInitialSnapshotExpectation

	callArgs []*NodeKeeperMockSetInitialSnapshotParams
	mutex    sync.RWMutex
}

// NodeKeeperMockSetInitialSnapshotExpectation specifies expectation struct of the NodeKeeper.SetInitialSnapshot
type NodeKeeperMockSetInitialSnapshotExpectation struct {
	mock   *NodeKeeperMock
	params *NodeKeeperMockSetInitialSnapshotParams

	Counter uint64
}

// NodeKeeperMockSetInitialSnapshotParams contains parameters of the NodeKeeper.SetInitialSnapshot
type NodeKeeperMockSetInitialSnapshotParams struct {
	nodes []insolar.NetworkNode
}

// Expect sets up expected params for NodeKeeper.SetInitialSnapshot
func (mmSetInitialSnapshot *mNodeKeeperMockSetInitialSnapshot) Expect(nodes []insolar.NetworkNode) *mNodeKeeperMockSetInitialSnapshot {
	if mmSetInitialSnapshot.mock.funcSetInitialSnapshot != nil {
		mmSetInitialSnapshot.mock.t.Fatalf("NodeKeeperMock.SetInitialSnapshot mock is already set by Set")
	}

	if mmSetInitialSnapshot.defaultExpectation == nil {
		mmSetInitialSnapshot.defaultExpectation = &NodeKeeperMockSetInitialSnapshotExpectation{}
	}

	mmSetInitialSnapshot.defaultExpectation.params = &NodeKeeperMockSetInitialSnapshotParams{nodes}
	for _, e := range mmSetInitialSnapshot.expectations {
		if minimock.Equal(e.params, mmSetInitialSnapshot.defaultExpectation.params) {
			mmSetInitialSnapshot.mock.t.Fatalf("Expectation set by When has same params: %#v", *mmSetInitialSnapshot.defaultExpectation.params)
		}
	}

	return mmSetInitialSnapshot
}

// Inspect accepts an inspector function that has same arguments as the NodeKeeper.SetInitialSnapshot
func (mmSetInitialSnapshot *mNodeKeeperMockSetInitialSnapshot) Inspect(f func(nodes []insolar.NetworkNode)) *mNodeKeeperMockSetInitialSnapshot {
	if mmSetInitialSnapshot.mock.inspectFuncSetInitialSnapshot != nil {
		mmSetInitialSnapshot.mock.t.Fatalf("Inspect function is already set for NodeKeeperMock.SetInitialSnapshot")
	}

	mmSetInitialSnapshot.mock.inspectFuncSetInitialSnapshot = f

	return mmSetInitialSnapshot
}

// Return sets up results that will be returned by NodeKeeper.SetInitialSnapshot
func (mmSetInitialSnapshot *mNodeKeeperMockSetInitialSnapshot) Return() *NodeKeeperMock {
	if mmSetInitialSnapshot.mock.funcSetInitialSnapshot != nil {
		mmSetInitialSnapshot.mock.t.Fatalf("NodeKeeperMock.SetInitialSnapshot mock is already set by Set")
	}

	if mmSetInitialSnapshot.defaultExpectation == nil {
		mmSetInitialSnapshot.defaultExpectation = &NodeKeeperMockSetInitialSnapshotExpectation{mock: mmSetInitialSnapshot.mock}
	}

	return mmSetInitialSnapshot.mock
}

//Set uses given function f to mock the NodeKeeper.SetInitialSnapshot method
func (mmSetInitialSnapshot *mNodeKeeperMockSetInitialSnapshot) Set(f func(nodes []insolar.NetworkNode)) *NodeKeeperMock {
	if mmSetInitialSnapshot.defaultExpectation != nil {
		mmSetInitialSnapshot.mock.t.Fatalf("Default expectation is already set for the NodeKeeper.SetInitialSnapshot method")
	}

	if len(mmSetInitialSnapshot.expectations) > 0 {
		mmSetInitialSnapshot.mock.t.Fatalf("Some expectations are already set for the NodeKeeper.SetInitialSnapshot method")
	}

	mmSetInitialSnapshot.mock.funcSetInitialSnapshot = f
	return mmSetInitialSnapshot.mock
}

// SetInitialSnapshot implements network.NodeKeeper
func (mmSetInitialSnapshot *NodeKeeperMock) SetInitialSnapshot(nodes []insolar.NetworkNode) {
	mm_atomic.AddUint64(&mmSetInitialSnapshot.beforeSetInitialSnapshotCounter, 1)
	defer mm_atomic.AddUint64(&mmSetInitialSnapshot.afterSetInitialSnapshotCounter, 1)

	if mmSetInitialSnapshot.inspectFuncSetInitialSnapshot != nil {
		mmSetInitialSnapshot.inspectFuncSetInitialSnapshot(nodes)
	}

	params := &NodeKeeperMockSetInitialSnapshotParams{nodes}

	// Record call args
	mmSetInitialSnapshot.SetInitialSnapshotMock.mutex.Lock()
	mmSetInitialSnapshot.SetInitialSnapshotMock.callArgs = append(mmSetInitialSnapshot.SetInitialSnapshotMock.callArgs, params)
	mmSetInitialSnapshot.SetInitialSnapshotMock.mutex.Unlock()

	for _, e := range mmSetInitialSnapshot.SetInitialSnapshotMock.expectations {
		if minimock.Equal(e.params, params) {
			mm_atomic.AddUint64(&e.Counter, 1)
			return
		}
	}

	if mmSetInitialSnapshot.SetInitialSnapshotMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&mmSetInitialSnapshot.SetInitialSnapshotMock.defaultExpectation.Counter, 1)
		want := mmSetInitialSnapshot.SetInitialSnapshotMock.defaultExpectation.params
		got := NodeKeeperMockSetInitialSnapshotParams{nodes}
		if want != nil && !minimock.Equal(*want, got) {
			mmSetInitialSnapshot.t.Errorf("NodeKeeperMock.SetInitialSnapshot got unexpected parameters, want: %#v, got: %#v%s\n", *want, got, minimock.Diff(*want, got))
		}

		return

	}
	if mmSetInitialSnapshot.funcSetInitialSnapshot != nil {
		mmSetInitialSnapshot.funcSetInitialSnapshot(nodes)
		return
	}
	mmSetInitialSnapshot.t.Fatalf("Unexpected call to NodeKeeperMock.SetInitialSnapshot. %v", nodes)

}

// SetInitialSnapshotAfterCounter returns a count of finished NodeKeeperMock.SetInitialSnapshot invocations
func (mmSetInitialSnapshot *NodeKeeperMock) SetInitialSnapshotAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&mmSetInitialSnapshot.afterSetInitialSnapshotCounter)
}

// SetInitialSnapshotBeforeCounter returns a count of NodeKeeperMock.SetInitialSnapshot invocations
func (mmSetInitialSnapshot *NodeKeeperMock) SetInitialSnapshotBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&mmSetInitialSnapshot.beforeSetInitialSnapshotCounter)
}

// Calls returns a list of arguments used in each call to NodeKeeperMock.SetInitialSnapshot.
// The list is in the same order as the calls were made (i.e. recent calls have a higher index)
func (mmSetInitialSnapshot *mNodeKeeperMockSetInitialSnapshot) Calls() []*NodeKeeperMockSetInitialSnapshotParams {
	mmSetInitialSnapshot.mutex.RLock()

	argCopy := make([]*NodeKeeperMockSetInitialSnapshotParams, len(mmSetInitialSnapshot.callArgs))
	copy(argCopy, mmSetInitialSnapshot.callArgs)

	mmSetInitialSnapshot.mutex.RUnlock()

	return argCopy
}

// MinimockSetInitialSnapshotDone returns true if the count of the SetInitialSnapshot invocations corresponds
// the number of defined expectations
func (m *NodeKeeperMock) MinimockSetInitialSnapshotDone() bool {
	for _, e := range m.SetInitialSnapshotMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.SetInitialSnapshotMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterSetInitialSnapshotCounter) < 1 {
		return false
	}
	// if func was set then invocations count should be greater than zero
	if m.funcSetInitialSnapshot != nil && mm_atomic.LoadUint64(&m.afterSetInitialSnapshotCounter) < 1 {
		return false
	}
	return true
}

// MinimockSetInitialSnapshotInspect logs each unmet expectation
func (m *NodeKeeperMock) MinimockSetInitialSnapshotInspect() {
	for _, e := range m.SetInitialSnapshotMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Errorf("Expected call to NodeKeeperMock.SetInitialSnapshot with params: %#v", *e.params)
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.SetInitialSnapshotMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterSetInitialSnapshotCounter) < 1 {
		if m.SetInitialSnapshotMock.defaultExpectation.params == nil {
			m.t.Error("Expected call to NodeKeeperMock.SetInitialSnapshot")
		} else {
			m.t.Errorf("Expected call to NodeKeeperMock.SetInitialSnapshot with params: %#v", *m.SetInitialSnapshotMock.defaultExpectation.params)
		}
	}
	// if func was set then invocations count should be greater than zero
	if m.funcSetInitialSnapshot != nil && mm_atomic.LoadUint64(&m.afterSetInitialSnapshotCounter) < 1 {
		m.t.Error("Expected call to NodeKeeperMock.SetInitialSnapshot")
	}
}

type mNodeKeeperMockSync struct {
	mock               *NodeKeeperMock
	defaultExpectation *NodeKeeperMockSyncExpectation
	expectations       []*NodeKeeperMockSyncExpectation

	callArgs []*NodeKeeperMockSyncParams
	mutex    sync.RWMutex
}

// NodeKeeperMockSyncExpectation specifies expectation struct of the NodeKeeper.Sync
type NodeKeeperMockSyncExpectation struct {
	mock   *NodeKeeperMock
	params *NodeKeeperMockSyncParams

	Counter uint64
}

// NodeKeeperMockSyncParams contains parameters of the NodeKeeper.Sync
type NodeKeeperMockSyncParams struct {
	ctx context.Context
	na1 []insolar.NetworkNode
}

// Expect sets up expected params for NodeKeeper.Sync
func (mmSync *mNodeKeeperMockSync) Expect(ctx context.Context, na1 []insolar.NetworkNode) *mNodeKeeperMockSync {
	if mmSync.mock.funcSync != nil {
		mmSync.mock.t.Fatalf("NodeKeeperMock.Sync mock is already set by Set")
	}

	if mmSync.defaultExpectation == nil {
		mmSync.defaultExpectation = &NodeKeeperMockSyncExpectation{}
	}

	mmSync.defaultExpectation.params = &NodeKeeperMockSyncParams{ctx, na1}
	for _, e := range mmSync.expectations {
		if minimock.Equal(e.params, mmSync.defaultExpectation.params) {
			mmSync.mock.t.Fatalf("Expectation set by When has same params: %#v", *mmSync.defaultExpectation.params)
		}
	}

	return mmSync
}

// Inspect accepts an inspector function that has same arguments as the NodeKeeper.Sync
func (mmSync *mNodeKeeperMockSync) Inspect(f func(ctx context.Context, na1 []insolar.NetworkNode)) *mNodeKeeperMockSync {
	if mmSync.mock.inspectFuncSync != nil {
		mmSync.mock.t.Fatalf("Inspect function is already set for NodeKeeperMock.Sync")
	}

	mmSync.mock.inspectFuncSync = f

	return mmSync
}

// Return sets up results that will be returned by NodeKeeper.Sync
func (mmSync *mNodeKeeperMockSync) Return() *NodeKeeperMock {
	if mmSync.mock.funcSync != nil {
		mmSync.mock.t.Fatalf("NodeKeeperMock.Sync mock is already set by Set")
	}

	if mmSync.defaultExpectation == nil {
		mmSync.defaultExpectation = &NodeKeeperMockSyncExpectation{mock: mmSync.mock}
	}

	return mmSync.mock
}

//Set uses given function f to mock the NodeKeeper.Sync method
func (mmSync *mNodeKeeperMockSync) Set(f func(ctx context.Context, na1 []insolar.NetworkNode)) *NodeKeeperMock {
	if mmSync.defaultExpectation != nil {
		mmSync.mock.t.Fatalf("Default expectation is already set for the NodeKeeper.Sync method")
	}

	if len(mmSync.expectations) > 0 {
		mmSync.mock.t.Fatalf("Some expectations are already set for the NodeKeeper.Sync method")
	}

	mmSync.mock.funcSync = f
	return mmSync.mock
}

// Sync implements network.NodeKeeper
func (mmSync *NodeKeeperMock) Sync(ctx context.Context, na1 []insolar.NetworkNode) {
	mm_atomic.AddUint64(&mmSync.beforeSyncCounter, 1)
	defer mm_atomic.AddUint64(&mmSync.afterSyncCounter, 1)

	if mmSync.inspectFuncSync != nil {
		mmSync.inspectFuncSync(ctx, na1)
	}

	params := &NodeKeeperMockSyncParams{ctx, na1}

	// Record call args
	mmSync.SyncMock.mutex.Lock()
	mmSync.SyncMock.callArgs = append(mmSync.SyncMock.callArgs, params)
	mmSync.SyncMock.mutex.Unlock()

	for _, e := range mmSync.SyncMock.expectations {
		if minimock.Equal(e.params, params) {
			mm_atomic.AddUint64(&e.Counter, 1)
			return
		}
	}

	if mmSync.SyncMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&mmSync.SyncMock.defaultExpectation.Counter, 1)
		want := mmSync.SyncMock.defaultExpectation.params
		got := NodeKeeperMockSyncParams{ctx, na1}
		if want != nil && !minimock.Equal(*want, got) {
			mmSync.t.Errorf("NodeKeeperMock.Sync got unexpected parameters, want: %#v, got: %#v%s\n", *want, got, minimock.Diff(*want, got))
		}

		return

	}
	if mmSync.funcSync != nil {
		mmSync.funcSync(ctx, na1)
		return
	}
	mmSync.t.Fatalf("Unexpected call to NodeKeeperMock.Sync. %v %v", ctx, na1)

}

// SyncAfterCounter returns a count of finished NodeKeeperMock.Sync invocations
func (mmSync *NodeKeeperMock) SyncAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&mmSync.afterSyncCounter)
}

// SyncBeforeCounter returns a count of NodeKeeperMock.Sync invocations
func (mmSync *NodeKeeperMock) SyncBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&mmSync.beforeSyncCounter)
}

// Calls returns a list of arguments used in each call to NodeKeeperMock.Sync.
// The list is in the same order as the calls were made (i.e. recent calls have a higher index)
func (mmSync *mNodeKeeperMockSync) Calls() []*NodeKeeperMockSyncParams {
	mmSync.mutex.RLock()

	argCopy := make([]*NodeKeeperMockSyncParams, len(mmSync.callArgs))
	copy(argCopy, mmSync.callArgs)

	mmSync.mutex.RUnlock()

	return argCopy
}

// MinimockSyncDone returns true if the count of the Sync invocations corresponds
// the number of defined expectations
func (m *NodeKeeperMock) MinimockSyncDone() bool {
	for _, e := range m.SyncMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.SyncMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterSyncCounter) < 1 {
		return false
	}
	// if func was set then invocations count should be greater than zero
	if m.funcSync != nil && mm_atomic.LoadUint64(&m.afterSyncCounter) < 1 {
		return false
	}
	return true
}

// MinimockSyncInspect logs each unmet expectation
func (m *NodeKeeperMock) MinimockSyncInspect() {
	for _, e := range m.SyncMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Errorf("Expected call to NodeKeeperMock.Sync with params: %#v", *e.params)
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.SyncMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterSyncCounter) < 1 {
		if m.SyncMock.defaultExpectation.params == nil {
			m.t.Error("Expected call to NodeKeeperMock.Sync")
		} else {
			m.t.Errorf("Expected call to NodeKeeperMock.Sync with params: %#v", *m.SyncMock.defaultExpectation.params)
		}
	}
	// if func was set then invocations count should be greater than zero
	if m.funcSync != nil && mm_atomic.LoadUint64(&m.afterSyncCounter) < 1 {
		m.t.Error("Expected call to NodeKeeperMock.Sync")
	}
}

// MinimockFinish checks that all mocked methods have been called the expected number of times
func (m *NodeKeeperMock) MinimockFinish() {
	if !m.minimockDone() {
		m.MinimockGetAccessorInspect()

		m.MinimockGetCloudHashInspect()

		m.MinimockGetOriginInspect()

		m.MinimockGetSnapshotCopyInspect()

		m.MinimockGetWorkingNodeInspect()

		m.MinimockGetWorkingNodesInspect()

		m.MinimockMoveSyncToActiveInspect()

		m.MinimockSetCloudHashInspect()

		m.MinimockSetInitialSnapshotInspect()

		m.MinimockSyncInspect()
		m.t.FailNow()
	}
}

// MinimockWait waits for all mocked methods to be called the expected number of times
func (m *NodeKeeperMock) MinimockWait(timeout mm_time.Duration) {
	timeoutCh := mm_time.After(timeout)
	for {
		if m.minimockDone() {
			return
		}
		select {
		case <-timeoutCh:
			m.MinimockFinish()
			return
		case <-mm_time.After(10 * mm_time.Millisecond):
		}
	}
}

func (m *NodeKeeperMock) minimockDone() bool {
	done := true
	return done &&
		m.MinimockGetAccessorDone() &&
		m.MinimockGetCloudHashDone() &&
		m.MinimockGetOriginDone() &&
		m.MinimockGetSnapshotCopyDone() &&
		m.MinimockGetWorkingNodeDone() &&
		m.MinimockGetWorkingNodesDone() &&
		m.MinimockMoveSyncToActiveDone() &&
		m.MinimockSetCloudHashDone() &&
		m.MinimockSetInitialSnapshotDone() &&
		m.MinimockSyncDone()
}
