package network

// Code generated by http://github.com/gojuno/minimock (dev). DO NOT EDIT.

import (
	"context"
	"sync"
	mm_atomic "sync/atomic"
	mm_time "time"

	"github.com/gojuno/minimock"
	"github.com/insolar/insolar/insolar"
	"github.com/insolar/insolar/network/node"
)

// SnapshotAccessorMock implements storage.SnapshotAccessor
type SnapshotAccessorMock struct {
	t minimock.Tester

	funcForPulseNumber          func(ctx context.Context, p1 insolar.PulseNumber) (sp1 *node.Snapshot, err error)
	inspectFuncForPulseNumber   func(ctx context.Context, p1 insolar.PulseNumber)
	afterForPulseNumberCounter  uint64
	beforeForPulseNumberCounter uint64
	ForPulseNumberMock          mSnapshotAccessorMockForPulseNumber

	funcLatest          func(ctx context.Context) (s1 node.Snapshot, err error)
	inspectFuncLatest   func(ctx context.Context)
	afterLatestCounter  uint64
	beforeLatestCounter uint64
	LatestMock          mSnapshotAccessorMockLatest
}

// NewSnapshotAccessorMock returns a mock for storage.SnapshotAccessor
func NewSnapshotAccessorMock(t minimock.Tester) *SnapshotAccessorMock {
	m := &SnapshotAccessorMock{t: t}
	if controller, ok := t.(minimock.MockController); ok {
		controller.RegisterMocker(m)
	}

	m.ForPulseNumberMock = mSnapshotAccessorMockForPulseNumber{mock: m}
	m.ForPulseNumberMock.callArgs = []*SnapshotAccessorMockForPulseNumberParams{}

	m.LatestMock = mSnapshotAccessorMockLatest{mock: m}
	m.LatestMock.callArgs = []*SnapshotAccessorMockLatestParams{}

	return m
}

type mSnapshotAccessorMockForPulseNumber struct {
	mock               *SnapshotAccessorMock
	defaultExpectation *SnapshotAccessorMockForPulseNumberExpectation
	expectations       []*SnapshotAccessorMockForPulseNumberExpectation

	callArgs []*SnapshotAccessorMockForPulseNumberParams
	mutex    sync.RWMutex
}

// SnapshotAccessorMockForPulseNumberExpectation specifies expectation struct of the SnapshotAccessor.ForPulseNumber
type SnapshotAccessorMockForPulseNumberExpectation struct {
	mock    *SnapshotAccessorMock
	params  *SnapshotAccessorMockForPulseNumberParams
	results *SnapshotAccessorMockForPulseNumberResults
	Counter uint64
}

// SnapshotAccessorMockForPulseNumberParams contains parameters of the SnapshotAccessor.ForPulseNumber
type SnapshotAccessorMockForPulseNumberParams struct {
	ctx context.Context
	p1  insolar.PulseNumber
}

// SnapshotAccessorMockForPulseNumberResults contains results of the SnapshotAccessor.ForPulseNumber
type SnapshotAccessorMockForPulseNumberResults struct {
	sp1 *node.Snapshot
	err error
}

// Expect sets up expected params for SnapshotAccessor.ForPulseNumber
func (mmForPulseNumber *mSnapshotAccessorMockForPulseNumber) Expect(ctx context.Context, p1 insolar.PulseNumber) *mSnapshotAccessorMockForPulseNumber {
	if mmForPulseNumber.mock.funcForPulseNumber != nil {
		mmForPulseNumber.mock.t.Fatalf("SnapshotAccessorMock.ForPulseNumber mock is already set by Set")
	}

	if mmForPulseNumber.defaultExpectation == nil {
		mmForPulseNumber.defaultExpectation = &SnapshotAccessorMockForPulseNumberExpectation{}
	}

	mmForPulseNumber.defaultExpectation.params = &SnapshotAccessorMockForPulseNumberParams{ctx, p1}
	for _, e := range mmForPulseNumber.expectations {
		if minimock.Equal(e.params, mmForPulseNumber.defaultExpectation.params) {
			mmForPulseNumber.mock.t.Fatalf("Expectation set by When has same params: %#v", *mmForPulseNumber.defaultExpectation.params)
		}
	}

	return mmForPulseNumber
}

// Inspect accepts an inspector function that has same arguments as the SnapshotAccessor.ForPulseNumber
func (mmForPulseNumber *mSnapshotAccessorMockForPulseNumber) Inspect(f func(ctx context.Context, p1 insolar.PulseNumber)) *mSnapshotAccessorMockForPulseNumber {
	if mmForPulseNumber.mock.inspectFuncForPulseNumber != nil {
		mmForPulseNumber.mock.t.Fatalf("Inspect function is already set for SnapshotAccessorMock.ForPulseNumber")
	}

	mmForPulseNumber.mock.inspectFuncForPulseNumber = f

	return mmForPulseNumber
}

// Return sets up results that will be returned by SnapshotAccessor.ForPulseNumber
func (mmForPulseNumber *mSnapshotAccessorMockForPulseNumber) Return(sp1 *node.Snapshot, err error) *SnapshotAccessorMock {
	if mmForPulseNumber.mock.funcForPulseNumber != nil {
		mmForPulseNumber.mock.t.Fatalf("SnapshotAccessorMock.ForPulseNumber mock is already set by Set")
	}

	if mmForPulseNumber.defaultExpectation == nil {
		mmForPulseNumber.defaultExpectation = &SnapshotAccessorMockForPulseNumberExpectation{mock: mmForPulseNumber.mock}
	}
	mmForPulseNumber.defaultExpectation.results = &SnapshotAccessorMockForPulseNumberResults{sp1, err}
	return mmForPulseNumber.mock
}

//Set uses given function f to mock the SnapshotAccessor.ForPulseNumber method
func (mmForPulseNumber *mSnapshotAccessorMockForPulseNumber) Set(f func(ctx context.Context, p1 insolar.PulseNumber) (sp1 *node.Snapshot, err error)) *SnapshotAccessorMock {
	if mmForPulseNumber.defaultExpectation != nil {
		mmForPulseNumber.mock.t.Fatalf("Default expectation is already set for the SnapshotAccessor.ForPulseNumber method")
	}

	if len(mmForPulseNumber.expectations) > 0 {
		mmForPulseNumber.mock.t.Fatalf("Some expectations are already set for the SnapshotAccessor.ForPulseNumber method")
	}

	mmForPulseNumber.mock.funcForPulseNumber = f
	return mmForPulseNumber.mock
}

// When sets expectation for the SnapshotAccessor.ForPulseNumber which will trigger the result defined by the following
// Then helper
func (mmForPulseNumber *mSnapshotAccessorMockForPulseNumber) When(ctx context.Context, p1 insolar.PulseNumber) *SnapshotAccessorMockForPulseNumberExpectation {
	if mmForPulseNumber.mock.funcForPulseNumber != nil {
		mmForPulseNumber.mock.t.Fatalf("SnapshotAccessorMock.ForPulseNumber mock is already set by Set")
	}

	expectation := &SnapshotAccessorMockForPulseNumberExpectation{
		mock:   mmForPulseNumber.mock,
		params: &SnapshotAccessorMockForPulseNumberParams{ctx, p1},
	}
	mmForPulseNumber.expectations = append(mmForPulseNumber.expectations, expectation)
	return expectation
}

// Then sets up SnapshotAccessor.ForPulseNumber return parameters for the expectation previously defined by the When method
func (e *SnapshotAccessorMockForPulseNumberExpectation) Then(sp1 *node.Snapshot, err error) *SnapshotAccessorMock {
	e.results = &SnapshotAccessorMockForPulseNumberResults{sp1, err}
	return e.mock
}

// ForPulseNumber implements storage.SnapshotAccessor
func (mmForPulseNumber *SnapshotAccessorMock) ForPulseNumber(ctx context.Context, p1 insolar.PulseNumber) (sp1 *node.Snapshot, err error) {
	mm_atomic.AddUint64(&mmForPulseNumber.beforeForPulseNumberCounter, 1)
	defer mm_atomic.AddUint64(&mmForPulseNumber.afterForPulseNumberCounter, 1)

	if mmForPulseNumber.inspectFuncForPulseNumber != nil {
		mmForPulseNumber.inspectFuncForPulseNumber(ctx, p1)
	}

	params := &SnapshotAccessorMockForPulseNumberParams{ctx, p1}

	// Record call args
	mmForPulseNumber.ForPulseNumberMock.mutex.Lock()
	mmForPulseNumber.ForPulseNumberMock.callArgs = append(mmForPulseNumber.ForPulseNumberMock.callArgs, params)
	mmForPulseNumber.ForPulseNumberMock.mutex.Unlock()

	for _, e := range mmForPulseNumber.ForPulseNumberMock.expectations {
		if minimock.Equal(e.params, params) {
			mm_atomic.AddUint64(&e.Counter, 1)
			return e.results.sp1, e.results.err
		}
	}

	if mmForPulseNumber.ForPulseNumberMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&mmForPulseNumber.ForPulseNumberMock.defaultExpectation.Counter, 1)
		want := mmForPulseNumber.ForPulseNumberMock.defaultExpectation.params
		got := SnapshotAccessorMockForPulseNumberParams{ctx, p1}
		if want != nil && !minimock.Equal(*want, got) {
			mmForPulseNumber.t.Errorf("SnapshotAccessorMock.ForPulseNumber got unexpected parameters, want: %#v, got: %#v%s\n", *want, got, minimock.Diff(*want, got))
		}

		results := mmForPulseNumber.ForPulseNumberMock.defaultExpectation.results
		if results == nil {
			mmForPulseNumber.t.Fatal("No results are set for the SnapshotAccessorMock.ForPulseNumber")
		}
		return (*results).sp1, (*results).err
	}
	if mmForPulseNumber.funcForPulseNumber != nil {
		return mmForPulseNumber.funcForPulseNumber(ctx, p1)
	}
	mmForPulseNumber.t.Fatalf("Unexpected call to SnapshotAccessorMock.ForPulseNumber. %v %v", ctx, p1)
	return
}

// ForPulseNumberAfterCounter returns a count of finished SnapshotAccessorMock.ForPulseNumber invocations
func (mmForPulseNumber *SnapshotAccessorMock) ForPulseNumberAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&mmForPulseNumber.afterForPulseNumberCounter)
}

// ForPulseNumberBeforeCounter returns a count of SnapshotAccessorMock.ForPulseNumber invocations
func (mmForPulseNumber *SnapshotAccessorMock) ForPulseNumberBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&mmForPulseNumber.beforeForPulseNumberCounter)
}

// Calls returns a list of arguments used in each call to SnapshotAccessorMock.ForPulseNumber.
// The list is in the same order as the calls were made (i.e. recent calls have a higher index)
func (mmForPulseNumber *mSnapshotAccessorMockForPulseNumber) Calls() []*SnapshotAccessorMockForPulseNumberParams {
	mmForPulseNumber.mutex.RLock()

	argCopy := make([]*SnapshotAccessorMockForPulseNumberParams, len(mmForPulseNumber.callArgs))
	copy(argCopy, mmForPulseNumber.callArgs)

	mmForPulseNumber.mutex.RUnlock()

	return argCopy
}

// MinimockForPulseNumberDone returns true if the count of the ForPulseNumber invocations corresponds
// the number of defined expectations
func (m *SnapshotAccessorMock) MinimockForPulseNumberDone() bool {
	for _, e := range m.ForPulseNumberMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.ForPulseNumberMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterForPulseNumberCounter) < 1 {
		return false
	}
	// if func was set then invocations count should be greater than zero
	if m.funcForPulseNumber != nil && mm_atomic.LoadUint64(&m.afterForPulseNumberCounter) < 1 {
		return false
	}
	return true
}

// MinimockForPulseNumberInspect logs each unmet expectation
func (m *SnapshotAccessorMock) MinimockForPulseNumberInspect() {
	for _, e := range m.ForPulseNumberMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Errorf("Expected call to SnapshotAccessorMock.ForPulseNumber with params: %#v", *e.params)
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.ForPulseNumberMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterForPulseNumberCounter) < 1 {
		if m.ForPulseNumberMock.defaultExpectation.params == nil {
			m.t.Error("Expected call to SnapshotAccessorMock.ForPulseNumber")
		} else {
			m.t.Errorf("Expected call to SnapshotAccessorMock.ForPulseNumber with params: %#v", *m.ForPulseNumberMock.defaultExpectation.params)
		}
	}
	// if func was set then invocations count should be greater than zero
	if m.funcForPulseNumber != nil && mm_atomic.LoadUint64(&m.afterForPulseNumberCounter) < 1 {
		m.t.Error("Expected call to SnapshotAccessorMock.ForPulseNumber")
	}
}

type mSnapshotAccessorMockLatest struct {
	mock               *SnapshotAccessorMock
	defaultExpectation *SnapshotAccessorMockLatestExpectation
	expectations       []*SnapshotAccessorMockLatestExpectation

	callArgs []*SnapshotAccessorMockLatestParams
	mutex    sync.RWMutex
}

// SnapshotAccessorMockLatestExpectation specifies expectation struct of the SnapshotAccessor.Latest
type SnapshotAccessorMockLatestExpectation struct {
	mock    *SnapshotAccessorMock
	params  *SnapshotAccessorMockLatestParams
	results *SnapshotAccessorMockLatestResults
	Counter uint64
}

// SnapshotAccessorMockLatestParams contains parameters of the SnapshotAccessor.Latest
type SnapshotAccessorMockLatestParams struct {
	ctx context.Context
}

// SnapshotAccessorMockLatestResults contains results of the SnapshotAccessor.Latest
type SnapshotAccessorMockLatestResults struct {
	s1  node.Snapshot
	err error
}

// Expect sets up expected params for SnapshotAccessor.Latest
func (mmLatest *mSnapshotAccessorMockLatest) Expect(ctx context.Context) *mSnapshotAccessorMockLatest {
	if mmLatest.mock.funcLatest != nil {
		mmLatest.mock.t.Fatalf("SnapshotAccessorMock.Latest mock is already set by Set")
	}

	if mmLatest.defaultExpectation == nil {
		mmLatest.defaultExpectation = &SnapshotAccessorMockLatestExpectation{}
	}

	mmLatest.defaultExpectation.params = &SnapshotAccessorMockLatestParams{ctx}
	for _, e := range mmLatest.expectations {
		if minimock.Equal(e.params, mmLatest.defaultExpectation.params) {
			mmLatest.mock.t.Fatalf("Expectation set by When has same params: %#v", *mmLatest.defaultExpectation.params)
		}
	}

	return mmLatest
}

// Inspect accepts an inspector function that has same arguments as the SnapshotAccessor.Latest
func (mmLatest *mSnapshotAccessorMockLatest) Inspect(f func(ctx context.Context)) *mSnapshotAccessorMockLatest {
	if mmLatest.mock.inspectFuncLatest != nil {
		mmLatest.mock.t.Fatalf("Inspect function is already set for SnapshotAccessorMock.Latest")
	}

	mmLatest.mock.inspectFuncLatest = f

	return mmLatest
}

// Return sets up results that will be returned by SnapshotAccessor.Latest
func (mmLatest *mSnapshotAccessorMockLatest) Return(s1 node.Snapshot, err error) *SnapshotAccessorMock {
	if mmLatest.mock.funcLatest != nil {
		mmLatest.mock.t.Fatalf("SnapshotAccessorMock.Latest mock is already set by Set")
	}

	if mmLatest.defaultExpectation == nil {
		mmLatest.defaultExpectation = &SnapshotAccessorMockLatestExpectation{mock: mmLatest.mock}
	}
	mmLatest.defaultExpectation.results = &SnapshotAccessorMockLatestResults{s1, err}
	return mmLatest.mock
}

//Set uses given function f to mock the SnapshotAccessor.Latest method
func (mmLatest *mSnapshotAccessorMockLatest) Set(f func(ctx context.Context) (s1 node.Snapshot, err error)) *SnapshotAccessorMock {
	if mmLatest.defaultExpectation != nil {
		mmLatest.mock.t.Fatalf("Default expectation is already set for the SnapshotAccessor.Latest method")
	}

	if len(mmLatest.expectations) > 0 {
		mmLatest.mock.t.Fatalf("Some expectations are already set for the SnapshotAccessor.Latest method")
	}

	mmLatest.mock.funcLatest = f
	return mmLatest.mock
}

// When sets expectation for the SnapshotAccessor.Latest which will trigger the result defined by the following
// Then helper
func (mmLatest *mSnapshotAccessorMockLatest) When(ctx context.Context) *SnapshotAccessorMockLatestExpectation {
	if mmLatest.mock.funcLatest != nil {
		mmLatest.mock.t.Fatalf("SnapshotAccessorMock.Latest mock is already set by Set")
	}

	expectation := &SnapshotAccessorMockLatestExpectation{
		mock:   mmLatest.mock,
		params: &SnapshotAccessorMockLatestParams{ctx},
	}
	mmLatest.expectations = append(mmLatest.expectations, expectation)
	return expectation
}

// Then sets up SnapshotAccessor.Latest return parameters for the expectation previously defined by the When method
func (e *SnapshotAccessorMockLatestExpectation) Then(s1 node.Snapshot, err error) *SnapshotAccessorMock {
	e.results = &SnapshotAccessorMockLatestResults{s1, err}
	return e.mock
}

// Latest implements storage.SnapshotAccessor
func (mmLatest *SnapshotAccessorMock) Latest(ctx context.Context) (s1 node.Snapshot, err error) {
	mm_atomic.AddUint64(&mmLatest.beforeLatestCounter, 1)
	defer mm_atomic.AddUint64(&mmLatest.afterLatestCounter, 1)

	if mmLatest.inspectFuncLatest != nil {
		mmLatest.inspectFuncLatest(ctx)
	}

	params := &SnapshotAccessorMockLatestParams{ctx}

	// Record call args
	mmLatest.LatestMock.mutex.Lock()
	mmLatest.LatestMock.callArgs = append(mmLatest.LatestMock.callArgs, params)
	mmLatest.LatestMock.mutex.Unlock()

	for _, e := range mmLatest.LatestMock.expectations {
		if minimock.Equal(e.params, params) {
			mm_atomic.AddUint64(&e.Counter, 1)
			return e.results.s1, e.results.err
		}
	}

	if mmLatest.LatestMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&mmLatest.LatestMock.defaultExpectation.Counter, 1)
		want := mmLatest.LatestMock.defaultExpectation.params
		got := SnapshotAccessorMockLatestParams{ctx}
		if want != nil && !minimock.Equal(*want, got) {
			mmLatest.t.Errorf("SnapshotAccessorMock.Latest got unexpected parameters, want: %#v, got: %#v%s\n", *want, got, minimock.Diff(*want, got))
		}

		results := mmLatest.LatestMock.defaultExpectation.results
		if results == nil {
			mmLatest.t.Fatal("No results are set for the SnapshotAccessorMock.Latest")
		}
		return (*results).s1, (*results).err
	}
	if mmLatest.funcLatest != nil {
		return mmLatest.funcLatest(ctx)
	}
	mmLatest.t.Fatalf("Unexpected call to SnapshotAccessorMock.Latest. %v", ctx)
	return
}

// LatestAfterCounter returns a count of finished SnapshotAccessorMock.Latest invocations
func (mmLatest *SnapshotAccessorMock) LatestAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&mmLatest.afterLatestCounter)
}

// LatestBeforeCounter returns a count of SnapshotAccessorMock.Latest invocations
func (mmLatest *SnapshotAccessorMock) LatestBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&mmLatest.beforeLatestCounter)
}

// Calls returns a list of arguments used in each call to SnapshotAccessorMock.Latest.
// The list is in the same order as the calls were made (i.e. recent calls have a higher index)
func (mmLatest *mSnapshotAccessorMockLatest) Calls() []*SnapshotAccessorMockLatestParams {
	mmLatest.mutex.RLock()

	argCopy := make([]*SnapshotAccessorMockLatestParams, len(mmLatest.callArgs))
	copy(argCopy, mmLatest.callArgs)

	mmLatest.mutex.RUnlock()

	return argCopy
}

// MinimockLatestDone returns true if the count of the Latest invocations corresponds
// the number of defined expectations
func (m *SnapshotAccessorMock) MinimockLatestDone() bool {
	for _, e := range m.LatestMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.LatestMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterLatestCounter) < 1 {
		return false
	}
	// if func was set then invocations count should be greater than zero
	if m.funcLatest != nil && mm_atomic.LoadUint64(&m.afterLatestCounter) < 1 {
		return false
	}
	return true
}

// MinimockLatestInspect logs each unmet expectation
func (m *SnapshotAccessorMock) MinimockLatestInspect() {
	for _, e := range m.LatestMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Errorf("Expected call to SnapshotAccessorMock.Latest with params: %#v", *e.params)
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.LatestMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterLatestCounter) < 1 {
		if m.LatestMock.defaultExpectation.params == nil {
			m.t.Error("Expected call to SnapshotAccessorMock.Latest")
		} else {
			m.t.Errorf("Expected call to SnapshotAccessorMock.Latest with params: %#v", *m.LatestMock.defaultExpectation.params)
		}
	}
	// if func was set then invocations count should be greater than zero
	if m.funcLatest != nil && mm_atomic.LoadUint64(&m.afterLatestCounter) < 1 {
		m.t.Error("Expected call to SnapshotAccessorMock.Latest")
	}
}

// MinimockFinish checks that all mocked methods have been called the expected number of times
func (m *SnapshotAccessorMock) MinimockFinish() {
	if !m.minimockDone() {
		m.MinimockForPulseNumberInspect()

		m.MinimockLatestInspect()
		m.t.FailNow()
	}
}

// MinimockWait waits for all mocked methods to be called the expected number of times
func (m *SnapshotAccessorMock) MinimockWait(timeout mm_time.Duration) {
	timeoutCh := mm_time.After(timeout)
	for {
		if m.minimockDone() {
			return
		}
		select {
		case <-timeoutCh:
			m.MinimockFinish()
			return
		case <-mm_time.After(10 * mm_time.Millisecond):
		}
	}
}

func (m *SnapshotAccessorMock) minimockDone() bool {
	done := true
	return done &&
		m.MinimockForPulseNumberDone() &&
		m.MinimockLatestDone()
}
