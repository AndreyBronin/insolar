package network

// Code generated by http://github.com/gojuno/minimock (dev). DO NOT EDIT.

import (
	"sync"
	mm_atomic "sync/atomic"
	mm_time "time"

	"github.com/gojuno/minimock"
	mm_network "github.com/insolar/insolar/network"
)

// GatewayerMock implements network.Gatewayer
type GatewayerMock struct {
	t minimock.Tester

	funcGateway          func() (g1 mm_network.Gateway)
	inspectFuncGateway   func()
	afterGatewayCounter  uint64
	beforeGatewayCounter uint64
	GatewayMock          mGatewayerMockGateway

	funcSetGateway          func(g1 mm_network.Gateway)
	inspectFuncSetGateway   func(g1 mm_network.Gateway)
	afterSetGatewayCounter  uint64
	beforeSetGatewayCounter uint64
	SetGatewayMock          mGatewayerMockSetGateway
}

// NewGatewayerMock returns a mock for network.Gatewayer
func NewGatewayerMock(t minimock.Tester) *GatewayerMock {
	m := &GatewayerMock{t: t}
	if controller, ok := t.(minimock.MockController); ok {
		controller.RegisterMocker(m)
	}

	m.GatewayMock = mGatewayerMockGateway{mock: m}

	m.SetGatewayMock = mGatewayerMockSetGateway{mock: m}
	m.SetGatewayMock.callArgs = []*GatewayerMockSetGatewayParams{}

	return m
}

type mGatewayerMockGateway struct {
	mock               *GatewayerMock
	defaultExpectation *GatewayerMockGatewayExpectation
	expectations       []*GatewayerMockGatewayExpectation
}

// GatewayerMockGatewayExpectation specifies expectation struct of the Gatewayer.Gateway
type GatewayerMockGatewayExpectation struct {
	mock *GatewayerMock

	results *GatewayerMockGatewayResults
	Counter uint64
}

// GatewayerMockGatewayResults contains results of the Gatewayer.Gateway
type GatewayerMockGatewayResults struct {
	g1 mm_network.Gateway
}

// Expect sets up expected params for Gatewayer.Gateway
func (mmGateway *mGatewayerMockGateway) Expect() *mGatewayerMockGateway {
	if mmGateway.mock.funcGateway != nil {
		mmGateway.mock.t.Fatalf("GatewayerMock.Gateway mock is already set by Set")
	}

	if mmGateway.defaultExpectation == nil {
		mmGateway.defaultExpectation = &GatewayerMockGatewayExpectation{}
	}

	return mmGateway
}

// Inspect accepts an inspector function that has same arguments as the Gatewayer.Gateway
func (mmGateway *mGatewayerMockGateway) Inspect(f func()) *mGatewayerMockGateway {
	if mmGateway.mock.inspectFuncGateway != nil {
		mmGateway.mock.t.Fatalf("Inspect function is already set for GatewayerMock.Gateway")
	}

	mmGateway.mock.inspectFuncGateway = f

	return mmGateway
}

// Return sets up results that will be returned by Gatewayer.Gateway
func (mmGateway *mGatewayerMockGateway) Return(g1 mm_network.Gateway) *GatewayerMock {
	if mmGateway.mock.funcGateway != nil {
		mmGateway.mock.t.Fatalf("GatewayerMock.Gateway mock is already set by Set")
	}

	if mmGateway.defaultExpectation == nil {
		mmGateway.defaultExpectation = &GatewayerMockGatewayExpectation{mock: mmGateway.mock}
	}
	mmGateway.defaultExpectation.results = &GatewayerMockGatewayResults{g1}
	return mmGateway.mock
}

//Set uses given function f to mock the Gatewayer.Gateway method
func (mmGateway *mGatewayerMockGateway) Set(f func() (g1 mm_network.Gateway)) *GatewayerMock {
	if mmGateway.defaultExpectation != nil {
		mmGateway.mock.t.Fatalf("Default expectation is already set for the Gatewayer.Gateway method")
	}

	if len(mmGateway.expectations) > 0 {
		mmGateway.mock.t.Fatalf("Some expectations are already set for the Gatewayer.Gateway method")
	}

	mmGateway.mock.funcGateway = f
	return mmGateway.mock
}

// Gateway implements network.Gatewayer
func (mmGateway *GatewayerMock) Gateway() (g1 mm_network.Gateway) {
	mm_atomic.AddUint64(&mmGateway.beforeGatewayCounter, 1)
	defer mm_atomic.AddUint64(&mmGateway.afterGatewayCounter, 1)

	if mmGateway.inspectFuncGateway != nil {
		mmGateway.inspectFuncGateway()
	}

	if mmGateway.GatewayMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&mmGateway.GatewayMock.defaultExpectation.Counter, 1)

		results := mmGateway.GatewayMock.defaultExpectation.results
		if results == nil {
			mmGateway.t.Fatal("No results are set for the GatewayerMock.Gateway")
		}
		return (*results).g1
	}
	if mmGateway.funcGateway != nil {
		return mmGateway.funcGateway()
	}
	mmGateway.t.Fatalf("Unexpected call to GatewayerMock.Gateway.")
	return
}

// GatewayAfterCounter returns a count of finished GatewayerMock.Gateway invocations
func (mmGateway *GatewayerMock) GatewayAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&mmGateway.afterGatewayCounter)
}

// GatewayBeforeCounter returns a count of GatewayerMock.Gateway invocations
func (mmGateway *GatewayerMock) GatewayBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&mmGateway.beforeGatewayCounter)
}

// MinimockGatewayDone returns true if the count of the Gateway invocations corresponds
// the number of defined expectations
func (m *GatewayerMock) MinimockGatewayDone() bool {
	for _, e := range m.GatewayMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.GatewayMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterGatewayCounter) < 1 {
		return false
	}
	// if func was set then invocations count should be greater than zero
	if m.funcGateway != nil && mm_atomic.LoadUint64(&m.afterGatewayCounter) < 1 {
		return false
	}
	return true
}

// MinimockGatewayInspect logs each unmet expectation
func (m *GatewayerMock) MinimockGatewayInspect() {
	for _, e := range m.GatewayMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Error("Expected call to GatewayerMock.Gateway")
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.GatewayMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterGatewayCounter) < 1 {
		m.t.Error("Expected call to GatewayerMock.Gateway")
	}
	// if func was set then invocations count should be greater than zero
	if m.funcGateway != nil && mm_atomic.LoadUint64(&m.afterGatewayCounter) < 1 {
		m.t.Error("Expected call to GatewayerMock.Gateway")
	}
}

type mGatewayerMockSetGateway struct {
	mock               *GatewayerMock
	defaultExpectation *GatewayerMockSetGatewayExpectation
	expectations       []*GatewayerMockSetGatewayExpectation

	callArgs []*GatewayerMockSetGatewayParams
	mutex    sync.RWMutex
}

// GatewayerMockSetGatewayExpectation specifies expectation struct of the Gatewayer.SetGateway
type GatewayerMockSetGatewayExpectation struct {
	mock   *GatewayerMock
	params *GatewayerMockSetGatewayParams

	Counter uint64
}

// GatewayerMockSetGatewayParams contains parameters of the Gatewayer.SetGateway
type GatewayerMockSetGatewayParams struct {
	g1 mm_network.Gateway
}

// Expect sets up expected params for Gatewayer.SetGateway
func (mmSetGateway *mGatewayerMockSetGateway) Expect(g1 mm_network.Gateway) *mGatewayerMockSetGateway {
	if mmSetGateway.mock.funcSetGateway != nil {
		mmSetGateway.mock.t.Fatalf("GatewayerMock.SetGateway mock is already set by Set")
	}

	if mmSetGateway.defaultExpectation == nil {
		mmSetGateway.defaultExpectation = &GatewayerMockSetGatewayExpectation{}
	}

	mmSetGateway.defaultExpectation.params = &GatewayerMockSetGatewayParams{g1}
	for _, e := range mmSetGateway.expectations {
		if minimock.Equal(e.params, mmSetGateway.defaultExpectation.params) {
			mmSetGateway.mock.t.Fatalf("Expectation set by When has same params: %#v", *mmSetGateway.defaultExpectation.params)
		}
	}

	return mmSetGateway
}

// Inspect accepts an inspector function that has same arguments as the Gatewayer.SetGateway
func (mmSetGateway *mGatewayerMockSetGateway) Inspect(f func(g1 mm_network.Gateway)) *mGatewayerMockSetGateway {
	if mmSetGateway.mock.inspectFuncSetGateway != nil {
		mmSetGateway.mock.t.Fatalf("Inspect function is already set for GatewayerMock.SetGateway")
	}

	mmSetGateway.mock.inspectFuncSetGateway = f

	return mmSetGateway
}

// Return sets up results that will be returned by Gatewayer.SetGateway
func (mmSetGateway *mGatewayerMockSetGateway) Return() *GatewayerMock {
	if mmSetGateway.mock.funcSetGateway != nil {
		mmSetGateway.mock.t.Fatalf("GatewayerMock.SetGateway mock is already set by Set")
	}

	if mmSetGateway.defaultExpectation == nil {
		mmSetGateway.defaultExpectation = &GatewayerMockSetGatewayExpectation{mock: mmSetGateway.mock}
	}

	return mmSetGateway.mock
}

//Set uses given function f to mock the Gatewayer.SetGateway method
func (mmSetGateway *mGatewayerMockSetGateway) Set(f func(g1 mm_network.Gateway)) *GatewayerMock {
	if mmSetGateway.defaultExpectation != nil {
		mmSetGateway.mock.t.Fatalf("Default expectation is already set for the Gatewayer.SetGateway method")
	}

	if len(mmSetGateway.expectations) > 0 {
		mmSetGateway.mock.t.Fatalf("Some expectations are already set for the Gatewayer.SetGateway method")
	}

	mmSetGateway.mock.funcSetGateway = f
	return mmSetGateway.mock
}

// SetGateway implements network.Gatewayer
func (mmSetGateway *GatewayerMock) SetGateway(g1 mm_network.Gateway) {
	mm_atomic.AddUint64(&mmSetGateway.beforeSetGatewayCounter, 1)
	defer mm_atomic.AddUint64(&mmSetGateway.afterSetGatewayCounter, 1)

	if mmSetGateway.inspectFuncSetGateway != nil {
		mmSetGateway.inspectFuncSetGateway(g1)
	}

	params := &GatewayerMockSetGatewayParams{g1}

	// Record call args
	mmSetGateway.SetGatewayMock.mutex.Lock()
	mmSetGateway.SetGatewayMock.callArgs = append(mmSetGateway.SetGatewayMock.callArgs, params)
	mmSetGateway.SetGatewayMock.mutex.Unlock()

	for _, e := range mmSetGateway.SetGatewayMock.expectations {
		if minimock.Equal(e.params, params) {
			mm_atomic.AddUint64(&e.Counter, 1)
			return
		}
	}

	if mmSetGateway.SetGatewayMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&mmSetGateway.SetGatewayMock.defaultExpectation.Counter, 1)
		want := mmSetGateway.SetGatewayMock.defaultExpectation.params
		got := GatewayerMockSetGatewayParams{g1}
		if want != nil && !minimock.Equal(*want, got) {
			mmSetGateway.t.Errorf("GatewayerMock.SetGateway got unexpected parameters, want: %#v, got: %#v%s\n", *want, got, minimock.Diff(*want, got))
		}

		return

	}
	if mmSetGateway.funcSetGateway != nil {
		mmSetGateway.funcSetGateway(g1)
		return
	}
	mmSetGateway.t.Fatalf("Unexpected call to GatewayerMock.SetGateway. %v", g1)

}

// SetGatewayAfterCounter returns a count of finished GatewayerMock.SetGateway invocations
func (mmSetGateway *GatewayerMock) SetGatewayAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&mmSetGateway.afterSetGatewayCounter)
}

// SetGatewayBeforeCounter returns a count of GatewayerMock.SetGateway invocations
func (mmSetGateway *GatewayerMock) SetGatewayBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&mmSetGateway.beforeSetGatewayCounter)
}

// Calls returns a list of arguments used in each call to GatewayerMock.SetGateway.
// The list is in the same order as the calls were made (i.e. recent calls have a higher index)
func (mmSetGateway *mGatewayerMockSetGateway) Calls() []*GatewayerMockSetGatewayParams {
	mmSetGateway.mutex.RLock()

	argCopy := make([]*GatewayerMockSetGatewayParams, len(mmSetGateway.callArgs))
	copy(argCopy, mmSetGateway.callArgs)

	mmSetGateway.mutex.RUnlock()

	return argCopy
}

// MinimockSetGatewayDone returns true if the count of the SetGateway invocations corresponds
// the number of defined expectations
func (m *GatewayerMock) MinimockSetGatewayDone() bool {
	for _, e := range m.SetGatewayMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.SetGatewayMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterSetGatewayCounter) < 1 {
		return false
	}
	// if func was set then invocations count should be greater than zero
	if m.funcSetGateway != nil && mm_atomic.LoadUint64(&m.afterSetGatewayCounter) < 1 {
		return false
	}
	return true
}

// MinimockSetGatewayInspect logs each unmet expectation
func (m *GatewayerMock) MinimockSetGatewayInspect() {
	for _, e := range m.SetGatewayMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Errorf("Expected call to GatewayerMock.SetGateway with params: %#v", *e.params)
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.SetGatewayMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterSetGatewayCounter) < 1 {
		if m.SetGatewayMock.defaultExpectation.params == nil {
			m.t.Error("Expected call to GatewayerMock.SetGateway")
		} else {
			m.t.Errorf("Expected call to GatewayerMock.SetGateway with params: %#v", *m.SetGatewayMock.defaultExpectation.params)
		}
	}
	// if func was set then invocations count should be greater than zero
	if m.funcSetGateway != nil && mm_atomic.LoadUint64(&m.afterSetGatewayCounter) < 1 {
		m.t.Error("Expected call to GatewayerMock.SetGateway")
	}
}

// MinimockFinish checks that all mocked methods have been called the expected number of times
func (m *GatewayerMock) MinimockFinish() {
	if !m.minimockDone() {
		m.MinimockGatewayInspect()

		m.MinimockSetGatewayInspect()
		m.t.FailNow()
	}
}

// MinimockWait waits for all mocked methods to be called the expected number of times
func (m *GatewayerMock) MinimockWait(timeout mm_time.Duration) {
	timeoutCh := mm_time.After(timeout)
	for {
		if m.minimockDone() {
			return
		}
		select {
		case <-timeoutCh:
			m.MinimockFinish()
			return
		case <-mm_time.After(10 * mm_time.Millisecond):
		}
	}
}

func (m *GatewayerMock) minimockDone() bool {
	done := true
	return done &&
		m.MinimockGatewayDone() &&
		m.MinimockSetGatewayDone()
}
