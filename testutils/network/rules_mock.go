package network

// Code generated by http://github.com/gojuno/minimock (dev). DO NOT EDIT.

import (
	mm_atomic "sync/atomic"
	mm_time "time"

	"github.com/gojuno/minimock"
)

// RulesMock implements network.Rules
type RulesMock struct {
	t minimock.Tester

	funcCheckMajorityRule          func() (b1 bool, i1 int)
	inspectFuncCheckMajorityRule   func()
	afterCheckMajorityRuleCounter  uint64
	beforeCheckMajorityRuleCounter uint64
	CheckMajorityRuleMock          mRulesMockCheckMajorityRule

	funcCheckMinRole          func() (b1 bool)
	inspectFuncCheckMinRole   func()
	afterCheckMinRoleCounter  uint64
	beforeCheckMinRoleCounter uint64
	CheckMinRoleMock          mRulesMockCheckMinRole
}

// NewRulesMock returns a mock for network.Rules
func NewRulesMock(t minimock.Tester) *RulesMock {
	m := &RulesMock{t: t}
	if controller, ok := t.(minimock.MockController); ok {
		controller.RegisterMocker(m)
	}

	m.CheckMajorityRuleMock = mRulesMockCheckMajorityRule{mock: m}

	m.CheckMinRoleMock = mRulesMockCheckMinRole{mock: m}

	return m
}

type mRulesMockCheckMajorityRule struct {
	mock               *RulesMock
	defaultExpectation *RulesMockCheckMajorityRuleExpectation
	expectations       []*RulesMockCheckMajorityRuleExpectation
}

// RulesMockCheckMajorityRuleExpectation specifies expectation struct of the Rules.CheckMajorityRule
type RulesMockCheckMajorityRuleExpectation struct {
	mock *RulesMock

	results *RulesMockCheckMajorityRuleResults
	Counter uint64
}

// RulesMockCheckMajorityRuleResults contains results of the Rules.CheckMajorityRule
type RulesMockCheckMajorityRuleResults struct {
	b1 bool
	i1 int
}

// Expect sets up expected params for Rules.CheckMajorityRule
func (mmCheckMajorityRule *mRulesMockCheckMajorityRule) Expect() *mRulesMockCheckMajorityRule {
	if mmCheckMajorityRule.mock.funcCheckMajorityRule != nil {
		mmCheckMajorityRule.mock.t.Fatalf("RulesMock.CheckMajorityRule mock is already set by Set")
	}

	if mmCheckMajorityRule.defaultExpectation == nil {
		mmCheckMajorityRule.defaultExpectation = &RulesMockCheckMajorityRuleExpectation{}
	}

	return mmCheckMajorityRule
}

// Inspect accepts an inspector function that has same arguments as the Rules.CheckMajorityRule
func (mmCheckMajorityRule *mRulesMockCheckMajorityRule) Inspect(f func()) *mRulesMockCheckMajorityRule {
	if mmCheckMajorityRule.mock.inspectFuncCheckMajorityRule != nil {
		mmCheckMajorityRule.mock.t.Fatalf("Inspect function is already set for RulesMock.CheckMajorityRule")
	}

	mmCheckMajorityRule.mock.inspectFuncCheckMajorityRule = f

	return mmCheckMajorityRule
}

// Return sets up results that will be returned by Rules.CheckMajorityRule
func (mmCheckMajorityRule *mRulesMockCheckMajorityRule) Return(b1 bool, i1 int) *RulesMock {
	if mmCheckMajorityRule.mock.funcCheckMajorityRule != nil {
		mmCheckMajorityRule.mock.t.Fatalf("RulesMock.CheckMajorityRule mock is already set by Set")
	}

	if mmCheckMajorityRule.defaultExpectation == nil {
		mmCheckMajorityRule.defaultExpectation = &RulesMockCheckMajorityRuleExpectation{mock: mmCheckMajorityRule.mock}
	}
	mmCheckMajorityRule.defaultExpectation.results = &RulesMockCheckMajorityRuleResults{b1, i1}
	return mmCheckMajorityRule.mock
}

//Set uses given function f to mock the Rules.CheckMajorityRule method
func (mmCheckMajorityRule *mRulesMockCheckMajorityRule) Set(f func() (b1 bool, i1 int)) *RulesMock {
	if mmCheckMajorityRule.defaultExpectation != nil {
		mmCheckMajorityRule.mock.t.Fatalf("Default expectation is already set for the Rules.CheckMajorityRule method")
	}

	if len(mmCheckMajorityRule.expectations) > 0 {
		mmCheckMajorityRule.mock.t.Fatalf("Some expectations are already set for the Rules.CheckMajorityRule method")
	}

	mmCheckMajorityRule.mock.funcCheckMajorityRule = f
	return mmCheckMajorityRule.mock
}

// CheckMajorityRule implements network.Rules
func (mmCheckMajorityRule *RulesMock) CheckMajorityRule() (b1 bool, i1 int) {
	mm_atomic.AddUint64(&mmCheckMajorityRule.beforeCheckMajorityRuleCounter, 1)
	defer mm_atomic.AddUint64(&mmCheckMajorityRule.afterCheckMajorityRuleCounter, 1)

	if mmCheckMajorityRule.inspectFuncCheckMajorityRule != nil {
		mmCheckMajorityRule.inspectFuncCheckMajorityRule()
	}

	if mmCheckMajorityRule.CheckMajorityRuleMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&mmCheckMajorityRule.CheckMajorityRuleMock.defaultExpectation.Counter, 1)

		results := mmCheckMajorityRule.CheckMajorityRuleMock.defaultExpectation.results
		if results == nil {
			mmCheckMajorityRule.t.Fatal("No results are set for the RulesMock.CheckMajorityRule")
		}
		return (*results).b1, (*results).i1
	}
	if mmCheckMajorityRule.funcCheckMajorityRule != nil {
		return mmCheckMajorityRule.funcCheckMajorityRule()
	}
	mmCheckMajorityRule.t.Fatalf("Unexpected call to RulesMock.CheckMajorityRule.")
	return
}

// CheckMajorityRuleAfterCounter returns a count of finished RulesMock.CheckMajorityRule invocations
func (mmCheckMajorityRule *RulesMock) CheckMajorityRuleAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&mmCheckMajorityRule.afterCheckMajorityRuleCounter)
}

// CheckMajorityRuleBeforeCounter returns a count of RulesMock.CheckMajorityRule invocations
func (mmCheckMajorityRule *RulesMock) CheckMajorityRuleBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&mmCheckMajorityRule.beforeCheckMajorityRuleCounter)
}

// MinimockCheckMajorityRuleDone returns true if the count of the CheckMajorityRule invocations corresponds
// the number of defined expectations
func (m *RulesMock) MinimockCheckMajorityRuleDone() bool {
	for _, e := range m.CheckMajorityRuleMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.CheckMajorityRuleMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterCheckMajorityRuleCounter) < 1 {
		return false
	}
	// if func was set then invocations count should be greater than zero
	if m.funcCheckMajorityRule != nil && mm_atomic.LoadUint64(&m.afterCheckMajorityRuleCounter) < 1 {
		return false
	}
	return true
}

// MinimockCheckMajorityRuleInspect logs each unmet expectation
func (m *RulesMock) MinimockCheckMajorityRuleInspect() {
	for _, e := range m.CheckMajorityRuleMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Error("Expected call to RulesMock.CheckMajorityRule")
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.CheckMajorityRuleMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterCheckMajorityRuleCounter) < 1 {
		m.t.Error("Expected call to RulesMock.CheckMajorityRule")
	}
	// if func was set then invocations count should be greater than zero
	if m.funcCheckMajorityRule != nil && mm_atomic.LoadUint64(&m.afterCheckMajorityRuleCounter) < 1 {
		m.t.Error("Expected call to RulesMock.CheckMajorityRule")
	}
}

type mRulesMockCheckMinRole struct {
	mock               *RulesMock
	defaultExpectation *RulesMockCheckMinRoleExpectation
	expectations       []*RulesMockCheckMinRoleExpectation
}

// RulesMockCheckMinRoleExpectation specifies expectation struct of the Rules.CheckMinRole
type RulesMockCheckMinRoleExpectation struct {
	mock *RulesMock

	results *RulesMockCheckMinRoleResults
	Counter uint64
}

// RulesMockCheckMinRoleResults contains results of the Rules.CheckMinRole
type RulesMockCheckMinRoleResults struct {
	b1 bool
}

// Expect sets up expected params for Rules.CheckMinRole
func (mmCheckMinRole *mRulesMockCheckMinRole) Expect() *mRulesMockCheckMinRole {
	if mmCheckMinRole.mock.funcCheckMinRole != nil {
		mmCheckMinRole.mock.t.Fatalf("RulesMock.CheckMinRole mock is already set by Set")
	}

	if mmCheckMinRole.defaultExpectation == nil {
		mmCheckMinRole.defaultExpectation = &RulesMockCheckMinRoleExpectation{}
	}

	return mmCheckMinRole
}

// Inspect accepts an inspector function that has same arguments as the Rules.CheckMinRole
func (mmCheckMinRole *mRulesMockCheckMinRole) Inspect(f func()) *mRulesMockCheckMinRole {
	if mmCheckMinRole.mock.inspectFuncCheckMinRole != nil {
		mmCheckMinRole.mock.t.Fatalf("Inspect function is already set for RulesMock.CheckMinRole")
	}

	mmCheckMinRole.mock.inspectFuncCheckMinRole = f

	return mmCheckMinRole
}

// Return sets up results that will be returned by Rules.CheckMinRole
func (mmCheckMinRole *mRulesMockCheckMinRole) Return(b1 bool) *RulesMock {
	if mmCheckMinRole.mock.funcCheckMinRole != nil {
		mmCheckMinRole.mock.t.Fatalf("RulesMock.CheckMinRole mock is already set by Set")
	}

	if mmCheckMinRole.defaultExpectation == nil {
		mmCheckMinRole.defaultExpectation = &RulesMockCheckMinRoleExpectation{mock: mmCheckMinRole.mock}
	}
	mmCheckMinRole.defaultExpectation.results = &RulesMockCheckMinRoleResults{b1}
	return mmCheckMinRole.mock
}

//Set uses given function f to mock the Rules.CheckMinRole method
func (mmCheckMinRole *mRulesMockCheckMinRole) Set(f func() (b1 bool)) *RulesMock {
	if mmCheckMinRole.defaultExpectation != nil {
		mmCheckMinRole.mock.t.Fatalf("Default expectation is already set for the Rules.CheckMinRole method")
	}

	if len(mmCheckMinRole.expectations) > 0 {
		mmCheckMinRole.mock.t.Fatalf("Some expectations are already set for the Rules.CheckMinRole method")
	}

	mmCheckMinRole.mock.funcCheckMinRole = f
	return mmCheckMinRole.mock
}

// CheckMinRole implements network.Rules
func (mmCheckMinRole *RulesMock) CheckMinRole() (b1 bool) {
	mm_atomic.AddUint64(&mmCheckMinRole.beforeCheckMinRoleCounter, 1)
	defer mm_atomic.AddUint64(&mmCheckMinRole.afterCheckMinRoleCounter, 1)

	if mmCheckMinRole.inspectFuncCheckMinRole != nil {
		mmCheckMinRole.inspectFuncCheckMinRole()
	}

	if mmCheckMinRole.CheckMinRoleMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&mmCheckMinRole.CheckMinRoleMock.defaultExpectation.Counter, 1)

		results := mmCheckMinRole.CheckMinRoleMock.defaultExpectation.results
		if results == nil {
			mmCheckMinRole.t.Fatal("No results are set for the RulesMock.CheckMinRole")
		}
		return (*results).b1
	}
	if mmCheckMinRole.funcCheckMinRole != nil {
		return mmCheckMinRole.funcCheckMinRole()
	}
	mmCheckMinRole.t.Fatalf("Unexpected call to RulesMock.CheckMinRole.")
	return
}

// CheckMinRoleAfterCounter returns a count of finished RulesMock.CheckMinRole invocations
func (mmCheckMinRole *RulesMock) CheckMinRoleAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&mmCheckMinRole.afterCheckMinRoleCounter)
}

// CheckMinRoleBeforeCounter returns a count of RulesMock.CheckMinRole invocations
func (mmCheckMinRole *RulesMock) CheckMinRoleBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&mmCheckMinRole.beforeCheckMinRoleCounter)
}

// MinimockCheckMinRoleDone returns true if the count of the CheckMinRole invocations corresponds
// the number of defined expectations
func (m *RulesMock) MinimockCheckMinRoleDone() bool {
	for _, e := range m.CheckMinRoleMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.CheckMinRoleMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterCheckMinRoleCounter) < 1 {
		return false
	}
	// if func was set then invocations count should be greater than zero
	if m.funcCheckMinRole != nil && mm_atomic.LoadUint64(&m.afterCheckMinRoleCounter) < 1 {
		return false
	}
	return true
}

// MinimockCheckMinRoleInspect logs each unmet expectation
func (m *RulesMock) MinimockCheckMinRoleInspect() {
	for _, e := range m.CheckMinRoleMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Error("Expected call to RulesMock.CheckMinRole")
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.CheckMinRoleMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterCheckMinRoleCounter) < 1 {
		m.t.Error("Expected call to RulesMock.CheckMinRole")
	}
	// if func was set then invocations count should be greater than zero
	if m.funcCheckMinRole != nil && mm_atomic.LoadUint64(&m.afterCheckMinRoleCounter) < 1 {
		m.t.Error("Expected call to RulesMock.CheckMinRole")
	}
}

// MinimockFinish checks that all mocked methods have been called the expected number of times
func (m *RulesMock) MinimockFinish() {
	if !m.minimockDone() {
		m.MinimockCheckMajorityRuleInspect()

		m.MinimockCheckMinRoleInspect()
		m.t.FailNow()
	}
}

// MinimockWait waits for all mocked methods to be called the expected number of times
func (m *RulesMock) MinimockWait(timeout mm_time.Duration) {
	timeoutCh := mm_time.After(timeout)
	for {
		if m.minimockDone() {
			return
		}
		select {
		case <-timeoutCh:
			m.MinimockFinish()
			return
		case <-mm_time.After(10 * mm_time.Millisecond):
		}
	}
}

func (m *RulesMock) minimockDone() bool {
	done := true
	return done &&
		m.MinimockCheckMajorityRuleDone() &&
		m.MinimockCheckMinRoleDone()
}
