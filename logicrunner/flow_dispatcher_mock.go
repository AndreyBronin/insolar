package logicrunner

// Code generated by http://github.com/gojuno/minimock (dev). DO NOT EDIT.

import (
	"context"
	"sync"
	mm_atomic "sync/atomic"
	mm_time "time"

	watermillMsg "github.com/ThreeDotsLabs/watermill/message"
	"github.com/gojuno/minimock"
	"github.com/insolar/insolar/insolar"
)

// FlowDispatcherMock implements FlowDispatcher
type FlowDispatcherMock struct {
	t minimock.Tester

	funcChangePulse          func(ctx context.Context, pulse insolar.Pulse)
	inspectFuncChangePulse   func(ctx context.Context, pulse insolar.Pulse)
	afterChangePulseCounter  uint64
	beforeChangePulseCounter uint64
	ChangePulseMock          mFlowDispatcherMockChangePulse

	funcProcess          func(msg *watermillMsg.Message) (mpa1 []*watermillMsg.Message, err error)
	inspectFuncProcess   func(msg *watermillMsg.Message)
	afterProcessCounter  uint64
	beforeProcessCounter uint64
	ProcessMock          mFlowDispatcherMockProcess
}

// NewFlowDispatcherMock returns a mock for FlowDispatcher
func NewFlowDispatcherMock(t minimock.Tester) *FlowDispatcherMock {
	m := &FlowDispatcherMock{t: t}
	if controller, ok := t.(minimock.MockController); ok {
		controller.RegisterMocker(m)
	}

	m.ChangePulseMock = mFlowDispatcherMockChangePulse{mock: m}
	m.ChangePulseMock.callArgs = []*FlowDispatcherMockChangePulseParams{}

	m.ProcessMock = mFlowDispatcherMockProcess{mock: m}
	m.ProcessMock.callArgs = []*FlowDispatcherMockProcessParams{}

	return m
}

type mFlowDispatcherMockChangePulse struct {
	mock               *FlowDispatcherMock
	defaultExpectation *FlowDispatcherMockChangePulseExpectation
	expectations       []*FlowDispatcherMockChangePulseExpectation

	callArgs []*FlowDispatcherMockChangePulseParams
	mutex    sync.RWMutex
}

// FlowDispatcherMockChangePulseExpectation specifies expectation struct of the FlowDispatcher.ChangePulse
type FlowDispatcherMockChangePulseExpectation struct {
	mock   *FlowDispatcherMock
	params *FlowDispatcherMockChangePulseParams

	Counter uint64
}

// FlowDispatcherMockChangePulseParams contains parameters of the FlowDispatcher.ChangePulse
type FlowDispatcherMockChangePulseParams struct {
	ctx   context.Context
	pulse insolar.Pulse
}

// Expect sets up expected params for FlowDispatcher.ChangePulse
func (mmChangePulse *mFlowDispatcherMockChangePulse) Expect(ctx context.Context, pulse insolar.Pulse) *mFlowDispatcherMockChangePulse {
	if mmChangePulse.mock.funcChangePulse != nil {
		mmChangePulse.mock.t.Fatalf("FlowDispatcherMock.ChangePulse mock is already set by Set")
	}

	if mmChangePulse.defaultExpectation == nil {
		mmChangePulse.defaultExpectation = &FlowDispatcherMockChangePulseExpectation{}
	}

	mmChangePulse.defaultExpectation.params = &FlowDispatcherMockChangePulseParams{ctx, pulse}
	for _, e := range mmChangePulse.expectations {
		if minimock.Equal(e.params, mmChangePulse.defaultExpectation.params) {
			mmChangePulse.mock.t.Fatalf("Expectation set by When has same params: %#v", *mmChangePulse.defaultExpectation.params)
		}
	}

	return mmChangePulse
}

// Inspect accepts an inspector function that has same arguments as the FlowDispatcher.ChangePulse
func (mmChangePulse *mFlowDispatcherMockChangePulse) Inspect(f func(ctx context.Context, pulse insolar.Pulse)) *mFlowDispatcherMockChangePulse {
	if mmChangePulse.mock.inspectFuncChangePulse != nil {
		mmChangePulse.mock.t.Fatalf("Inspect function is already set for FlowDispatcherMock.ChangePulse")
	}

	mmChangePulse.mock.inspectFuncChangePulse = f

	return mmChangePulse
}

// Return sets up results that will be returned by FlowDispatcher.ChangePulse
func (mmChangePulse *mFlowDispatcherMockChangePulse) Return() *FlowDispatcherMock {
	if mmChangePulse.mock.funcChangePulse != nil {
		mmChangePulse.mock.t.Fatalf("FlowDispatcherMock.ChangePulse mock is already set by Set")
	}

	if mmChangePulse.defaultExpectation == nil {
		mmChangePulse.defaultExpectation = &FlowDispatcherMockChangePulseExpectation{mock: mmChangePulse.mock}
	}

	return mmChangePulse.mock
}

//Set uses given function f to mock the FlowDispatcher.ChangePulse method
func (mmChangePulse *mFlowDispatcherMockChangePulse) Set(f func(ctx context.Context, pulse insolar.Pulse)) *FlowDispatcherMock {
	if mmChangePulse.defaultExpectation != nil {
		mmChangePulse.mock.t.Fatalf("Default expectation is already set for the FlowDispatcher.ChangePulse method")
	}

	if len(mmChangePulse.expectations) > 0 {
		mmChangePulse.mock.t.Fatalf("Some expectations are already set for the FlowDispatcher.ChangePulse method")
	}

	mmChangePulse.mock.funcChangePulse = f
	return mmChangePulse.mock
}

// ChangePulse implements FlowDispatcher
func (mmChangePulse *FlowDispatcherMock) ChangePulse(ctx context.Context, pulse insolar.Pulse) {
	mm_atomic.AddUint64(&mmChangePulse.beforeChangePulseCounter, 1)
	defer mm_atomic.AddUint64(&mmChangePulse.afterChangePulseCounter, 1)

	if mmChangePulse.inspectFuncChangePulse != nil {
		mmChangePulse.inspectFuncChangePulse(ctx, pulse)
	}

	params := &FlowDispatcherMockChangePulseParams{ctx, pulse}

	// Record call args
	mmChangePulse.ChangePulseMock.mutex.Lock()
	mmChangePulse.ChangePulseMock.callArgs = append(mmChangePulse.ChangePulseMock.callArgs, params)
	mmChangePulse.ChangePulseMock.mutex.Unlock()

	for _, e := range mmChangePulse.ChangePulseMock.expectations {
		if minimock.Equal(e.params, params) {
			mm_atomic.AddUint64(&e.Counter, 1)
			return
		}
	}

	if mmChangePulse.ChangePulseMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&mmChangePulse.ChangePulseMock.defaultExpectation.Counter, 1)
		want := mmChangePulse.ChangePulseMock.defaultExpectation.params
		got := FlowDispatcherMockChangePulseParams{ctx, pulse}
		if want != nil && !minimock.Equal(*want, got) {
			mmChangePulse.t.Errorf("FlowDispatcherMock.ChangePulse got unexpected parameters, want: %#v, got: %#v%s\n", *want, got, minimock.Diff(*want, got))
		}

		return

	}
	if mmChangePulse.funcChangePulse != nil {
		mmChangePulse.funcChangePulse(ctx, pulse)
		return
	}
	mmChangePulse.t.Fatalf("Unexpected call to FlowDispatcherMock.ChangePulse. %v %v", ctx, pulse)

}

// ChangePulseAfterCounter returns a count of finished FlowDispatcherMock.ChangePulse invocations
func (mmChangePulse *FlowDispatcherMock) ChangePulseAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&mmChangePulse.afterChangePulseCounter)
}

// ChangePulseBeforeCounter returns a count of FlowDispatcherMock.ChangePulse invocations
func (mmChangePulse *FlowDispatcherMock) ChangePulseBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&mmChangePulse.beforeChangePulseCounter)
}

// Calls returns a list of arguments used in each call to FlowDispatcherMock.ChangePulse.
// The list is in the same order as the calls were made (i.e. recent calls have a higher index)
func (mmChangePulse *mFlowDispatcherMockChangePulse) Calls() []*FlowDispatcherMockChangePulseParams {
	mmChangePulse.mutex.RLock()

	argCopy := make([]*FlowDispatcherMockChangePulseParams, len(mmChangePulse.callArgs))
	copy(argCopy, mmChangePulse.callArgs)

	mmChangePulse.mutex.RUnlock()

	return argCopy
}

// MinimockChangePulseDone returns true if the count of the ChangePulse invocations corresponds
// the number of defined expectations
func (m *FlowDispatcherMock) MinimockChangePulseDone() bool {
	for _, e := range m.ChangePulseMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.ChangePulseMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterChangePulseCounter) < 1 {
		return false
	}
	// if func was set then invocations count should be greater than zero
	if m.funcChangePulse != nil && mm_atomic.LoadUint64(&m.afterChangePulseCounter) < 1 {
		return false
	}
	return true
}

// MinimockChangePulseInspect logs each unmet expectation
func (m *FlowDispatcherMock) MinimockChangePulseInspect() {
	for _, e := range m.ChangePulseMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Errorf("Expected call to FlowDispatcherMock.ChangePulse with params: %#v", *e.params)
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.ChangePulseMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterChangePulseCounter) < 1 {
		if m.ChangePulseMock.defaultExpectation.params == nil {
			m.t.Error("Expected call to FlowDispatcherMock.ChangePulse")
		} else {
			m.t.Errorf("Expected call to FlowDispatcherMock.ChangePulse with params: %#v", *m.ChangePulseMock.defaultExpectation.params)
		}
	}
	// if func was set then invocations count should be greater than zero
	if m.funcChangePulse != nil && mm_atomic.LoadUint64(&m.afterChangePulseCounter) < 1 {
		m.t.Error("Expected call to FlowDispatcherMock.ChangePulse")
	}
}

type mFlowDispatcherMockProcess struct {
	mock               *FlowDispatcherMock
	defaultExpectation *FlowDispatcherMockProcessExpectation
	expectations       []*FlowDispatcherMockProcessExpectation

	callArgs []*FlowDispatcherMockProcessParams
	mutex    sync.RWMutex
}

// FlowDispatcherMockProcessExpectation specifies expectation struct of the FlowDispatcher.Process
type FlowDispatcherMockProcessExpectation struct {
	mock    *FlowDispatcherMock
	params  *FlowDispatcherMockProcessParams
	results *FlowDispatcherMockProcessResults
	Counter uint64
}

// FlowDispatcherMockProcessParams contains parameters of the FlowDispatcher.Process
type FlowDispatcherMockProcessParams struct {
	msg *watermillMsg.Message
}

// FlowDispatcherMockProcessResults contains results of the FlowDispatcher.Process
type FlowDispatcherMockProcessResults struct {
	mpa1 []*watermillMsg.Message
	err  error
}

// Expect sets up expected params for FlowDispatcher.Process
func (mmProcess *mFlowDispatcherMockProcess) Expect(msg *watermillMsg.Message) *mFlowDispatcherMockProcess {
	if mmProcess.mock.funcProcess != nil {
		mmProcess.mock.t.Fatalf("FlowDispatcherMock.Process mock is already set by Set")
	}

	if mmProcess.defaultExpectation == nil {
		mmProcess.defaultExpectation = &FlowDispatcherMockProcessExpectation{}
	}

	mmProcess.defaultExpectation.params = &FlowDispatcherMockProcessParams{msg}
	for _, e := range mmProcess.expectations {
		if minimock.Equal(e.params, mmProcess.defaultExpectation.params) {
			mmProcess.mock.t.Fatalf("Expectation set by When has same params: %#v", *mmProcess.defaultExpectation.params)
		}
	}

	return mmProcess
}

// Inspect accepts an inspector function that has same arguments as the FlowDispatcher.Process
func (mmProcess *mFlowDispatcherMockProcess) Inspect(f func(msg *watermillMsg.Message)) *mFlowDispatcherMockProcess {
	if mmProcess.mock.inspectFuncProcess != nil {
		mmProcess.mock.t.Fatalf("Inspect function is already set for FlowDispatcherMock.Process")
	}

	mmProcess.mock.inspectFuncProcess = f

	return mmProcess
}

// Return sets up results that will be returned by FlowDispatcher.Process
func (mmProcess *mFlowDispatcherMockProcess) Return(mpa1 []*watermillMsg.Message, err error) *FlowDispatcherMock {
	if mmProcess.mock.funcProcess != nil {
		mmProcess.mock.t.Fatalf("FlowDispatcherMock.Process mock is already set by Set")
	}

	if mmProcess.defaultExpectation == nil {
		mmProcess.defaultExpectation = &FlowDispatcherMockProcessExpectation{mock: mmProcess.mock}
	}
	mmProcess.defaultExpectation.results = &FlowDispatcherMockProcessResults{mpa1, err}
	return mmProcess.mock
}

//Set uses given function f to mock the FlowDispatcher.Process method
func (mmProcess *mFlowDispatcherMockProcess) Set(f func(msg *watermillMsg.Message) (mpa1 []*watermillMsg.Message, err error)) *FlowDispatcherMock {
	if mmProcess.defaultExpectation != nil {
		mmProcess.mock.t.Fatalf("Default expectation is already set for the FlowDispatcher.Process method")
	}

	if len(mmProcess.expectations) > 0 {
		mmProcess.mock.t.Fatalf("Some expectations are already set for the FlowDispatcher.Process method")
	}

	mmProcess.mock.funcProcess = f
	return mmProcess.mock
}

// When sets expectation for the FlowDispatcher.Process which will trigger the result defined by the following
// Then helper
func (mmProcess *mFlowDispatcherMockProcess) When(msg *watermillMsg.Message) *FlowDispatcherMockProcessExpectation {
	if mmProcess.mock.funcProcess != nil {
		mmProcess.mock.t.Fatalf("FlowDispatcherMock.Process mock is already set by Set")
	}

	expectation := &FlowDispatcherMockProcessExpectation{
		mock:   mmProcess.mock,
		params: &FlowDispatcherMockProcessParams{msg},
	}
	mmProcess.expectations = append(mmProcess.expectations, expectation)
	return expectation
}

// Then sets up FlowDispatcher.Process return parameters for the expectation previously defined by the When method
func (e *FlowDispatcherMockProcessExpectation) Then(mpa1 []*watermillMsg.Message, err error) *FlowDispatcherMock {
	e.results = &FlowDispatcherMockProcessResults{mpa1, err}
	return e.mock
}

// Process implements FlowDispatcher
func (mmProcess *FlowDispatcherMock) Process(msg *watermillMsg.Message) (mpa1 []*watermillMsg.Message, err error) {
	mm_atomic.AddUint64(&mmProcess.beforeProcessCounter, 1)
	defer mm_atomic.AddUint64(&mmProcess.afterProcessCounter, 1)

	if mmProcess.inspectFuncProcess != nil {
		mmProcess.inspectFuncProcess(msg)
	}

	params := &FlowDispatcherMockProcessParams{msg}

	// Record call args
	mmProcess.ProcessMock.mutex.Lock()
	mmProcess.ProcessMock.callArgs = append(mmProcess.ProcessMock.callArgs, params)
	mmProcess.ProcessMock.mutex.Unlock()

	for _, e := range mmProcess.ProcessMock.expectations {
		if minimock.Equal(e.params, params) {
			mm_atomic.AddUint64(&e.Counter, 1)
			return e.results.mpa1, e.results.err
		}
	}

	if mmProcess.ProcessMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&mmProcess.ProcessMock.defaultExpectation.Counter, 1)
		want := mmProcess.ProcessMock.defaultExpectation.params
		got := FlowDispatcherMockProcessParams{msg}
		if want != nil && !minimock.Equal(*want, got) {
			mmProcess.t.Errorf("FlowDispatcherMock.Process got unexpected parameters, want: %#v, got: %#v%s\n", *want, got, minimock.Diff(*want, got))
		}

		results := mmProcess.ProcessMock.defaultExpectation.results
		if results == nil {
			mmProcess.t.Fatal("No results are set for the FlowDispatcherMock.Process")
		}
		return (*results).mpa1, (*results).err
	}
	if mmProcess.funcProcess != nil {
		return mmProcess.funcProcess(msg)
	}
	mmProcess.t.Fatalf("Unexpected call to FlowDispatcherMock.Process. %v", msg)
	return
}

// ProcessAfterCounter returns a count of finished FlowDispatcherMock.Process invocations
func (mmProcess *FlowDispatcherMock) ProcessAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&mmProcess.afterProcessCounter)
}

// ProcessBeforeCounter returns a count of FlowDispatcherMock.Process invocations
func (mmProcess *FlowDispatcherMock) ProcessBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&mmProcess.beforeProcessCounter)
}

// Calls returns a list of arguments used in each call to FlowDispatcherMock.Process.
// The list is in the same order as the calls were made (i.e. recent calls have a higher index)
func (mmProcess *mFlowDispatcherMockProcess) Calls() []*FlowDispatcherMockProcessParams {
	mmProcess.mutex.RLock()

	argCopy := make([]*FlowDispatcherMockProcessParams, len(mmProcess.callArgs))
	copy(argCopy, mmProcess.callArgs)

	mmProcess.mutex.RUnlock()

	return argCopy
}

// MinimockProcessDone returns true if the count of the Process invocations corresponds
// the number of defined expectations
func (m *FlowDispatcherMock) MinimockProcessDone() bool {
	for _, e := range m.ProcessMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.ProcessMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterProcessCounter) < 1 {
		return false
	}
	// if func was set then invocations count should be greater than zero
	if m.funcProcess != nil && mm_atomic.LoadUint64(&m.afterProcessCounter) < 1 {
		return false
	}
	return true
}

// MinimockProcessInspect logs each unmet expectation
func (m *FlowDispatcherMock) MinimockProcessInspect() {
	for _, e := range m.ProcessMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Errorf("Expected call to FlowDispatcherMock.Process with params: %#v", *e.params)
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.ProcessMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterProcessCounter) < 1 {
		if m.ProcessMock.defaultExpectation.params == nil {
			m.t.Error("Expected call to FlowDispatcherMock.Process")
		} else {
			m.t.Errorf("Expected call to FlowDispatcherMock.Process with params: %#v", *m.ProcessMock.defaultExpectation.params)
		}
	}
	// if func was set then invocations count should be greater than zero
	if m.funcProcess != nil && mm_atomic.LoadUint64(&m.afterProcessCounter) < 1 {
		m.t.Error("Expected call to FlowDispatcherMock.Process")
	}
}

// MinimockFinish checks that all mocked methods have been called the expected number of times
func (m *FlowDispatcherMock) MinimockFinish() {
	if !m.minimockDone() {
		m.MinimockChangePulseInspect()

		m.MinimockProcessInspect()
		m.t.FailNow()
	}
}

// MinimockWait waits for all mocked methods to be called the expected number of times
func (m *FlowDispatcherMock) MinimockWait(timeout mm_time.Duration) {
	timeoutCh := mm_time.After(timeout)
	for {
		if m.minimockDone() {
			return
		}
		select {
		case <-timeoutCh:
			m.MinimockFinish()
			return
		case <-mm_time.After(10 * mm_time.Millisecond):
		}
	}
}

func (m *FlowDispatcherMock) minimockDone() bool {
	done := true
	return done &&
		m.MinimockChangePulseDone() &&
		m.MinimockProcessDone()
}
