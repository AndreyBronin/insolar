package pulsartestutils

// Code generated by http://github.com/gojuno/minimock (dev). DO NOT EDIT.

import (
	"sync"
	mm_atomic "sync/atomic"
	mm_time "time"

	"github.com/gojuno/minimock"
	"github.com/insolar/insolar/insolar"
)

// PulsarStorageMock implements pulsarstorage.PulsarStorage
type PulsarStorageMock struct {
	t minimock.Tester

	funcClose          func() (err error)
	inspectFuncClose   func()
	afterCloseCounter  uint64
	beforeCloseCounter uint64
	CloseMock          mPulsarStorageMockClose

	funcGetLastPulse          func() (pp1 *insolar.Pulse, err error)
	inspectFuncGetLastPulse   func()
	afterGetLastPulseCounter  uint64
	beforeGetLastPulseCounter uint64
	GetLastPulseMock          mPulsarStorageMockGetLastPulse

	funcSavePulse          func(pulse *insolar.Pulse) (err error)
	inspectFuncSavePulse   func(pulse *insolar.Pulse)
	afterSavePulseCounter  uint64
	beforeSavePulseCounter uint64
	SavePulseMock          mPulsarStorageMockSavePulse

	funcSetLastPulse          func(pulse *insolar.Pulse) (err error)
	inspectFuncSetLastPulse   func(pulse *insolar.Pulse)
	afterSetLastPulseCounter  uint64
	beforeSetLastPulseCounter uint64
	SetLastPulseMock          mPulsarStorageMockSetLastPulse
}

// NewPulsarStorageMock returns a mock for pulsarstorage.PulsarStorage
func NewPulsarStorageMock(t minimock.Tester) *PulsarStorageMock {
	m := &PulsarStorageMock{t: t}
	if controller, ok := t.(minimock.MockController); ok {
		controller.RegisterMocker(m)
	}

	m.CloseMock = mPulsarStorageMockClose{mock: m}

	m.GetLastPulseMock = mPulsarStorageMockGetLastPulse{mock: m}

	m.SavePulseMock = mPulsarStorageMockSavePulse{mock: m}
	m.SavePulseMock.callArgs = []*PulsarStorageMockSavePulseParams{}

	m.SetLastPulseMock = mPulsarStorageMockSetLastPulse{mock: m}
	m.SetLastPulseMock.callArgs = []*PulsarStorageMockSetLastPulseParams{}

	return m
}

type mPulsarStorageMockClose struct {
	mock               *PulsarStorageMock
	defaultExpectation *PulsarStorageMockCloseExpectation
	expectations       []*PulsarStorageMockCloseExpectation
}

// PulsarStorageMockCloseExpectation specifies expectation struct of the PulsarStorage.Close
type PulsarStorageMockCloseExpectation struct {
	mock *PulsarStorageMock

	results *PulsarStorageMockCloseResults
	Counter uint64
}

// PulsarStorageMockCloseResults contains results of the PulsarStorage.Close
type PulsarStorageMockCloseResults struct {
	err error
}

// Expect sets up expected params for PulsarStorage.Close
func (mmClose *mPulsarStorageMockClose) Expect() *mPulsarStorageMockClose {
	if mmClose.mock.funcClose != nil {
		mmClose.mock.t.Fatalf("PulsarStorageMock.Close mock is already set by Set")
	}

	if mmClose.defaultExpectation == nil {
		mmClose.defaultExpectation = &PulsarStorageMockCloseExpectation{}
	}

	return mmClose
}

// Inspect accepts an inspector function that has same arguments as the PulsarStorage.Close
func (mmClose *mPulsarStorageMockClose) Inspect(f func()) *mPulsarStorageMockClose {
	if mmClose.mock.inspectFuncClose != nil {
		mmClose.mock.t.Fatalf("Inspect function is already set for PulsarStorageMock.Close")
	}

	mmClose.mock.inspectFuncClose = f

	return mmClose
}

// Return sets up results that will be returned by PulsarStorage.Close
func (mmClose *mPulsarStorageMockClose) Return(err error) *PulsarStorageMock {
	if mmClose.mock.funcClose != nil {
		mmClose.mock.t.Fatalf("PulsarStorageMock.Close mock is already set by Set")
	}

	if mmClose.defaultExpectation == nil {
		mmClose.defaultExpectation = &PulsarStorageMockCloseExpectation{mock: mmClose.mock}
	}
	mmClose.defaultExpectation.results = &PulsarStorageMockCloseResults{err}
	return mmClose.mock
}

//Set uses given function f to mock the PulsarStorage.Close method
func (mmClose *mPulsarStorageMockClose) Set(f func() (err error)) *PulsarStorageMock {
	if mmClose.defaultExpectation != nil {
		mmClose.mock.t.Fatalf("Default expectation is already set for the PulsarStorage.Close method")
	}

	if len(mmClose.expectations) > 0 {
		mmClose.mock.t.Fatalf("Some expectations are already set for the PulsarStorage.Close method")
	}

	mmClose.mock.funcClose = f
	return mmClose.mock
}

// Close implements pulsarstorage.PulsarStorage
func (mmClose *PulsarStorageMock) Close() (err error) {
	mm_atomic.AddUint64(&mmClose.beforeCloseCounter, 1)
	defer mm_atomic.AddUint64(&mmClose.afterCloseCounter, 1)

	if mmClose.inspectFuncClose != nil {
		mmClose.inspectFuncClose()
	}

	if mmClose.CloseMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&mmClose.CloseMock.defaultExpectation.Counter, 1)

		results := mmClose.CloseMock.defaultExpectation.results
		if results == nil {
			mmClose.t.Fatal("No results are set for the PulsarStorageMock.Close")
		}
		return (*results).err
	}
	if mmClose.funcClose != nil {
		return mmClose.funcClose()
	}
	mmClose.t.Fatalf("Unexpected call to PulsarStorageMock.Close.")
	return
}

// CloseAfterCounter returns a count of finished PulsarStorageMock.Close invocations
func (mmClose *PulsarStorageMock) CloseAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&mmClose.afterCloseCounter)
}

// CloseBeforeCounter returns a count of PulsarStorageMock.Close invocations
func (mmClose *PulsarStorageMock) CloseBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&mmClose.beforeCloseCounter)
}

// MinimockCloseDone returns true if the count of the Close invocations corresponds
// the number of defined expectations
func (m *PulsarStorageMock) MinimockCloseDone() bool {
	for _, e := range m.CloseMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.CloseMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterCloseCounter) < 1 {
		return false
	}
	// if func was set then invocations count should be greater than zero
	if m.funcClose != nil && mm_atomic.LoadUint64(&m.afterCloseCounter) < 1 {
		return false
	}
	return true
}

// MinimockCloseInspect logs each unmet expectation
func (m *PulsarStorageMock) MinimockCloseInspect() {
	for _, e := range m.CloseMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Error("Expected call to PulsarStorageMock.Close")
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.CloseMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterCloseCounter) < 1 {
		m.t.Error("Expected call to PulsarStorageMock.Close")
	}
	// if func was set then invocations count should be greater than zero
	if m.funcClose != nil && mm_atomic.LoadUint64(&m.afterCloseCounter) < 1 {
		m.t.Error("Expected call to PulsarStorageMock.Close")
	}
}

type mPulsarStorageMockGetLastPulse struct {
	mock               *PulsarStorageMock
	defaultExpectation *PulsarStorageMockGetLastPulseExpectation
	expectations       []*PulsarStorageMockGetLastPulseExpectation
}

// PulsarStorageMockGetLastPulseExpectation specifies expectation struct of the PulsarStorage.GetLastPulse
type PulsarStorageMockGetLastPulseExpectation struct {
	mock *PulsarStorageMock

	results *PulsarStorageMockGetLastPulseResults
	Counter uint64
}

// PulsarStorageMockGetLastPulseResults contains results of the PulsarStorage.GetLastPulse
type PulsarStorageMockGetLastPulseResults struct {
	pp1 *insolar.Pulse
	err error
}

// Expect sets up expected params for PulsarStorage.GetLastPulse
func (mmGetLastPulse *mPulsarStorageMockGetLastPulse) Expect() *mPulsarStorageMockGetLastPulse {
	if mmGetLastPulse.mock.funcGetLastPulse != nil {
		mmGetLastPulse.mock.t.Fatalf("PulsarStorageMock.GetLastPulse mock is already set by Set")
	}

	if mmGetLastPulse.defaultExpectation == nil {
		mmGetLastPulse.defaultExpectation = &PulsarStorageMockGetLastPulseExpectation{}
	}

	return mmGetLastPulse
}

// Inspect accepts an inspector function that has same arguments as the PulsarStorage.GetLastPulse
func (mmGetLastPulse *mPulsarStorageMockGetLastPulse) Inspect(f func()) *mPulsarStorageMockGetLastPulse {
	if mmGetLastPulse.mock.inspectFuncGetLastPulse != nil {
		mmGetLastPulse.mock.t.Fatalf("Inspect function is already set for PulsarStorageMock.GetLastPulse")
	}

	mmGetLastPulse.mock.inspectFuncGetLastPulse = f

	return mmGetLastPulse
}

// Return sets up results that will be returned by PulsarStorage.GetLastPulse
func (mmGetLastPulse *mPulsarStorageMockGetLastPulse) Return(pp1 *insolar.Pulse, err error) *PulsarStorageMock {
	if mmGetLastPulse.mock.funcGetLastPulse != nil {
		mmGetLastPulse.mock.t.Fatalf("PulsarStorageMock.GetLastPulse mock is already set by Set")
	}

	if mmGetLastPulse.defaultExpectation == nil {
		mmGetLastPulse.defaultExpectation = &PulsarStorageMockGetLastPulseExpectation{mock: mmGetLastPulse.mock}
	}
	mmGetLastPulse.defaultExpectation.results = &PulsarStorageMockGetLastPulseResults{pp1, err}
	return mmGetLastPulse.mock
}

//Set uses given function f to mock the PulsarStorage.GetLastPulse method
func (mmGetLastPulse *mPulsarStorageMockGetLastPulse) Set(f func() (pp1 *insolar.Pulse, err error)) *PulsarStorageMock {
	if mmGetLastPulse.defaultExpectation != nil {
		mmGetLastPulse.mock.t.Fatalf("Default expectation is already set for the PulsarStorage.GetLastPulse method")
	}

	if len(mmGetLastPulse.expectations) > 0 {
		mmGetLastPulse.mock.t.Fatalf("Some expectations are already set for the PulsarStorage.GetLastPulse method")
	}

	mmGetLastPulse.mock.funcGetLastPulse = f
	return mmGetLastPulse.mock
}

// GetLastPulse implements pulsarstorage.PulsarStorage
func (mmGetLastPulse *PulsarStorageMock) GetLastPulse() (pp1 *insolar.Pulse, err error) {
	mm_atomic.AddUint64(&mmGetLastPulse.beforeGetLastPulseCounter, 1)
	defer mm_atomic.AddUint64(&mmGetLastPulse.afterGetLastPulseCounter, 1)

	if mmGetLastPulse.inspectFuncGetLastPulse != nil {
		mmGetLastPulse.inspectFuncGetLastPulse()
	}

	if mmGetLastPulse.GetLastPulseMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&mmGetLastPulse.GetLastPulseMock.defaultExpectation.Counter, 1)

		results := mmGetLastPulse.GetLastPulseMock.defaultExpectation.results
		if results == nil {
			mmGetLastPulse.t.Fatal("No results are set for the PulsarStorageMock.GetLastPulse")
		}
		return (*results).pp1, (*results).err
	}
	if mmGetLastPulse.funcGetLastPulse != nil {
		return mmGetLastPulse.funcGetLastPulse()
	}
	mmGetLastPulse.t.Fatalf("Unexpected call to PulsarStorageMock.GetLastPulse.")
	return
}

// GetLastPulseAfterCounter returns a count of finished PulsarStorageMock.GetLastPulse invocations
func (mmGetLastPulse *PulsarStorageMock) GetLastPulseAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&mmGetLastPulse.afterGetLastPulseCounter)
}

// GetLastPulseBeforeCounter returns a count of PulsarStorageMock.GetLastPulse invocations
func (mmGetLastPulse *PulsarStorageMock) GetLastPulseBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&mmGetLastPulse.beforeGetLastPulseCounter)
}

// MinimockGetLastPulseDone returns true if the count of the GetLastPulse invocations corresponds
// the number of defined expectations
func (m *PulsarStorageMock) MinimockGetLastPulseDone() bool {
	for _, e := range m.GetLastPulseMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.GetLastPulseMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterGetLastPulseCounter) < 1 {
		return false
	}
	// if func was set then invocations count should be greater than zero
	if m.funcGetLastPulse != nil && mm_atomic.LoadUint64(&m.afterGetLastPulseCounter) < 1 {
		return false
	}
	return true
}

// MinimockGetLastPulseInspect logs each unmet expectation
func (m *PulsarStorageMock) MinimockGetLastPulseInspect() {
	for _, e := range m.GetLastPulseMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Error("Expected call to PulsarStorageMock.GetLastPulse")
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.GetLastPulseMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterGetLastPulseCounter) < 1 {
		m.t.Error("Expected call to PulsarStorageMock.GetLastPulse")
	}
	// if func was set then invocations count should be greater than zero
	if m.funcGetLastPulse != nil && mm_atomic.LoadUint64(&m.afterGetLastPulseCounter) < 1 {
		m.t.Error("Expected call to PulsarStorageMock.GetLastPulse")
	}
}

type mPulsarStorageMockSavePulse struct {
	mock               *PulsarStorageMock
	defaultExpectation *PulsarStorageMockSavePulseExpectation
	expectations       []*PulsarStorageMockSavePulseExpectation

	callArgs []*PulsarStorageMockSavePulseParams
	mutex    sync.RWMutex
}

// PulsarStorageMockSavePulseExpectation specifies expectation struct of the PulsarStorage.SavePulse
type PulsarStorageMockSavePulseExpectation struct {
	mock    *PulsarStorageMock
	params  *PulsarStorageMockSavePulseParams
	results *PulsarStorageMockSavePulseResults
	Counter uint64
}

// PulsarStorageMockSavePulseParams contains parameters of the PulsarStorage.SavePulse
type PulsarStorageMockSavePulseParams struct {
	pulse *insolar.Pulse
}

// PulsarStorageMockSavePulseResults contains results of the PulsarStorage.SavePulse
type PulsarStorageMockSavePulseResults struct {
	err error
}

// Expect sets up expected params for PulsarStorage.SavePulse
func (mmSavePulse *mPulsarStorageMockSavePulse) Expect(pulse *insolar.Pulse) *mPulsarStorageMockSavePulse {
	if mmSavePulse.mock.funcSavePulse != nil {
		mmSavePulse.mock.t.Fatalf("PulsarStorageMock.SavePulse mock is already set by Set")
	}

	if mmSavePulse.defaultExpectation == nil {
		mmSavePulse.defaultExpectation = &PulsarStorageMockSavePulseExpectation{}
	}

	mmSavePulse.defaultExpectation.params = &PulsarStorageMockSavePulseParams{pulse}
	for _, e := range mmSavePulse.expectations {
		if minimock.Equal(e.params, mmSavePulse.defaultExpectation.params) {
			mmSavePulse.mock.t.Fatalf("Expectation set by When has same params: %#v", *mmSavePulse.defaultExpectation.params)
		}
	}

	return mmSavePulse
}

// Inspect accepts an inspector function that has same arguments as the PulsarStorage.SavePulse
func (mmSavePulse *mPulsarStorageMockSavePulse) Inspect(f func(pulse *insolar.Pulse)) *mPulsarStorageMockSavePulse {
	if mmSavePulse.mock.inspectFuncSavePulse != nil {
		mmSavePulse.mock.t.Fatalf("Inspect function is already set for PulsarStorageMock.SavePulse")
	}

	mmSavePulse.mock.inspectFuncSavePulse = f

	return mmSavePulse
}

// Return sets up results that will be returned by PulsarStorage.SavePulse
func (mmSavePulse *mPulsarStorageMockSavePulse) Return(err error) *PulsarStorageMock {
	if mmSavePulse.mock.funcSavePulse != nil {
		mmSavePulse.mock.t.Fatalf("PulsarStorageMock.SavePulse mock is already set by Set")
	}

	if mmSavePulse.defaultExpectation == nil {
		mmSavePulse.defaultExpectation = &PulsarStorageMockSavePulseExpectation{mock: mmSavePulse.mock}
	}
	mmSavePulse.defaultExpectation.results = &PulsarStorageMockSavePulseResults{err}
	return mmSavePulse.mock
}

//Set uses given function f to mock the PulsarStorage.SavePulse method
func (mmSavePulse *mPulsarStorageMockSavePulse) Set(f func(pulse *insolar.Pulse) (err error)) *PulsarStorageMock {
	if mmSavePulse.defaultExpectation != nil {
		mmSavePulse.mock.t.Fatalf("Default expectation is already set for the PulsarStorage.SavePulse method")
	}

	if len(mmSavePulse.expectations) > 0 {
		mmSavePulse.mock.t.Fatalf("Some expectations are already set for the PulsarStorage.SavePulse method")
	}

	mmSavePulse.mock.funcSavePulse = f
	return mmSavePulse.mock
}

// When sets expectation for the PulsarStorage.SavePulse which will trigger the result defined by the following
// Then helper
func (mmSavePulse *mPulsarStorageMockSavePulse) When(pulse *insolar.Pulse) *PulsarStorageMockSavePulseExpectation {
	if mmSavePulse.mock.funcSavePulse != nil {
		mmSavePulse.mock.t.Fatalf("PulsarStorageMock.SavePulse mock is already set by Set")
	}

	expectation := &PulsarStorageMockSavePulseExpectation{
		mock:   mmSavePulse.mock,
		params: &PulsarStorageMockSavePulseParams{pulse},
	}
	mmSavePulse.expectations = append(mmSavePulse.expectations, expectation)
	return expectation
}

// Then sets up PulsarStorage.SavePulse return parameters for the expectation previously defined by the When method
func (e *PulsarStorageMockSavePulseExpectation) Then(err error) *PulsarStorageMock {
	e.results = &PulsarStorageMockSavePulseResults{err}
	return e.mock
}

// SavePulse implements pulsarstorage.PulsarStorage
func (mmSavePulse *PulsarStorageMock) SavePulse(pulse *insolar.Pulse) (err error) {
	mm_atomic.AddUint64(&mmSavePulse.beforeSavePulseCounter, 1)
	defer mm_atomic.AddUint64(&mmSavePulse.afterSavePulseCounter, 1)

	if mmSavePulse.inspectFuncSavePulse != nil {
		mmSavePulse.inspectFuncSavePulse(pulse)
	}

	params := &PulsarStorageMockSavePulseParams{pulse}

	// Record call args
	mmSavePulse.SavePulseMock.mutex.Lock()
	mmSavePulse.SavePulseMock.callArgs = append(mmSavePulse.SavePulseMock.callArgs, params)
	mmSavePulse.SavePulseMock.mutex.Unlock()

	for _, e := range mmSavePulse.SavePulseMock.expectations {
		if minimock.Equal(e.params, params) {
			mm_atomic.AddUint64(&e.Counter, 1)
			return e.results.err
		}
	}

	if mmSavePulse.SavePulseMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&mmSavePulse.SavePulseMock.defaultExpectation.Counter, 1)
		want := mmSavePulse.SavePulseMock.defaultExpectation.params
		got := PulsarStorageMockSavePulseParams{pulse}
		if want != nil && !minimock.Equal(*want, got) {
			mmSavePulse.t.Errorf("PulsarStorageMock.SavePulse got unexpected parameters, want: %#v, got: %#v%s\n", *want, got, minimock.Diff(*want, got))
		}

		results := mmSavePulse.SavePulseMock.defaultExpectation.results
		if results == nil {
			mmSavePulse.t.Fatal("No results are set for the PulsarStorageMock.SavePulse")
		}
		return (*results).err
	}
	if mmSavePulse.funcSavePulse != nil {
		return mmSavePulse.funcSavePulse(pulse)
	}
	mmSavePulse.t.Fatalf("Unexpected call to PulsarStorageMock.SavePulse. %v", pulse)
	return
}

// SavePulseAfterCounter returns a count of finished PulsarStorageMock.SavePulse invocations
func (mmSavePulse *PulsarStorageMock) SavePulseAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&mmSavePulse.afterSavePulseCounter)
}

// SavePulseBeforeCounter returns a count of PulsarStorageMock.SavePulse invocations
func (mmSavePulse *PulsarStorageMock) SavePulseBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&mmSavePulse.beforeSavePulseCounter)
}

// Calls returns a list of arguments used in each call to PulsarStorageMock.SavePulse.
// The list is in the same order as the calls were made (i.e. recent calls have a higher index)
func (mmSavePulse *mPulsarStorageMockSavePulse) Calls() []*PulsarStorageMockSavePulseParams {
	mmSavePulse.mutex.RLock()

	argCopy := make([]*PulsarStorageMockSavePulseParams, len(mmSavePulse.callArgs))
	copy(argCopy, mmSavePulse.callArgs)

	mmSavePulse.mutex.RUnlock()

	return argCopy
}

// MinimockSavePulseDone returns true if the count of the SavePulse invocations corresponds
// the number of defined expectations
func (m *PulsarStorageMock) MinimockSavePulseDone() bool {
	for _, e := range m.SavePulseMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.SavePulseMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterSavePulseCounter) < 1 {
		return false
	}
	// if func was set then invocations count should be greater than zero
	if m.funcSavePulse != nil && mm_atomic.LoadUint64(&m.afterSavePulseCounter) < 1 {
		return false
	}
	return true
}

// MinimockSavePulseInspect logs each unmet expectation
func (m *PulsarStorageMock) MinimockSavePulseInspect() {
	for _, e := range m.SavePulseMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Errorf("Expected call to PulsarStorageMock.SavePulse with params: %#v", *e.params)
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.SavePulseMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterSavePulseCounter) < 1 {
		if m.SavePulseMock.defaultExpectation.params == nil {
			m.t.Error("Expected call to PulsarStorageMock.SavePulse")
		} else {
			m.t.Errorf("Expected call to PulsarStorageMock.SavePulse with params: %#v", *m.SavePulseMock.defaultExpectation.params)
		}
	}
	// if func was set then invocations count should be greater than zero
	if m.funcSavePulse != nil && mm_atomic.LoadUint64(&m.afterSavePulseCounter) < 1 {
		m.t.Error("Expected call to PulsarStorageMock.SavePulse")
	}
}

type mPulsarStorageMockSetLastPulse struct {
	mock               *PulsarStorageMock
	defaultExpectation *PulsarStorageMockSetLastPulseExpectation
	expectations       []*PulsarStorageMockSetLastPulseExpectation

	callArgs []*PulsarStorageMockSetLastPulseParams
	mutex    sync.RWMutex
}

// PulsarStorageMockSetLastPulseExpectation specifies expectation struct of the PulsarStorage.SetLastPulse
type PulsarStorageMockSetLastPulseExpectation struct {
	mock    *PulsarStorageMock
	params  *PulsarStorageMockSetLastPulseParams
	results *PulsarStorageMockSetLastPulseResults
	Counter uint64
}

// PulsarStorageMockSetLastPulseParams contains parameters of the PulsarStorage.SetLastPulse
type PulsarStorageMockSetLastPulseParams struct {
	pulse *insolar.Pulse
}

// PulsarStorageMockSetLastPulseResults contains results of the PulsarStorage.SetLastPulse
type PulsarStorageMockSetLastPulseResults struct {
	err error
}

// Expect sets up expected params for PulsarStorage.SetLastPulse
func (mmSetLastPulse *mPulsarStorageMockSetLastPulse) Expect(pulse *insolar.Pulse) *mPulsarStorageMockSetLastPulse {
	if mmSetLastPulse.mock.funcSetLastPulse != nil {
		mmSetLastPulse.mock.t.Fatalf("PulsarStorageMock.SetLastPulse mock is already set by Set")
	}

	if mmSetLastPulse.defaultExpectation == nil {
		mmSetLastPulse.defaultExpectation = &PulsarStorageMockSetLastPulseExpectation{}
	}

	mmSetLastPulse.defaultExpectation.params = &PulsarStorageMockSetLastPulseParams{pulse}
	for _, e := range mmSetLastPulse.expectations {
		if minimock.Equal(e.params, mmSetLastPulse.defaultExpectation.params) {
			mmSetLastPulse.mock.t.Fatalf("Expectation set by When has same params: %#v", *mmSetLastPulse.defaultExpectation.params)
		}
	}

	return mmSetLastPulse
}

// Inspect accepts an inspector function that has same arguments as the PulsarStorage.SetLastPulse
func (mmSetLastPulse *mPulsarStorageMockSetLastPulse) Inspect(f func(pulse *insolar.Pulse)) *mPulsarStorageMockSetLastPulse {
	if mmSetLastPulse.mock.inspectFuncSetLastPulse != nil {
		mmSetLastPulse.mock.t.Fatalf("Inspect function is already set for PulsarStorageMock.SetLastPulse")
	}

	mmSetLastPulse.mock.inspectFuncSetLastPulse = f

	return mmSetLastPulse
}

// Return sets up results that will be returned by PulsarStorage.SetLastPulse
func (mmSetLastPulse *mPulsarStorageMockSetLastPulse) Return(err error) *PulsarStorageMock {
	if mmSetLastPulse.mock.funcSetLastPulse != nil {
		mmSetLastPulse.mock.t.Fatalf("PulsarStorageMock.SetLastPulse mock is already set by Set")
	}

	if mmSetLastPulse.defaultExpectation == nil {
		mmSetLastPulse.defaultExpectation = &PulsarStorageMockSetLastPulseExpectation{mock: mmSetLastPulse.mock}
	}
	mmSetLastPulse.defaultExpectation.results = &PulsarStorageMockSetLastPulseResults{err}
	return mmSetLastPulse.mock
}

//Set uses given function f to mock the PulsarStorage.SetLastPulse method
func (mmSetLastPulse *mPulsarStorageMockSetLastPulse) Set(f func(pulse *insolar.Pulse) (err error)) *PulsarStorageMock {
	if mmSetLastPulse.defaultExpectation != nil {
		mmSetLastPulse.mock.t.Fatalf("Default expectation is already set for the PulsarStorage.SetLastPulse method")
	}

	if len(mmSetLastPulse.expectations) > 0 {
		mmSetLastPulse.mock.t.Fatalf("Some expectations are already set for the PulsarStorage.SetLastPulse method")
	}

	mmSetLastPulse.mock.funcSetLastPulse = f
	return mmSetLastPulse.mock
}

// When sets expectation for the PulsarStorage.SetLastPulse which will trigger the result defined by the following
// Then helper
func (mmSetLastPulse *mPulsarStorageMockSetLastPulse) When(pulse *insolar.Pulse) *PulsarStorageMockSetLastPulseExpectation {
	if mmSetLastPulse.mock.funcSetLastPulse != nil {
		mmSetLastPulse.mock.t.Fatalf("PulsarStorageMock.SetLastPulse mock is already set by Set")
	}

	expectation := &PulsarStorageMockSetLastPulseExpectation{
		mock:   mmSetLastPulse.mock,
		params: &PulsarStorageMockSetLastPulseParams{pulse},
	}
	mmSetLastPulse.expectations = append(mmSetLastPulse.expectations, expectation)
	return expectation
}

// Then sets up PulsarStorage.SetLastPulse return parameters for the expectation previously defined by the When method
func (e *PulsarStorageMockSetLastPulseExpectation) Then(err error) *PulsarStorageMock {
	e.results = &PulsarStorageMockSetLastPulseResults{err}
	return e.mock
}

// SetLastPulse implements pulsarstorage.PulsarStorage
func (mmSetLastPulse *PulsarStorageMock) SetLastPulse(pulse *insolar.Pulse) (err error) {
	mm_atomic.AddUint64(&mmSetLastPulse.beforeSetLastPulseCounter, 1)
	defer mm_atomic.AddUint64(&mmSetLastPulse.afterSetLastPulseCounter, 1)

	if mmSetLastPulse.inspectFuncSetLastPulse != nil {
		mmSetLastPulse.inspectFuncSetLastPulse(pulse)
	}

	params := &PulsarStorageMockSetLastPulseParams{pulse}

	// Record call args
	mmSetLastPulse.SetLastPulseMock.mutex.Lock()
	mmSetLastPulse.SetLastPulseMock.callArgs = append(mmSetLastPulse.SetLastPulseMock.callArgs, params)
	mmSetLastPulse.SetLastPulseMock.mutex.Unlock()

	for _, e := range mmSetLastPulse.SetLastPulseMock.expectations {
		if minimock.Equal(e.params, params) {
			mm_atomic.AddUint64(&e.Counter, 1)
			return e.results.err
		}
	}

	if mmSetLastPulse.SetLastPulseMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&mmSetLastPulse.SetLastPulseMock.defaultExpectation.Counter, 1)
		want := mmSetLastPulse.SetLastPulseMock.defaultExpectation.params
		got := PulsarStorageMockSetLastPulseParams{pulse}
		if want != nil && !minimock.Equal(*want, got) {
			mmSetLastPulse.t.Errorf("PulsarStorageMock.SetLastPulse got unexpected parameters, want: %#v, got: %#v%s\n", *want, got, minimock.Diff(*want, got))
		}

		results := mmSetLastPulse.SetLastPulseMock.defaultExpectation.results
		if results == nil {
			mmSetLastPulse.t.Fatal("No results are set for the PulsarStorageMock.SetLastPulse")
		}
		return (*results).err
	}
	if mmSetLastPulse.funcSetLastPulse != nil {
		return mmSetLastPulse.funcSetLastPulse(pulse)
	}
	mmSetLastPulse.t.Fatalf("Unexpected call to PulsarStorageMock.SetLastPulse. %v", pulse)
	return
}

// SetLastPulseAfterCounter returns a count of finished PulsarStorageMock.SetLastPulse invocations
func (mmSetLastPulse *PulsarStorageMock) SetLastPulseAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&mmSetLastPulse.afterSetLastPulseCounter)
}

// SetLastPulseBeforeCounter returns a count of PulsarStorageMock.SetLastPulse invocations
func (mmSetLastPulse *PulsarStorageMock) SetLastPulseBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&mmSetLastPulse.beforeSetLastPulseCounter)
}

// Calls returns a list of arguments used in each call to PulsarStorageMock.SetLastPulse.
// The list is in the same order as the calls were made (i.e. recent calls have a higher index)
func (mmSetLastPulse *mPulsarStorageMockSetLastPulse) Calls() []*PulsarStorageMockSetLastPulseParams {
	mmSetLastPulse.mutex.RLock()

	argCopy := make([]*PulsarStorageMockSetLastPulseParams, len(mmSetLastPulse.callArgs))
	copy(argCopy, mmSetLastPulse.callArgs)

	mmSetLastPulse.mutex.RUnlock()

	return argCopy
}

// MinimockSetLastPulseDone returns true if the count of the SetLastPulse invocations corresponds
// the number of defined expectations
func (m *PulsarStorageMock) MinimockSetLastPulseDone() bool {
	for _, e := range m.SetLastPulseMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.SetLastPulseMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterSetLastPulseCounter) < 1 {
		return false
	}
	// if func was set then invocations count should be greater than zero
	if m.funcSetLastPulse != nil && mm_atomic.LoadUint64(&m.afterSetLastPulseCounter) < 1 {
		return false
	}
	return true
}

// MinimockSetLastPulseInspect logs each unmet expectation
func (m *PulsarStorageMock) MinimockSetLastPulseInspect() {
	for _, e := range m.SetLastPulseMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Errorf("Expected call to PulsarStorageMock.SetLastPulse with params: %#v", *e.params)
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.SetLastPulseMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterSetLastPulseCounter) < 1 {
		if m.SetLastPulseMock.defaultExpectation.params == nil {
			m.t.Error("Expected call to PulsarStorageMock.SetLastPulse")
		} else {
			m.t.Errorf("Expected call to PulsarStorageMock.SetLastPulse with params: %#v", *m.SetLastPulseMock.defaultExpectation.params)
		}
	}
	// if func was set then invocations count should be greater than zero
	if m.funcSetLastPulse != nil && mm_atomic.LoadUint64(&m.afterSetLastPulseCounter) < 1 {
		m.t.Error("Expected call to PulsarStorageMock.SetLastPulse")
	}
}

// MinimockFinish checks that all mocked methods have been called the expected number of times
func (m *PulsarStorageMock) MinimockFinish() {
	if !m.minimockDone() {
		m.MinimockCloseInspect()

		m.MinimockGetLastPulseInspect()

		m.MinimockSavePulseInspect()

		m.MinimockSetLastPulseInspect()
		m.t.FailNow()
	}
}

// MinimockWait waits for all mocked methods to be called the expected number of times
func (m *PulsarStorageMock) MinimockWait(timeout mm_time.Duration) {
	timeoutCh := mm_time.After(timeout)
	for {
		if m.minimockDone() {
			return
		}
		select {
		case <-timeoutCh:
			m.MinimockFinish()
			return
		case <-mm_time.After(10 * mm_time.Millisecond):
		}
	}
}

func (m *PulsarStorageMock) minimockDone() bool {
	done := true
	return done &&
		m.MinimockCloseDone() &&
		m.MinimockGetLastPulseDone() &&
		m.MinimockSavePulseDone() &&
		m.MinimockSetLastPulseDone()
}
