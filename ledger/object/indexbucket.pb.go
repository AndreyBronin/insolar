// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: ledger/object/indexbucket.proto

package object

import (
	fmt "fmt"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	github_com_insolar_insolar_insolar "github.com/insolar/insolar/insolar"
	_ "github.com/insolar/insolar/insolar/record"
	github_com_insolar_insolar_insolar_record "github.com/insolar/insolar/insolar/record"
	io "io"
	math "math"
	reflect "reflect"
	strings "strings"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion2 // please upgrade the proto package

type IndexBucket struct {
	XPolymorph              int32                                               `protobuf:"varint,16,opt,name=__polymorph,json=Polymorph,proto3" json:"__polymorph,omitempty"`
	ObjID                   github_com_insolar_insolar_insolar.ID               `protobuf:"bytes,20,opt,name=ObjID,proto3,customtype=github.com/insolar/insolar/insolar.ID" json:"ObjID"`
	Lifeline                Lifeline                                            `protobuf:"bytes,21,opt,name=Lifeline,proto3" json:"Lifeline"`
	LifelineLastUsed        github_com_insolar_insolar_insolar.PulseNumber      `protobuf:"varint,22,opt,name=LifelineLastUsed,proto3,customtype=github.com/insolar/insolar/insolar.PulseNumber" json:"LifelineLastUsed"`
	PendingRecords          []github_com_insolar_insolar_insolar_record.Virtual `protobuf:"bytes,23,rep,name=PendingRecords,proto3,customtype=github.com/insolar/insolar/insolar/record.Virtual" json:"PendingRecords"`
	PreviousPendingFilament github_com_insolar_insolar_insolar.PulseNumber      `protobuf:"varint,24,opt,name=PreviousPendingFilament,proto3,customtype=github.com/insolar/insolar/insolar.PulseNumber" json:"PreviousPendingFilament"`
}

func (m *IndexBucket) Reset()      { *m = IndexBucket{} }
func (*IndexBucket) ProtoMessage() {}
func (*IndexBucket) Descriptor() ([]byte, []int) {
	return fileDescriptor_82c40bb7e64b245d, []int{0}
}
func (m *IndexBucket) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *IndexBucket) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_IndexBucket.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *IndexBucket) XXX_Merge(src proto.Message) {
	xxx_messageInfo_IndexBucket.Merge(m, src)
}
func (m *IndexBucket) XXX_Size() int {
	return m.Size()
}
func (m *IndexBucket) XXX_DiscardUnknown() {
	xxx_messageInfo_IndexBucket.DiscardUnknown(m)
}

var xxx_messageInfo_IndexBucket proto.InternalMessageInfo

func (m *IndexBucket) GetXPolymorph() int32 {
	if m != nil {
		return m.XPolymorph
	}
	return 0
}

func (m *IndexBucket) GetLifeline() Lifeline {
	if m != nil {
		return m.Lifeline
	}
	return Lifeline{}
}

func init() {
	proto.RegisterType((*IndexBucket)(nil), "object.IndexBucket")
}

func init() { proto.RegisterFile("ledger/object/indexbucket.proto", fileDescriptor_82c40bb7e64b245d) }

var fileDescriptor_82c40bb7e64b245d = []byte{
	// 408 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xa4, 0x52, 0x4b, 0xcb, 0xd3, 0x40,
	0x14, 0x9d, 0xe1, 0x7b, 0xa0, 0x13, 0x1f, 0x25, 0xa8, 0x5f, 0x28, 0x32, 0x09, 0x82, 0x90, 0x4d,
	0x13, 0xac, 0x52, 0xd0, 0x65, 0x2c, 0x42, 0xa1, 0x68, 0x08, 0xe8, 0xb6, 0x64, 0x92, 0x69, 0x3a,
	0x75, 0x92, 0x09, 0x93, 0x44, 0x74, 0xe7, 0x4f, 0xf0, 0x27, 0xb8, 0xf4, 0xa7, 0x74, 0xd9, 0x65,
	0x71, 0x51, 0x6c, 0xba, 0xe9, 0xb2, 0x2b, 0xd7, 0xd2, 0x3c, 0x44, 0x2d, 0x62, 0xc1, 0xd5, 0x7d,
	0x9c, 0x39, 0xe7, 0x9e, 0x7b, 0x19, 0xa4, 0x73, 0x1a, 0x46, 0x54, 0xda, 0x82, 0xcc, 0x69, 0x90,
	0xdb, 0x2c, 0x09, 0xe9, 0x7b, 0x52, 0x04, 0x6f, 0x69, 0x6e, 0xa5, 0x52, 0xe4, 0x42, 0xbd, 0xac,
	0x91, 0x6e, 0x2f, 0x62, 0xf9, 0xac, 0x20, 0x56, 0x20, 0x62, 0x3b, 0x12, 0x91, 0xb0, 0x2b, 0x98,
	0x14, 0xd3, 0xaa, 0xaa, 0x8a, 0x2a, 0xab, 0x69, 0xdd, 0xfb, 0xbf, 0xeb, 0x72, 0x36, 0xa5, 0x9c,
	0x25, 0xb4, 0x41, 0x07, 0xbf, 0x88, 0xb1, 0x24, 0x13, 0xdc, 0x97, 0x47, 0x51, 0xd2, 0x40, 0xc8,
	0xb0, 0x09, 0x35, 0xef, 0xc1, 0xf7, 0x33, 0xa4, 0x8c, 0x0e, 0x16, 0x9d, 0xca, 0xa2, 0x8a, 0x91,
	0x32, 0x99, 0xa4, 0x82, 0x7f, 0x88, 0x85, 0x4c, 0x67, 0x5a, 0xc7, 0x80, 0xe6, 0x85, 0x77, 0xdd,
	0x6d, 0x1b, 0xea, 0x73, 0x74, 0xf1, 0x8a, 0xcc, 0x47, 0x43, 0xed, 0x8e, 0x01, 0xcd, 0x1b, 0x4e,
	0x6f, 0xb1, 0xd6, 0xc1, 0xd7, 0xb5, 0xfe, 0xf0, 0xdf, 0xe3, 0xad, 0xd1, 0xd0, 0xab, 0xb9, 0x6a,
	0x1f, 0x5d, 0x1b, 0x37, 0xf6, 0xb5, 0xbb, 0x06, 0x34, 0x95, 0x7e, 0xc7, 0xaa, 0xd7, 0xb2, 0xda,
	0xbe, 0x73, 0x7e, 0x50, 0xf6, 0x7e, 0xbe, 0x53, 0x09, 0xea, 0xb4, 0xf9, 0xd8, 0xcf, 0xf2, 0xd7,
	0x19, 0x0d, 0xb5, 0x7b, 0x06, 0x34, 0x6f, 0x3a, 0x83, 0xc6, 0x83, 0x75, 0x82, 0x07, 0xb7, 0xe0,
	0x19, 0x7d, 0x59, 0xc4, 0x84, 0x4a, 0xef, 0x48, 0x4f, 0x95, 0xe8, 0x96, 0x4b, 0x93, 0x90, 0x25,
	0x91, 0x57, 0xdd, 0x28, 0xd3, 0xae, 0x8c, 0x33, 0x53, 0xe9, 0xdf, 0xb6, 0x9a, 0x9b, 0xbd, 0x61,
	0x32, 0x2f, 0x7c, 0xee, 0x3c, 0x6d, 0x46, 0x3e, 0x3a, 0xf9, 0xea, 0x2d, 0xd5, 0xfb, 0x63, 0x82,
	0x9a, 0xa2, 0x2b, 0x57, 0xd2, 0x77, 0x4c, 0x14, 0x59, 0x83, 0xbc, 0x60, 0xdc, 0x8f, 0x69, 0x92,
	0x6b, 0xda, 0x7f, 0xad, 0xf7, 0x37, 0xd9, 0x67, 0xe7, 0xbb, 0xcf, 0x3a, 0x70, 0x9e, 0x2c, 0x37,
	0x18, 0xac, 0x36, 0x18, 0xec, 0x37, 0x18, 0x7e, 0x2c, 0x31, 0xfc, 0x52, 0x62, 0xb8, 0x28, 0x31,
	0x5c, 0x96, 0x18, 0x7e, 0x2b, 0x31, 0xdc, 0x95, 0x18, 0xec, 0x4b, 0x0c, 0x3f, 0x6d, 0x31, 0x58,
	0x6e, 0x31, 0x58, 0x6d, 0x31, 0x20, 0x97, 0xd5, 0xaf, 0x79, 0xfc, 0x23, 0x00, 0x00, 0xff, 0xff,
	0x21, 0x20, 0xf4, 0x48, 0xe5, 0x02, 0x00, 0x00,
}

func (this *IndexBucket) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 10)
	s = append(s, "&object.IndexBucket{")
	s = append(s, "XPolymorph: "+fmt.Sprintf("%#v", this.XPolymorph)+",\n")
	s = append(s, "ObjID: "+fmt.Sprintf("%#v", this.ObjID)+",\n")
	s = append(s, "Lifeline: "+strings.Replace(this.Lifeline.GoString(), `&`, ``, 1)+",\n")
	s = append(s, "LifelineLastUsed: "+fmt.Sprintf("%#v", this.LifelineLastUsed)+",\n")
	s = append(s, "PendingRecords: "+fmt.Sprintf("%#v", this.PendingRecords)+",\n")
	s = append(s, "PreviousPendingFilament: "+fmt.Sprintf("%#v", this.PreviousPendingFilament)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func valueToGoStringIndexbucket(v interface{}, typ string) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("func(v %v) *%v { return &v } ( %#v )", typ, typ, pv)
}
func (m *IndexBucket) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *IndexBucket) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.XPolymorph != 0 {
		dAtA[i] = 0x80
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintIndexbucket(dAtA, i, uint64(m.XPolymorph))
	}
	dAtA[i] = 0xa2
	i++
	dAtA[i] = 0x1
	i++
	i = encodeVarintIndexbucket(dAtA, i, uint64(m.ObjID.Size()))
	n1, err := m.ObjID.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n1
	dAtA[i] = 0xaa
	i++
	dAtA[i] = 0x1
	i++
	i = encodeVarintIndexbucket(dAtA, i, uint64(m.Lifeline.Size()))
	n2, err := m.Lifeline.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n2
	if m.LifelineLastUsed != 0 {
		dAtA[i] = 0xb0
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintIndexbucket(dAtA, i, uint64(m.LifelineLastUsed))
	}
	if len(m.PendingRecords) > 0 {
		for _, msg := range m.PendingRecords {
			dAtA[i] = 0xba
			i++
			dAtA[i] = 0x1
			i++
			i = encodeVarintIndexbucket(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if m.PreviousPendingFilament != 0 {
		dAtA[i] = 0xc0
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintIndexbucket(dAtA, i, uint64(m.PreviousPendingFilament))
	}
	return i, nil
}

func encodeVarintIndexbucket(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *IndexBucket) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.XPolymorph != 0 {
		n += 2 + sovIndexbucket(uint64(m.XPolymorph))
	}
	l = m.ObjID.Size()
	n += 2 + l + sovIndexbucket(uint64(l))
	l = m.Lifeline.Size()
	n += 2 + l + sovIndexbucket(uint64(l))
	if m.LifelineLastUsed != 0 {
		n += 2 + sovIndexbucket(uint64(m.LifelineLastUsed))
	}
	if len(m.PendingRecords) > 0 {
		for _, e := range m.PendingRecords {
			l = e.Size()
			n += 2 + l + sovIndexbucket(uint64(l))
		}
	}
	if m.PreviousPendingFilament != 0 {
		n += 2 + sovIndexbucket(uint64(m.PreviousPendingFilament))
	}
	return n
}

func sovIndexbucket(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozIndexbucket(x uint64) (n int) {
	return sovIndexbucket(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (this *IndexBucket) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&IndexBucket{`,
		`XPolymorph:` + fmt.Sprintf("%v", this.XPolymorph) + `,`,
		`ObjID:` + fmt.Sprintf("%v", this.ObjID) + `,`,
		`Lifeline:` + strings.Replace(strings.Replace(this.Lifeline.String(), "Lifeline", "Lifeline", 1), `&`, ``, 1) + `,`,
		`LifelineLastUsed:` + fmt.Sprintf("%v", this.LifelineLastUsed) + `,`,
		`PendingRecords:` + fmt.Sprintf("%v", this.PendingRecords) + `,`,
		`PreviousPendingFilament:` + fmt.Sprintf("%v", this.PreviousPendingFilament) + `,`,
		`}`,
	}, "")
	return s
}
func valueToStringIndexbucket(v interface{}) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("*%v", pv)
}
func (m *IndexBucket) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowIndexbucket
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: IndexBucket: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: IndexBucket: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 16:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field XPolymorph", wireType)
			}
			m.XPolymorph = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIndexbucket
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.XPolymorph |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 20:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ObjID", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIndexbucket
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthIndexbucket
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthIndexbucket
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.ObjID.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 21:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Lifeline", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIndexbucket
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthIndexbucket
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthIndexbucket
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Lifeline.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 22:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LifelineLastUsed", wireType)
			}
			m.LifelineLastUsed = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIndexbucket
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.LifelineLastUsed |= github_com_insolar_insolar_insolar.PulseNumber(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 23:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PendingRecords", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIndexbucket
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthIndexbucket
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthIndexbucket
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PendingRecords = append(m.PendingRecords, github_com_insolar_insolar_insolar_record.Virtual{})
			if err := m.PendingRecords[len(m.PendingRecords)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 24:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PreviousPendingFilament", wireType)
			}
			m.PreviousPendingFilament = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIndexbucket
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PreviousPendingFilament |= github_com_insolar_insolar_insolar.PulseNumber(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipIndexbucket(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthIndexbucket
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthIndexbucket
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipIndexbucket(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowIndexbucket
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowIndexbucket
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowIndexbucket
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthIndexbucket
			}
			iNdEx += length
			if iNdEx < 0 {
				return 0, ErrInvalidLengthIndexbucket
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowIndexbucket
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipIndexbucket(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
				if iNdEx < 0 {
					return 0, ErrInvalidLengthIndexbucket
				}
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthIndexbucket = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowIndexbucket   = fmt.Errorf("proto: integer overflow")
)
