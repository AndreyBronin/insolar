package object

// Code generated by http://github.com/gojuno/minimock (3.0.0). DO NOT EDIT.

import (
	"context"
	"sync"
	mm_atomic "sync/atomic"
	mm_time "time"

	"github.com/gojuno/minimock/v3"
	"github.com/insolar/insolar/insolar"
	record "github.com/insolar/insolar/insolar/record"
)

// IndexModifierMock implements IndexModifier
type IndexModifierMock struct {
	t minimock.Tester

	funcSetIndex          func(ctx context.Context, pn insolar.PulseNumber, index record.Index) (err error)
	inspectFuncSetIndex   func(ctx context.Context, pn insolar.PulseNumber, index record.Index)
	afterSetIndexCounter  uint64
	beforeSetIndexCounter uint64
	SetIndexMock          mIndexModifierMockSetIndex
}

// NewIndexModifierMock returns a mock for IndexModifier
func NewIndexModifierMock(t minimock.Tester) *IndexModifierMock {
	m := &IndexModifierMock{t: t}
	if controller, ok := t.(minimock.MockController); ok {
		controller.RegisterMocker(m)
	}

	m.SetIndexMock = mIndexModifierMockSetIndex{mock: m}
	m.SetIndexMock.callArgs = []*IndexModifierMockSetIndexParams{}

	return m
}

type mIndexModifierMockSetIndex struct {
	mock               *IndexModifierMock
	defaultExpectation *IndexModifierMockSetIndexExpectation
	expectations       []*IndexModifierMockSetIndexExpectation

	callArgs []*IndexModifierMockSetIndexParams
	mutex    sync.RWMutex
}

// IndexModifierMockSetIndexExpectation specifies expectation struct of the IndexModifier.SetIndex
type IndexModifierMockSetIndexExpectation struct {
	mock    *IndexModifierMock
	params  *IndexModifierMockSetIndexParams
	results *IndexModifierMockSetIndexResults
	Counter uint64
}

// IndexModifierMockSetIndexParams contains parameters of the IndexModifier.SetIndex
type IndexModifierMockSetIndexParams struct {
	ctx   context.Context
	pn    insolar.PulseNumber
	index record.Index
}

// IndexModifierMockSetIndexResults contains results of the IndexModifier.SetIndex
type IndexModifierMockSetIndexResults struct {
	err error
}

// Expect sets up expected params for IndexModifier.SetIndex
func (mmSetIndex *mIndexModifierMockSetIndex) Expect(ctx context.Context, pn insolar.PulseNumber, index record.Index) *mIndexModifierMockSetIndex {
	if mmSetIndex.mock.funcSetIndex != nil {
		mmSetIndex.mock.t.Fatalf("IndexModifierMock.SetIndex mock is already set by Set")
	}

	if mmSetIndex.defaultExpectation == nil {
		mmSetIndex.defaultExpectation = &IndexModifierMockSetIndexExpectation{}
	}

	mmSetIndex.defaultExpectation.params = &IndexModifierMockSetIndexParams{ctx, pn, index}
	for _, e := range mmSetIndex.expectations {
		if minimock.Equal(e.params, mmSetIndex.defaultExpectation.params) {
			mmSetIndex.mock.t.Fatalf("Expectation set by When has same params: %#v", *mmSetIndex.defaultExpectation.params)
		}
	}

	return mmSetIndex
}

// Inspect accepts an inspector function that has same arguments as the IndexModifier.SetIndex
func (mmSetIndex *mIndexModifierMockSetIndex) Inspect(f func(ctx context.Context, pn insolar.PulseNumber, index record.Index)) *mIndexModifierMockSetIndex {
	if mmSetIndex.mock.inspectFuncSetIndex != nil {
		mmSetIndex.mock.t.Fatalf("Inspect function is already set for IndexModifierMock.SetIndex")
	}

	mmSetIndex.mock.inspectFuncSetIndex = f

	return mmSetIndex
}

// Return sets up results that will be returned by IndexModifier.SetIndex
func (mmSetIndex *mIndexModifierMockSetIndex) Return(err error) *IndexModifierMock {
	if mmSetIndex.mock.funcSetIndex != nil {
		mmSetIndex.mock.t.Fatalf("IndexModifierMock.SetIndex mock is already set by Set")
	}

	if mmSetIndex.defaultExpectation == nil {
		mmSetIndex.defaultExpectation = &IndexModifierMockSetIndexExpectation{mock: mmSetIndex.mock}
	}
	mmSetIndex.defaultExpectation.results = &IndexModifierMockSetIndexResults{err}
	return mmSetIndex.mock
}

//Set uses given function f to mock the IndexModifier.SetIndex method
func (mmSetIndex *mIndexModifierMockSetIndex) Set(f func(ctx context.Context, pn insolar.PulseNumber, index record.Index) (err error)) *IndexModifierMock {
	if mmSetIndex.defaultExpectation != nil {
		mmSetIndex.mock.t.Fatalf("Default expectation is already set for the IndexModifier.SetIndex method")
	}

	if len(mmSetIndex.expectations) > 0 {
		mmSetIndex.mock.t.Fatalf("Some expectations are already set for the IndexModifier.SetIndex method")
	}

	mmSetIndex.mock.funcSetIndex = f
	return mmSetIndex.mock
}

// When sets expectation for the IndexModifier.SetIndex which will trigger the result defined by the following
// Then helper
func (mmSetIndex *mIndexModifierMockSetIndex) When(ctx context.Context, pn insolar.PulseNumber, index record.Index) *IndexModifierMockSetIndexExpectation {
	if mmSetIndex.mock.funcSetIndex != nil {
		mmSetIndex.mock.t.Fatalf("IndexModifierMock.SetIndex mock is already set by Set")
	}

	expectation := &IndexModifierMockSetIndexExpectation{
		mock:   mmSetIndex.mock,
		params: &IndexModifierMockSetIndexParams{ctx, pn, index},
	}
	mmSetIndex.expectations = append(mmSetIndex.expectations, expectation)
	return expectation
}

// Then sets up IndexModifier.SetIndex return parameters for the expectation previously defined by the When method
func (e *IndexModifierMockSetIndexExpectation) Then(err error) *IndexModifierMock {
	e.results = &IndexModifierMockSetIndexResults{err}
	return e.mock
}

// SetIndex implements IndexModifier
func (mmSetIndex *IndexModifierMock) SetIndex(ctx context.Context, pn insolar.PulseNumber, index record.Index) (err error) {
	mm_atomic.AddUint64(&mmSetIndex.beforeSetIndexCounter, 1)
	defer mm_atomic.AddUint64(&mmSetIndex.afterSetIndexCounter, 1)

	if mmSetIndex.inspectFuncSetIndex != nil {
		mmSetIndex.inspectFuncSetIndex(ctx, pn, index)
	}

	params := &IndexModifierMockSetIndexParams{ctx, pn, index}

	// Record call args
	mmSetIndex.SetIndexMock.mutex.Lock()
	mmSetIndex.SetIndexMock.callArgs = append(mmSetIndex.SetIndexMock.callArgs, params)
	mmSetIndex.SetIndexMock.mutex.Unlock()

	for _, e := range mmSetIndex.SetIndexMock.expectations {
		if minimock.Equal(e.params, params) {
			mm_atomic.AddUint64(&e.Counter, 1)
			return e.results.err
		}
	}

	if mmSetIndex.SetIndexMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&mmSetIndex.SetIndexMock.defaultExpectation.Counter, 1)
		want := mmSetIndex.SetIndexMock.defaultExpectation.params
		got := IndexModifierMockSetIndexParams{ctx, pn, index}
		if want != nil && !minimock.Equal(*want, got) {
			mmSetIndex.t.Errorf("IndexModifierMock.SetIndex got unexpected parameters, want: %#v, got: %#v%s\n", *want, got, minimock.Diff(*want, got))
		}

		results := mmSetIndex.SetIndexMock.defaultExpectation.results
		if results == nil {
			mmSetIndex.t.Fatal("No results are set for the IndexModifierMock.SetIndex")
		}
		return (*results).err
	}
	if mmSetIndex.funcSetIndex != nil {
		return mmSetIndex.funcSetIndex(ctx, pn, index)
	}
	mmSetIndex.t.Fatalf("Unexpected call to IndexModifierMock.SetIndex. %v %v %v", ctx, pn, index)
	return
}

// SetIndexAfterCounter returns a count of finished IndexModifierMock.SetIndex invocations
func (mmSetIndex *IndexModifierMock) SetIndexAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&mmSetIndex.afterSetIndexCounter)
}

// SetIndexBeforeCounter returns a count of IndexModifierMock.SetIndex invocations
func (mmSetIndex *IndexModifierMock) SetIndexBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&mmSetIndex.beforeSetIndexCounter)
}

// Calls returns a list of arguments used in each call to IndexModifierMock.SetIndex.
// The list is in the same order as the calls were made (i.e. recent calls have a higher index)
func (mmSetIndex *mIndexModifierMockSetIndex) Calls() []*IndexModifierMockSetIndexParams {
	mmSetIndex.mutex.RLock()

	argCopy := make([]*IndexModifierMockSetIndexParams, len(mmSetIndex.callArgs))
	copy(argCopy, mmSetIndex.callArgs)

	mmSetIndex.mutex.RUnlock()

	return argCopy
}

// MinimockSetIndexDone returns true if the count of the SetIndex invocations corresponds
// the number of defined expectations
func (m *IndexModifierMock) MinimockSetIndexDone() bool {
	for _, e := range m.SetIndexMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.SetIndexMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterSetIndexCounter) < 1 {
		return false
	}
	// if func was set then invocations count should be greater than zero
	if m.funcSetIndex != nil && mm_atomic.LoadUint64(&m.afterSetIndexCounter) < 1 {
		return false
	}
	return true
}

// MinimockSetIndexInspect logs each unmet expectation
func (m *IndexModifierMock) MinimockSetIndexInspect() {
	for _, e := range m.SetIndexMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Errorf("Expected call to IndexModifierMock.SetIndex with params: %#v", *e.params)
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.SetIndexMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterSetIndexCounter) < 1 {
		if m.SetIndexMock.defaultExpectation.params == nil {
			m.t.Error("Expected call to IndexModifierMock.SetIndex")
		} else {
			m.t.Errorf("Expected call to IndexModifierMock.SetIndex with params: %#v", *m.SetIndexMock.defaultExpectation.params)
		}
	}
	// if func was set then invocations count should be greater than zero
	if m.funcSetIndex != nil && mm_atomic.LoadUint64(&m.afterSetIndexCounter) < 1 {
		m.t.Error("Expected call to IndexModifierMock.SetIndex")
	}
}

// MinimockFinish checks that all mocked methods have been called the expected number of times
func (m *IndexModifierMock) MinimockFinish() {
	if !m.minimockDone() {
		m.MinimockSetIndexInspect()
		m.t.FailNow()
	}
}

// MinimockWait waits for all mocked methods to be called the expected number of times
func (m *IndexModifierMock) MinimockWait(timeout mm_time.Duration) {
	timeoutCh := mm_time.After(timeout)
	for {
		if m.minimockDone() {
			return
		}
		select {
		case <-timeoutCh:
			m.MinimockFinish()
			return
		case <-mm_time.After(10 * mm_time.Millisecond):
		}
	}
}

func (m *IndexModifierMock) minimockDone() bool {
	done := true
	return done &&
		m.MinimockSetIndexDone()
}
