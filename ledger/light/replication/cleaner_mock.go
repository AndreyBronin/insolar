package replication

// Code generated by http://github.com/gojuno/minimock (3.0.0). DO NOT EDIT.

import (
	"context"
	"sync"
	mm_atomic "sync/atomic"
	mm_time "time"

	"github.com/gojuno/minimock/v3"
	"github.com/insolar/insolar/insolar"
)

// CleanerMock implements Cleaner
type CleanerMock struct {
	t minimock.Tester

	funcNotifyAboutPulse          func(ctx context.Context, pn insolar.PulseNumber)
	inspectFuncNotifyAboutPulse   func(ctx context.Context, pn insolar.PulseNumber)
	afterNotifyAboutPulseCounter  uint64
	beforeNotifyAboutPulseCounter uint64
	NotifyAboutPulseMock          mCleanerMockNotifyAboutPulse
}

// NewCleanerMock returns a mock for Cleaner
func NewCleanerMock(t minimock.Tester) *CleanerMock {
	m := &CleanerMock{t: t}
	if controller, ok := t.(minimock.MockController); ok {
		controller.RegisterMocker(m)
	}

	m.NotifyAboutPulseMock = mCleanerMockNotifyAboutPulse{mock: m}
	m.NotifyAboutPulseMock.callArgs = []*CleanerMockNotifyAboutPulseParams{}

	return m
}

type mCleanerMockNotifyAboutPulse struct {
	mock               *CleanerMock
	defaultExpectation *CleanerMockNotifyAboutPulseExpectation
	expectations       []*CleanerMockNotifyAboutPulseExpectation

	callArgs []*CleanerMockNotifyAboutPulseParams
	mutex    sync.RWMutex
}

// CleanerMockNotifyAboutPulseExpectation specifies expectation struct of the Cleaner.NotifyAboutPulse
type CleanerMockNotifyAboutPulseExpectation struct {
	mock   *CleanerMock
	params *CleanerMockNotifyAboutPulseParams

	Counter uint64
}

// CleanerMockNotifyAboutPulseParams contains parameters of the Cleaner.NotifyAboutPulse
type CleanerMockNotifyAboutPulseParams struct {
	ctx context.Context
	pn  insolar.PulseNumber
}

// Expect sets up expected params for Cleaner.NotifyAboutPulse
func (mmNotifyAboutPulse *mCleanerMockNotifyAboutPulse) Expect(ctx context.Context, pn insolar.PulseNumber) *mCleanerMockNotifyAboutPulse {
	if mmNotifyAboutPulse.mock.funcNotifyAboutPulse != nil {
		mmNotifyAboutPulse.mock.t.Fatalf("CleanerMock.NotifyAboutPulse mock is already set by Set")
	}

	if mmNotifyAboutPulse.defaultExpectation == nil {
		mmNotifyAboutPulse.defaultExpectation = &CleanerMockNotifyAboutPulseExpectation{}
	}

	mmNotifyAboutPulse.defaultExpectation.params = &CleanerMockNotifyAboutPulseParams{ctx, pn}
	for _, e := range mmNotifyAboutPulse.expectations {
		if minimock.Equal(e.params, mmNotifyAboutPulse.defaultExpectation.params) {
			mmNotifyAboutPulse.mock.t.Fatalf("Expectation set by When has same params: %#v", *mmNotifyAboutPulse.defaultExpectation.params)
		}
	}

	return mmNotifyAboutPulse
}

// Inspect accepts an inspector function that has same arguments as the Cleaner.NotifyAboutPulse
func (mmNotifyAboutPulse *mCleanerMockNotifyAboutPulse) Inspect(f func(ctx context.Context, pn insolar.PulseNumber)) *mCleanerMockNotifyAboutPulse {
	if mmNotifyAboutPulse.mock.inspectFuncNotifyAboutPulse != nil {
		mmNotifyAboutPulse.mock.t.Fatalf("Inspect function is already set for CleanerMock.NotifyAboutPulse")
	}

	mmNotifyAboutPulse.mock.inspectFuncNotifyAboutPulse = f

	return mmNotifyAboutPulse
}

// Return sets up results that will be returned by Cleaner.NotifyAboutPulse
func (mmNotifyAboutPulse *mCleanerMockNotifyAboutPulse) Return() *CleanerMock {
	if mmNotifyAboutPulse.mock.funcNotifyAboutPulse != nil {
		mmNotifyAboutPulse.mock.t.Fatalf("CleanerMock.NotifyAboutPulse mock is already set by Set")
	}

	if mmNotifyAboutPulse.defaultExpectation == nil {
		mmNotifyAboutPulse.defaultExpectation = &CleanerMockNotifyAboutPulseExpectation{mock: mmNotifyAboutPulse.mock}
	}

	return mmNotifyAboutPulse.mock
}

//Set uses given function f to mock the Cleaner.NotifyAboutPulse method
func (mmNotifyAboutPulse *mCleanerMockNotifyAboutPulse) Set(f func(ctx context.Context, pn insolar.PulseNumber)) *CleanerMock {
	if mmNotifyAboutPulse.defaultExpectation != nil {
		mmNotifyAboutPulse.mock.t.Fatalf("Default expectation is already set for the Cleaner.NotifyAboutPulse method")
	}

	if len(mmNotifyAboutPulse.expectations) > 0 {
		mmNotifyAboutPulse.mock.t.Fatalf("Some expectations are already set for the Cleaner.NotifyAboutPulse method")
	}

	mmNotifyAboutPulse.mock.funcNotifyAboutPulse = f
	return mmNotifyAboutPulse.mock
}

// NotifyAboutPulse implements Cleaner
func (mmNotifyAboutPulse *CleanerMock) NotifyAboutPulse(ctx context.Context, pn insolar.PulseNumber) {
	mm_atomic.AddUint64(&mmNotifyAboutPulse.beforeNotifyAboutPulseCounter, 1)
	defer mm_atomic.AddUint64(&mmNotifyAboutPulse.afterNotifyAboutPulseCounter, 1)

	if mmNotifyAboutPulse.inspectFuncNotifyAboutPulse != nil {
		mmNotifyAboutPulse.inspectFuncNotifyAboutPulse(ctx, pn)
	}

	params := &CleanerMockNotifyAboutPulseParams{ctx, pn}

	// Record call args
	mmNotifyAboutPulse.NotifyAboutPulseMock.mutex.Lock()
	mmNotifyAboutPulse.NotifyAboutPulseMock.callArgs = append(mmNotifyAboutPulse.NotifyAboutPulseMock.callArgs, params)
	mmNotifyAboutPulse.NotifyAboutPulseMock.mutex.Unlock()

	for _, e := range mmNotifyAboutPulse.NotifyAboutPulseMock.expectations {
		if minimock.Equal(e.params, params) {
			mm_atomic.AddUint64(&e.Counter, 1)
			return
		}
	}

	if mmNotifyAboutPulse.NotifyAboutPulseMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&mmNotifyAboutPulse.NotifyAboutPulseMock.defaultExpectation.Counter, 1)
		want := mmNotifyAboutPulse.NotifyAboutPulseMock.defaultExpectation.params
		got := CleanerMockNotifyAboutPulseParams{ctx, pn}
		if want != nil && !minimock.Equal(*want, got) {
			mmNotifyAboutPulse.t.Errorf("CleanerMock.NotifyAboutPulse got unexpected parameters, want: %#v, got: %#v%s\n", *want, got, minimock.Diff(*want, got))
		}

		return

	}
	if mmNotifyAboutPulse.funcNotifyAboutPulse != nil {
		mmNotifyAboutPulse.funcNotifyAboutPulse(ctx, pn)
		return
	}
	mmNotifyAboutPulse.t.Fatalf("Unexpected call to CleanerMock.NotifyAboutPulse. %v %v", ctx, pn)

}

// NotifyAboutPulseAfterCounter returns a count of finished CleanerMock.NotifyAboutPulse invocations
func (mmNotifyAboutPulse *CleanerMock) NotifyAboutPulseAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&mmNotifyAboutPulse.afterNotifyAboutPulseCounter)
}

// NotifyAboutPulseBeforeCounter returns a count of CleanerMock.NotifyAboutPulse invocations
func (mmNotifyAboutPulse *CleanerMock) NotifyAboutPulseBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&mmNotifyAboutPulse.beforeNotifyAboutPulseCounter)
}

// Calls returns a list of arguments used in each call to CleanerMock.NotifyAboutPulse.
// The list is in the same order as the calls were made (i.e. recent calls have a higher index)
func (mmNotifyAboutPulse *mCleanerMockNotifyAboutPulse) Calls() []*CleanerMockNotifyAboutPulseParams {
	mmNotifyAboutPulse.mutex.RLock()

	argCopy := make([]*CleanerMockNotifyAboutPulseParams, len(mmNotifyAboutPulse.callArgs))
	copy(argCopy, mmNotifyAboutPulse.callArgs)

	mmNotifyAboutPulse.mutex.RUnlock()

	return argCopy
}

// MinimockNotifyAboutPulseDone returns true if the count of the NotifyAboutPulse invocations corresponds
// the number of defined expectations
func (m *CleanerMock) MinimockNotifyAboutPulseDone() bool {
	for _, e := range m.NotifyAboutPulseMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.NotifyAboutPulseMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterNotifyAboutPulseCounter) < 1 {
		return false
	}
	// if func was set then invocations count should be greater than zero
	if m.funcNotifyAboutPulse != nil && mm_atomic.LoadUint64(&m.afterNotifyAboutPulseCounter) < 1 {
		return false
	}
	return true
}

// MinimockNotifyAboutPulseInspect logs each unmet expectation
func (m *CleanerMock) MinimockNotifyAboutPulseInspect() {
	for _, e := range m.NotifyAboutPulseMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Errorf("Expected call to CleanerMock.NotifyAboutPulse with params: %#v", *e.params)
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.NotifyAboutPulseMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterNotifyAboutPulseCounter) < 1 {
		if m.NotifyAboutPulseMock.defaultExpectation.params == nil {
			m.t.Error("Expected call to CleanerMock.NotifyAboutPulse")
		} else {
			m.t.Errorf("Expected call to CleanerMock.NotifyAboutPulse with params: %#v", *m.NotifyAboutPulseMock.defaultExpectation.params)
		}
	}
	// if func was set then invocations count should be greater than zero
	if m.funcNotifyAboutPulse != nil && mm_atomic.LoadUint64(&m.afterNotifyAboutPulseCounter) < 1 {
		m.t.Error("Expected call to CleanerMock.NotifyAboutPulse")
	}
}

// MinimockFinish checks that all mocked methods have been called the expected number of times
func (m *CleanerMock) MinimockFinish() {
	if !m.minimockDone() {
		m.MinimockNotifyAboutPulseInspect()
		m.t.FailNow()
	}
}

// MinimockWait waits for all mocked methods to be called the expected number of times
func (m *CleanerMock) MinimockWait(timeout mm_time.Duration) {
	timeoutCh := mm_time.After(timeout)
	for {
		if m.minimockDone() {
			return
		}
		select {
		case <-timeoutCh:
			m.MinimockFinish()
			return
		case <-mm_time.After(10 * mm_time.Millisecond):
		}
	}
}

func (m *CleanerMock) minimockDone() bool {
	done := true
	return done &&
		m.MinimockNotifyAboutPulseDone()
}
